{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"L'image gif ci-dessous pr\u00e9sente diff\u00e9rentes \u00e9tapes du d\u00e9roulement d'un algorithme de rotation d'images inspir\u00e9 d'un travail pr\u00e9sent\u00e9 par Laurent Abbal du lyc\u00e9e fran\u00e7ais de Tokyo. Le programme assez court peut \u00eatre r\u00e9alis\u00e9 par un \u00e9l\u00e8ve de terminale (r\u00e9cursivit\u00e9, approche diviser pour r\u00e9gner ). L'image source repr\u00e9sente l'oeuvre Matsuri Yatai Dragon du peintre japonais Hokusai . Elle est dans le domaine public et disponible sur https://commons.wikimedia.org . Pr\u00e9sentation \u2693\ufe0e Voir notre pr\u00e9sentation de la sp\u00e9cialit\u00e9 NSI . Programme \u2693\ufe0e Le programme officiel Carte mentale du programme Progression \u2693\ufe0e Chapitre 1 : variables et affectations en Python Chapitre 2 : HTML/CSS Chapitre 3 : boucles inconditionnelles en Python avec en TP une approche de l'entr\u00e9e du programme IHM et p\u00e9riph\u00e9riques d'entr\u00e9e/sortie \u00e0 travers la plateforme Quickpi et une synth\u00e8se de cours sur la partie capteurs/actionneurs du th\u00e8me IHM. Chapitre 4 : boucles conditionnelles et tests Chapitre 5 : fonctions et port\u00e9e d'une variable Chapitre 6 : tableaux \u00e0 une dimension Chapitre 7 : tableaux \u00e0 deux dimensions Chapitre 8 : repr\u00e9sentation des entiers Chapitre 9 : syst\u00e8me d'exploitation et ligne de commandes Chapitre 10 : recherche s\u00e9quentielle ou dichotomique Chapitre 11 : algorithmes de tri Chapitre 12 : codage des caract\u00e8res Chapitre 13 : circuits logiques et fonctions bool\u00e9ennes Chapitre 14 : complexit\u00e9 Chapitre 15 : p-uplets Chapitre 16 : flottants Chapitre 17 : architecture de Von Neumann Chapitre 18 : les dictionnaires Chapitre 19 : traitement de donn\u00e9es en table Chapitre 20 : correction d'algorithmes Chapitre 21 : Interaction Homme Machine sur le Web partie 1, protocole HTTP et formulaires Chapitre 22 : Algorithme de classification des K plus proches voisins","title":"Progression"},{"location":"#presentation","text":"Voir notre pr\u00e9sentation de la sp\u00e9cialit\u00e9 NSI .","title":"Pr\u00e9sentation"},{"location":"#programme","text":"Le programme officiel Carte mentale du programme","title":"Programme"},{"location":"#progression","text":"Chapitre 1 : variables et affectations en Python Chapitre 2 : HTML/CSS Chapitre 3 : boucles inconditionnelles en Python avec en TP une approche de l'entr\u00e9e du programme IHM et p\u00e9riph\u00e9riques d'entr\u00e9e/sortie \u00e0 travers la plateforme Quickpi et une synth\u00e8se de cours sur la partie capteurs/actionneurs du th\u00e8me IHM. Chapitre 4 : boucles conditionnelles et tests Chapitre 5 : fonctions et port\u00e9e d'une variable Chapitre 6 : tableaux \u00e0 une dimension Chapitre 7 : tableaux \u00e0 deux dimensions Chapitre 8 : repr\u00e9sentation des entiers Chapitre 9 : syst\u00e8me d'exploitation et ligne de commandes Chapitre 10 : recherche s\u00e9quentielle ou dichotomique Chapitre 11 : algorithmes de tri Chapitre 12 : codage des caract\u00e8res Chapitre 13 : circuits logiques et fonctions bool\u00e9ennes Chapitre 14 : complexit\u00e9 Chapitre 15 : p-uplets Chapitre 16 : flottants Chapitre 17 : architecture de Von Neumann Chapitre 18 : les dictionnaires Chapitre 19 : traitement de donn\u00e9es en table Chapitre 20 : correction d'algorithmes Chapitre 21 : Interaction Homme Machine sur le Web partie 1, protocole HTTP et formulaires Chapitre 22 : Algorithme de classification des K plus proches voisins","title":"Progression"},{"location":"capytale/","text":"Activit\u00e9s disponibles sur Capytale \u2693\ufe0e D\u00e9fi Codin Game Asteroid : code e495-13464","title":"Capytale"},{"location":"capytale/#activites-disponibles-sur-capytale","text":"D\u00e9fi Codin Game Asteroid : code e495-13464","title":"Activit\u00e9s disponibles sur Capytale"},{"location":"chapitre1/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Pdf du cours Correction des entra\u00eenements TP \u2693\ufe0e TP1 : version Markdown version PDF corrig\u00e9 version PDF corrig\u00e9 version ipynb QCM : QCM1 Genumsi","title":"Chapitre 1  variables et affectations"},{"location":"chapitre1/#cours","text":"Pdf du cours Correction des entra\u00eenements","title":"Cours"},{"location":"chapitre1/#tp","text":"TP1 : version Markdown version PDF corrig\u00e9 version PDF corrig\u00e9 version ipynb QCM : QCM1 Genumsi","title":"TP"},{"location":"chapitre10/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Cours version pdf Exercices suppl\u00e9mentaires \u2693\ufe0e Exercice Tas de Graine Castor 2017 \u00c9nonc\u00e9 des exercices Corrig\u00e9s des exercices Tutoriels vid\u00e9o \u2693\ufe0e Parcours s\u00e9quentiel de tableau par Pierre Marquestaut","title":"Chapitre 10  recherches s\u00e9quentielle et dichotomique"},{"location":"chapitre10/#cours","text":"Cours version pdf","title":"Cours"},{"location":"chapitre10/#exercices-supplementaires","text":"Exercice Tas de Graine Castor 2017 \u00c9nonc\u00e9 des exercices Corrig\u00e9s des exercices","title":"Exercices suppl\u00e9mentaires"},{"location":"chapitre10/#tutoriels-video","text":"Parcours s\u00e9quentiel de tableau par Pierre Marquestaut","title":"Tutoriels vid\u00e9o"},{"location":"chapitre11/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Cours version pdf Exercices suppl\u00e9mentaires Tutoriels vid\u00e9o \u2693\ufe0e Algorithmes de tri par Pierre Marquestaut","title":"Chapitre 11  algorithmes de tri"},{"location":"chapitre11/#cours","text":"Cours version pdf Exercices suppl\u00e9mentaires","title":"Cours"},{"location":"chapitre11/#tutoriels-video","text":"Algorithmes de tri par Pierre Marquestaut","title":"Tutoriels vid\u00e9o"},{"location":"chapitre12/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Cours version pdf Exemples et m\u00e9thodes du cours Corrig\u00e9s des exercices du cours","title":"Chapitre 12  codage des caract\u00e8res"},{"location":"chapitre12/#cours","text":"Cours version pdf Exemples et m\u00e9thodes du cours Corrig\u00e9s des exercices du cours","title":"Cours"},{"location":"chapitre13/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Cours version pdf Cours version markdown Archive avec les circuits logisim Corrig\u00e9s des exercices 1 \u00e0 6 Corrig\u00e9s des exercices de programmation du cours (en HTML) Corrig\u00e9s des exercices de programmation du cours (en version notebook) Un article tr\u00e8s int\u00e9ressant de Laurent Bloch sur l'industrie des semi-conducteurs : https://laurentbloch.net/MySpip3/Industrie-des-semi-conducteurs . XKCD 730 Diagram","title":"Chapitre 13  circuits logiques et fonctions bool\u00e9ennes"},{"location":"chapitre13/#cours","text":"Cours version pdf Cours version markdown Archive avec les circuits logisim Corrig\u00e9s des exercices 1 \u00e0 6 Corrig\u00e9s des exercices de programmation du cours (en HTML) Corrig\u00e9s des exercices de programmation du cours (en version notebook) Un article tr\u00e8s int\u00e9ressant de Laurent Bloch sur l'industrie des semi-conducteurs : https://laurentbloch.net/MySpip3/Industrie-des-semi-conducteurs . XKCD 730 Diagram","title":"Cours"},{"location":"chapitre14/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Cours version pdf R\u00e9f\u00e9rence : https://www.bigocheatsheet.com/","title":"Chapitre 14  complexit\u00e9"},{"location":"chapitre14/#cours","text":"Cours version pdf R\u00e9f\u00e9rence : https://www.bigocheatsheet.com/","title":"Cours"},{"location":"chapitre15/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Cours version pdf Cours version markdown Corrig\u00e9 de l'exercice 2 du cours TP \u2693\ufe0e TP version pdf materiel.zip Corrig\u00e9 du TP version python Corrig\u00e9 du TP version notebook XKCD 353 Python","title":"Chapitre 15  p-uplets"},{"location":"chapitre15/#cours","text":"Cours version pdf Cours version markdown Corrig\u00e9 de l'exercice 2 du cours","title":"Cours"},{"location":"chapitre15/#tp","text":"TP version pdf materiel.zip Corrig\u00e9 du TP version python Corrig\u00e9 du TP version notebook XKCD 353 Python","title":"TP"},{"location":"chapitre16/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Cours version pdf Corrig\u00e9 de certains exemples du cours version pdf Corrig\u00e9 de certains exemples du cours version python Corrig\u00e9 de certains exemples du cours version .ipynb TP \u2693\ufe0e TP version pdf Corrig\u00e9 du TP version python","title":"Chapitre 16  flottants"},{"location":"chapitre16/#cours","text":"Cours version pdf Corrig\u00e9 de certains exemples du cours version pdf Corrig\u00e9 de certains exemples du cours version python Corrig\u00e9 de certains exemples du cours version .ipynb","title":"Cours"},{"location":"chapitre16/#tp","text":"TP version pdf Corrig\u00e9 du TP version python","title":"TP"},{"location":"chapitre17/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Cours version pdf Emulateur Aqua : Ressources : Archive avec les programmes pour l'exercice 5 Archive avec les corrig\u00e9s des programmes d'assembleur Correction video de l'exercice 7 Correction video de l'exercice 10 Video \u2693\ufe0e Le cours d'architecture en video sur la plateforme Lumni est tr\u00e8s bien : La video : https://www.lumni.fr/video/une-histoire-de-l-architecture-des-ordinateurs Le support de cours : https://medias2ftv.akamaized.net/videosread/education/PDF/NSI-archi.pdf","title":"Chapitre 17  architecture de Von Neumann"},{"location":"chapitre17/#cours","text":"Cours version pdf Emulateur Aqua : Ressources : Archive avec les programmes pour l'exercice 5 Archive avec les corrig\u00e9s des programmes d'assembleur Correction video de l'exercice 7 Correction video de l'exercice 10","title":"Cours"},{"location":"chapitre17/#video","text":"Le cours d'architecture en video sur la plateforme Lumni est tr\u00e8s bien : La video : https://www.lumni.fr/video/une-histoire-de-l-architecture-des-ordinateurs Le support de cours : https://medias2ftv.akamaized.net/videosread/education/PDF/NSI-archi.pdf","title":"Video"},{"location":"chapitre18/","text":"Retour \u00e0 la page d'accueil TP \u2693\ufe0e TP Scrabble (introduction ludique) TP dictionnaires Cours \u2693\ufe0e Cours version pdf Cours version markdown Exemples du cours en python Video \u2693\ufe0e Pr\u00e9sentation par Pierre Marquestaut Video Lumni de Charles Poulmaire","title":"Chapitre 18,  dictionnaires"},{"location":"chapitre18/#tp","text":"TP Scrabble (introduction ludique) TP dictionnaires","title":"TP"},{"location":"chapitre18/#cours","text":"Cours version pdf Cours version markdown Exemples du cours en python","title":"Cours"},{"location":"chapitre18/#video","text":"Pr\u00e9sentation par Pierre Marquestaut Video Lumni de Charles Poulmaire","title":"Video"},{"location":"chapitre19/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Cours version pdf Cours version markdown Archive avec les exemples du cours TP Recherche et tri : \u2693\ufe0e TP version pdf TP version markdown Ressources pour le TP Correction du TP version pdf Correction du TP version python Correction du TP version notebook TP Fusion de tables : \u2693\ufe0e TP version pdf TP version markdown Ressources pour le TP Code de la version Notebook du TP dans Capytale : 50a5-11200 Correction du TP version python Correction du TP version notebook","title":"Chapitre 19,  traitement de donn\u00e9es en table"},{"location":"chapitre19/#cours","text":"Cours version pdf Cours version markdown Archive avec les exemples du cours","title":"Cours"},{"location":"chapitre19/#tp-recherche-et-tri","text":"TP version pdf TP version markdown Ressources pour le TP Correction du TP version pdf Correction du TP version python Correction du TP version notebook","title":"TP Recherche et tri :"},{"location":"chapitre19/#tp-fusion-de-tables","text":"TP version pdf TP version markdown Ressources pour le TP Code de la version Notebook du TP dans Capytale : 50a5-11200 Correction du TP version python Correction du TP version notebook","title":"TP Fusion de tables :"},{"location":"chapitre2/","text":"Retour \u00e0 la page d'accueil . Archive des activit\u00e9s du chapitre , travail d\u00e9riv\u00e9 de la formation HTML/CSS r\u00e9alis\u00e9e par Nicolas Buyle-Bodin, Jean-Manuel Meny et Mickael Bordonaro. Corrections des exercices sur HTML : exo4 exo5 Synth\u00e8se du chapitre .","title":"Chapitre 2  pages web HTML/CSS"},{"location":"chapitre20/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Cours version pdf","title":"Chapitre 20  correction d'algorithme"},{"location":"chapitre20/#cours","text":"Cours version pdf","title":"Cours"},{"location":"chapitre21/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Cours version pdf Cours version markdown Correction des exemples du cours version pdf Correction des exemples du cours version markdown XKCD 2015 : le nouveau mod\u00e8le OSI , dans quelle couche se trouve HTTP :)d","title":"Chapitre 21,  IHM sur le Web, protocole HTTP et formulaires"},{"location":"chapitre21/#cours","text":"Cours version pdf Cours version markdown Correction des exemples du cours version pdf Correction des exemples du cours version markdown XKCD 2015 : le nouveau mod\u00e8le OSI , dans quelle couche se trouve HTTP :)d","title":"Cours"},{"location":"chapitre22/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Cours version pdf","title":"Chapitre 22  algorithme de classification KNN"},{"location":"chapitre22/#cours","text":"Cours version pdf","title":"Cours"},{"location":"chapitre3/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Pdf du cours sur les boucles inconditionnelles Corrig\u00e9 des entra\u00eenements Boucles for sur la cha\u00eene YouTube du Cours Python 3 d'Arnaud Legout : TP Quickpi : constructions \u00e9l\u00e9mentaires en Python, biblioth\u00e8que, IHM \u2693\ufe0e Pdf de la synth\u00e8se IHM TP issu d'un travail original d'Eric Madec de l'acad\u00e9mie de Rennes : \u00e9nonc\u00e9 version ipynb . l'archive de l'\u00e9nonc\u00e9 en .ipynb avec le dossier des images : pour chaque exercice, l'\u00e9l\u00e8ve recopie le code valid\u00e9 sur la plateforme Quickpi puis exporte le document en HTML pour garder une trace. \u00e9nonc\u00e9 version html corrig\u00e9 version PDF corrig\u00e9 version ipynb Corrig\u00e9s video","title":"Chapitre 3  boucles inconditionnelles"},{"location":"chapitre3/#cours","text":"Pdf du cours sur les boucles inconditionnelles Corrig\u00e9 des entra\u00eenements Boucles for sur la cha\u00eene YouTube du Cours Python 3 d'Arnaud Legout :","title":"Cours"},{"location":"chapitre3/#tp-quickpi-constructions-elementaires-en-python-bibliotheque-ihm","text":"Pdf de la synth\u00e8se IHM TP issu d'un travail original d'Eric Madec de l'acad\u00e9mie de Rennes : \u00e9nonc\u00e9 version ipynb . l'archive de l'\u00e9nonc\u00e9 en .ipynb avec le dossier des images : pour chaque exercice, l'\u00e9l\u00e8ve recopie le code valid\u00e9 sur la plateforme Quickpi puis exporte le document en HTML pour garder une trace. \u00e9nonc\u00e9 version html corrig\u00e9 version PDF corrig\u00e9 version ipynb Corrig\u00e9s video","title":"TP Quickpi : constructions \u00e9l\u00e9mentaires en Python, biblioth\u00e8que, IHM"},{"location":"chapitre4/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Pdf du cours sur les boucles conditionnelles et les tests Corrig\u00e9 des entra\u00eenements Corrig\u00e9s des exemples du cours en version pdf Corrig\u00e9s des exemples du cours en version html Corrig\u00e9s des exemples du cours en version jupyter notebook Tests et op\u00e9rateurs bool\u00e9ens sur la cha\u00eene YouTube du Cours Python 3 d'Arnaud Legout : Boucles while sur la cha\u00eene YouTube du Cours Python 3 d'Arnaud Legout :","title":"Chapitre 4  boucles conditionnelles et tests"},{"location":"chapitre4/#cours","text":"Pdf du cours sur les boucles conditionnelles et les tests Corrig\u00e9 des entra\u00eenements Corrig\u00e9s des exemples du cours en version pdf Corrig\u00e9s des exemples du cours en version html Corrig\u00e9s des exemples du cours en version jupyter notebook Tests et op\u00e9rateurs bool\u00e9ens sur la cha\u00eene YouTube du Cours Python 3 d'Arnaud Legout : Boucles while sur la cha\u00eene YouTube du Cours Python 3 d'Arnaud Legout :","title":"Cours"},{"location":"chapitre5/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Pdf du cours sur les fonctions et la port\u00e9e d'une variable Corrig\u00e9s des exemples du cours : version pdf version html version Jupyter Notebook TD sur Rurple : \u00e9nonc\u00e9 archive avec le mat\u00e9riel corrig\u00e9 R\u00e8gle LEGB de port\u00e9e d'une variable sur la cha\u00eene YouTube du Cours Python 3 d'Arnaud Legout : Diff\u00e9rence entre import math et from math import pi sur la cha\u00eene YouTube du Cours Python 3 d'Arnaud Legout :","title":"Chapitre 5  fonctions et port\u00e9e d'une variable"},{"location":"chapitre5/#cours","text":"Pdf du cours sur les fonctions et la port\u00e9e d'une variable Corrig\u00e9s des exemples du cours : version pdf version html version Jupyter Notebook TD sur Rurple : \u00e9nonc\u00e9 archive avec le mat\u00e9riel corrig\u00e9 R\u00e8gle LEGB de port\u00e9e d'une variable sur la cha\u00eene YouTube du Cours Python 3 d'Arnaud Legout : Diff\u00e9rence entre import math et from math import pi sur la cha\u00eene YouTube du Cours Python 3 d'Arnaud Legout :","title":"Cours"},{"location":"chapitre6/","text":"Retour \u00e0 la page d'accueil Cours \u2693\ufe0e Cours en version pdf Cours en version markdown Corrig\u00e9 des exemples du cours en version html Corrig\u00e9 des exemples du cours en version pdf Corrig\u00e9 des exemples du cours en version notebook Brouillon des exemples du cours TP \u2693\ufe0e TP en version pdf TP en version markdown Mat\u00e9riel du TP \u00e0 t\u00e9l\u00e9charger Corrig\u00e9 du TP en version pdf Corrig\u00e9 du TP en version html Corrig\u00e9 du TP en version notebook Tutoriel vid\u00e9o \u2693\ufe0e Cours sur les tableaux de Pierre Marquestaut de l'acad\u00e9mie de Bordeaux","title":"Chapitre 6  tableaux"},{"location":"chapitre6/#cours","text":"Cours en version pdf Cours en version markdown Corrig\u00e9 des exemples du cours en version html Corrig\u00e9 des exemples du cours en version pdf Corrig\u00e9 des exemples du cours en version notebook Brouillon des exemples du cours","title":"Cours"},{"location":"chapitre6/#tp","text":"TP en version pdf TP en version markdown Mat\u00e9riel du TP \u00e0 t\u00e9l\u00e9charger Corrig\u00e9 du TP en version pdf Corrig\u00e9 du TP en version html Corrig\u00e9 du TP en version notebook","title":"TP"},{"location":"chapitre6/#tutoriel-video","text":"Cours sur les tableaux de Pierre Marquestaut de l'acad\u00e9mie de Bordeaux","title":"Tutoriel vid\u00e9o"},{"location":"chapitre7/","text":"Retour \u00e0 la page d'accueil Cours / TP \u2693\ufe0e Cours / TP en version pdf Cours / TP en version notebook Mat\u00e9riel \u00e9l\u00e8ves Corrig\u00e9 du cours / TP en version html Corrig\u00e9 du cours / TP en version pdf Corrig\u00e9 du cours / TP en version notebook Tutoriel vid\u00e9o \u2693\ufe0e Cours de la maison Lumni sur les tableaux \u00e0 deux dimensions et les images","title":"Chapitre 7  tableaux \u00e0 deux dimensions, images"},{"location":"chapitre7/#cours-tp","text":"Cours / TP en version pdf Cours / TP en version notebook Mat\u00e9riel \u00e9l\u00e8ves Corrig\u00e9 du cours / TP en version html Corrig\u00e9 du cours / TP en version pdf Corrig\u00e9 du cours / TP en version notebook","title":"Cours / TP"},{"location":"chapitre7/#tutoriel-video","text":"Cours de la maison Lumni sur les tableaux \u00e0 deux dimensions et les images","title":"Tutoriel vid\u00e9o"},{"location":"chapitre8/","text":"Retour \u00e0 la page d'accueil Cours / TP \u2693\ufe0e Cours / TP en version pdf Tutoriel vid\u00e9o \u2693\ufe0e Cours sur les op\u00e9rations binaires de Pierre Marquestaut de l'acad\u00e9mie de Bordeaux","title":"Chapitre 8  repr\u00e9sentation des entiers"},{"location":"chapitre8/#cours-tp","text":"Cours / TP en version pdf","title":"Cours / TP"},{"location":"chapitre8/#tutoriel-video","text":"Cours sur les op\u00e9rations binaires de Pierre Marquestaut de l'acad\u00e9mie de Bordeaux","title":"Tutoriel vid\u00e9o"},{"location":"chapitre9/","text":"Retour \u00e0 la page d'accueil TP 1 \u2693\ufe0e Enonc\u00e9 TP1 version pdf Enonc\u00e9 TP1 version markdown Mat\u00e9riel TP1 Corrig\u00e9s du TP1 : Corrig\u00e9s en video archive zip Memento shell \u2693\ufe0e Memento shell version pdf Memento shell version markdown Mat\u00e9riel pour les exemples du memento TP 2 \u2693\ufe0e Enonc\u00e9 TP2 version pdf Enonc\u00e9 TP2 version markdown tour-du-monde-80-jours.zip contacts-1000.csv corrig\u00e9 exo tour du monde corrig\u00e9 exo carnet Cours \u2693\ufe0e Cours version pdf Cours version markdown Expos\u00e9 de Lou, Bogdan et Alexandre sur les syst\u00e8mes d'exploitation \u2693\ufe0e Page d'accueil Tutoriels vid\u00e9o \u2693\ufe0e Comprendre ce qu\u2019est un syst\u00e8me d\u2019exploitation Pr\u00e9sentation par Pierre Marquestaut","title":"Chapitre 9  syst\u00e8me d'exploitation et ligne de commandes"},{"location":"chapitre9/#tp-1","text":"Enonc\u00e9 TP1 version pdf Enonc\u00e9 TP1 version markdown Mat\u00e9riel TP1 Corrig\u00e9s du TP1 : Corrig\u00e9s en video archive zip","title":"TP 1"},{"location":"chapitre9/#memento-shell","text":"Memento shell version pdf Memento shell version markdown Mat\u00e9riel pour les exemples du memento","title":"Memento shell"},{"location":"chapitre9/#tp-2","text":"Enonc\u00e9 TP2 version pdf Enonc\u00e9 TP2 version markdown tour-du-monde-80-jours.zip contacts-1000.csv corrig\u00e9 exo tour du monde corrig\u00e9 exo carnet","title":"TP 2"},{"location":"chapitre9/#cours","text":"Cours version pdf Cours version markdown","title":"Cours"},{"location":"chapitre9/#expose-de-lou-bogdan-et-alexandre-sur-les-systemes-dexploitation","text":"Page d'accueil","title":"Expos\u00e9 de Lou, Bogdan et Alexandre sur les syst\u00e8mes d'exploitation"},{"location":"chapitre9/#tutoriels-video","text":"Comprendre ce qu\u2019est un syst\u00e8me d\u2019exploitation Pr\u00e9sentation par Pierre Marquestaut","title":"Tutoriels vid\u00e9o"},{"location":"outils/","text":"Python \u2693\ufe0e Installation de Python \u2693\ufe0e Installation standard avec Idle Installation Anaconda + Pyzo Installation Thonny (debugger tr\u00e8s pratique) Tutoriels \u2693\ufe0e Memento / Cheatsheet : Memento de Laurent Pointal Interpr\u00e9teurs en ligne \u2693\ufe0e repl.it Pythontutor : permet de visualiser l'\u00e9volution des variables basthon (Romain Casati) => tr\u00e8s bien car on peut t\u00e9l\u00e9verser un script, t\u00e9l\u00e9charger ou partager en lien et sans cr\u00e9er de compte ! basthon version notebook => comme basthon mais pour les notebook jupyter ! Jupyter Hub \u2693\ufe0e Pour acc\u00e9der aux Notebook Jupyter (fichiers d'extension ipynb dans les dossiers ressources ou corrige) du d\u00e9p\u00f4t en mode interactif, cliquez sur le lien Binder ci-dessous. \u00c9diteurs de textes \u2693\ufe0e Il est indispensable d'installer un \u00e9diteur de textes sur sa plateforme, pour \u00e9diter des fichier sources en Python, Javascript ou HTML. Un \u00e9diteur multiplateformes : Notepad++ Un \u00e9diteur pour le d\u00e9veloppement Web : Brackets Plateformes d'entra\u00eenement \u2693\ufe0e France IOI : l'inscription est fortement recommand\u00e9e, nous avons cr\u00e9\u00e9 un groupe ParcPremiereNSI. Pour s'entra\u00eener sur les constructions \u00e9l\u00e9mentaires (boucles, tests, variables, proc\u00e9dures, listes), France IOI propose d\u00e9sormais un parcours en ligne avec le module turtle : http://www.france-ioi.org/progresser/ Codin Game : l'inscription est libre, une orientation plus ludique mais attention ce site comporte des publicit\u00e9s. Le site de pr\u00e9paration du concours Prologin destin\u00e9 initialement plut\u00f4t \u00e0 des \u00e9tudiants en premi\u00e8re ou deuxi\u00e8me ann\u00e9e postbac, mais c'\u00e9tait avant l'ouverture de la sp\u00e9cialit\u00e9 NSI ...","title":"Outils et ressources techniques pour le cours de NSI"},{"location":"outils/#python","text":"","title":"Python"},{"location":"outils/#installation-de-python","text":"Installation standard avec Idle Installation Anaconda + Pyzo Installation Thonny (debugger tr\u00e8s pratique)","title":"Installation de Python"},{"location":"outils/#tutoriels","text":"Memento / Cheatsheet : Memento de Laurent Pointal","title":"Tutoriels"},{"location":"outils/#interpreteurs-en-ligne","text":"repl.it Pythontutor : permet de visualiser l'\u00e9volution des variables basthon (Romain Casati) => tr\u00e8s bien car on peut t\u00e9l\u00e9verser un script, t\u00e9l\u00e9charger ou partager en lien et sans cr\u00e9er de compte ! basthon version notebook => comme basthon mais pour les notebook jupyter !","title":"Interpr\u00e9teurs en ligne"},{"location":"outils/#jupyter-hub","text":"Pour acc\u00e9der aux Notebook Jupyter (fichiers d'extension ipynb dans les dossiers ressources ou corrige) du d\u00e9p\u00f4t en mode interactif, cliquez sur le lien Binder ci-dessous.","title":"Jupyter Hub"},{"location":"outils/#editeurs-de-textes","text":"Il est indispensable d'installer un \u00e9diteur de textes sur sa plateforme, pour \u00e9diter des fichier sources en Python, Javascript ou HTML. Un \u00e9diteur multiplateformes : Notepad++ Un \u00e9diteur pour le d\u00e9veloppement Web : Brackets","title":"\u00c9diteurs de textes"},{"location":"outils/#plateformes-dentrainement","text":"France IOI : l'inscription est fortement recommand\u00e9e, nous avons cr\u00e9\u00e9 un groupe ParcPremiereNSI. Pour s'entra\u00eener sur les constructions \u00e9l\u00e9mentaires (boucles, tests, variables, proc\u00e9dures, listes), France IOI propose d\u00e9sormais un parcours en ligne avec le module turtle : http://www.france-ioi.org/progresser/ Codin Game : l'inscription est libre, une orientation plus ludique mais attention ce site comporte des publicit\u00e9s. Le site de pr\u00e9paration du concours Prologin destin\u00e9 initialement plut\u00f4t \u00e0 des \u00e9tudiants en premi\u00e8re ou deuxi\u00e8me ann\u00e9e postbac, mais c'\u00e9tait avant l'ouverture de la sp\u00e9cialit\u00e9 NSI ...","title":"Plateformes d'entra\u00eenement"},{"location":"projets/","text":"Projet 1 \u2693\ufe0e Projet HTML/CSS de r\u00e9alisation d'un mini-site sur un th\u00e8me en relation avec l'histoire de l'informatique. Le cahier des charges, les sujets et des exemples de ressources ont \u00e9t\u00e9 propos\u00e9s aux \u00e9l\u00e8ves. Mod\u00e8le de site fourni Projet 2 \u2693\ufe0e Projet de programmation sur le jeu Bulls and Cows permettant de r\u00e9investir les constructions \u00e9l\u00e9mentaires du langage Python : Inscription Sujet Mat\u00e9riel Projet 3 \u2693\ufe0e Projet de g\u00e9n\u00e9ration de labyrinthe parfait avec turtle : le sujet un squelette de code Projet 4 \u2693\ufe0e Projet sur le th\u00e8me de la compression. le sujet le mat\u00e9riel le bac \u00e0 sable pour ceux qui ne r\u00e9ussiraient pas \u00e0 installer PIL notebook basthon avec des exemples de manipulations de bytes . Pour aller plus loin, les plus motiv\u00e9s peuvent traiter la deuxi\u00e8me partie qui \u00e9tait propos\u00e9e dans la version initiale du sujet avec l'impl\u00e9mentation l'algorithme de compression par dictionnaire LZW. ancienne version du sujet . Les ressources se trouvent dans le dossier Projets/Compression du d\u00e9p\u00f4t. Projet final \u2693\ufe0e D\u00e9couverte des interfaces graphiques avec Tkinter : \u00e9nonc\u00e9 pdf archive zip => extraire puis compl\u00e9ter/ex\u00e9cuter le fichier \u00e9l\u00e8ve dans spyder squelette de code sur repl.it => faites un fork . Un autre petit exemple d'interface graphique avec Tkinter , un chronom\u00e8tre . Fichier source Cadrage du projet final et liste des sujets : document de cadrage ressources","title":"Projets"},{"location":"projets/#projet-1","text":"Projet HTML/CSS de r\u00e9alisation d'un mini-site sur un th\u00e8me en relation avec l'histoire de l'informatique. Le cahier des charges, les sujets et des exemples de ressources ont \u00e9t\u00e9 propos\u00e9s aux \u00e9l\u00e8ves. Mod\u00e8le de site fourni","title":"Projet 1"},{"location":"projets/#projet-2","text":"Projet de programmation sur le jeu Bulls and Cows permettant de r\u00e9investir les constructions \u00e9l\u00e9mentaires du langage Python : Inscription Sujet Mat\u00e9riel","title":"Projet 2"},{"location":"projets/#projet-3","text":"Projet de g\u00e9n\u00e9ration de labyrinthe parfait avec turtle : le sujet un squelette de code","title":"Projet 3"},{"location":"projets/#projet-4","text":"Projet sur le th\u00e8me de la compression. le sujet le mat\u00e9riel le bac \u00e0 sable pour ceux qui ne r\u00e9ussiraient pas \u00e0 installer PIL notebook basthon avec des exemples de manipulations de bytes . Pour aller plus loin, les plus motiv\u00e9s peuvent traiter la deuxi\u00e8me partie qui \u00e9tait propos\u00e9e dans la version initiale du sujet avec l'impl\u00e9mentation l'algorithme de compression par dictionnaire LZW. ancienne version du sujet . Les ressources se trouvent dans le dossier Projets/Compression du d\u00e9p\u00f4t.","title":"Projet 4"},{"location":"projets/#projet-final","text":"D\u00e9couverte des interfaces graphiques avec Tkinter : \u00e9nonc\u00e9 pdf archive zip => extraire puis compl\u00e9ter/ex\u00e9cuter le fichier \u00e9l\u00e8ve dans spyder squelette de code sur repl.it => faites un fork . Un autre petit exemple d'interface graphique avec Tkinter , un chronom\u00e8tre . Fichier source Cadrage du projet final et liste des sujets : document de cadrage ressources","title":"Projet final"},{"location":"qcm/","text":"Les QCM sont disponibles sur les sites Genumsi ou Doctools maintenus par des professeurs de l'\u00e9ducation nationale en dehors de toute mission institutionnelle. QCM Genumsi \u2693\ufe0e Chapitre 1 : Affectations et types de base : \u00c9nonc\u00e9 Corrig\u00e9 QCM bilan sur les constructions \u00e9l\u00e9mentaires (affectations, tests, boucles) : \u00c9nonc\u00e9 Corrig\u00e9 QCM sur les fonctions (partie 1, sans tableaux) : \u00c9nonc\u00e9 Corrig\u00e9 QCM sur les tableaux/listes Python \u00e0 une dimension : QCM 1 sur les th\u00e8mes Index / M\u00e9thodes de tableau dynamique : \u00c9nonc\u00e9 Corrig\u00e9 QCM 2 sur les tableaux/listes en compr\u00e9hension : \u00c9nonc\u00e9 Corrig\u00e9 QCM sur les tableaux \u00e0 deux dimensions : \u00c9nonc\u00e9 Corrig\u00e9 QCM sur le syst\u00e8me d'exploitation et la ligne de commandes : \u00c9nonc\u00e9 Corrig\u00e9 QCM sur les cha\u00eenes de caract\u00e8res : \u00c9nonc\u00e9 Corrig\u00e9 QCM sur l'architecture de Von Neumann et l'histoire de l'informatique : \u00c9nonc\u00e9 Corrig\u00e9 QCM sur les dictionnaires : \u00c9nonc\u00e9 Corrig\u00e9","title":"QCM"},{"location":"qcm/#qcm-genumsi","text":"Chapitre 1 : Affectations et types de base : \u00c9nonc\u00e9 Corrig\u00e9 QCM bilan sur les constructions \u00e9l\u00e9mentaires (affectations, tests, boucles) : \u00c9nonc\u00e9 Corrig\u00e9 QCM sur les fonctions (partie 1, sans tableaux) : \u00c9nonc\u00e9 Corrig\u00e9 QCM sur les tableaux/listes Python \u00e0 une dimension : QCM 1 sur les th\u00e8mes Index / M\u00e9thodes de tableau dynamique : \u00c9nonc\u00e9 Corrig\u00e9 QCM 2 sur les tableaux/listes en compr\u00e9hension : \u00c9nonc\u00e9 Corrig\u00e9 QCM sur les tableaux \u00e0 deux dimensions : \u00c9nonc\u00e9 Corrig\u00e9 QCM sur le syst\u00e8me d'exploitation et la ligne de commandes : \u00c9nonc\u00e9 Corrig\u00e9 QCM sur les cha\u00eenes de caract\u00e8res : \u00c9nonc\u00e9 Corrig\u00e9 QCM sur l'architecture de Von Neumann et l'histoire de l'informatique : \u00c9nonc\u00e9 Corrig\u00e9 QCM sur les dictionnaires : \u00c9nonc\u00e9 Corrig\u00e9","title":"QCM Genumsi"},{"location":"ressources/","text":"Bac \u2693\ufe0e Sujets d'E3C2 de la banque publique Un outil pour t\u00e9l\u00e9charger tous les sujets sur son PC Le site acad\u00e9mique NSI : Format des \u00e9preuves du Bac Banque nationale pour l'\u00e9preuve pratique 2021 sujet z\u00e9ro EDS 2021 Tutoriels Python \u2693\ufe0e L'excellent cours du MOOC Python 3 de la plateforme FUN . Ressources pour le cours de premi\u00e8re NSI \u2693\ufe0e L'excellente cha\u00eene peertube de Pierre Marquestaut . Langages de programmation (th\u00e8me 6) \u2693\ufe0e Conf\u00e9rence de Judicael Courant : \"Une br\u00e8ve histoire des langages de programmation\" Captation vid\u00e9o de la conf\u00e9rence Conf\u00e9rence de G\u00e9rard Berry sur l'importance des langages en informatique (\u00e0 partie de la minute 12) Ordinateur et calcul \u2693\ufe0e Conf\u00e9rence de G\u00e9rard Berry : \"Penser, mod\u00e9liser et ma\u00eetriser le calcul informatique\" Captation vid\u00e9o de la conf\u00e9rence Informatique et simulation \u2693\ufe0e Conf\u00e9rence de G\u00e9rard Berry sur la r\u00e9volution informatique dans les sciences \"Qu'est-ce que la simulation ? La simulation c'est remplacer l'\u00e9nergie et la mati\u00e8re par de l'information\".","title":"Ressources pour le cours de NSI"},{"location":"ressources/#bac","text":"Sujets d'E3C2 de la banque publique Un outil pour t\u00e9l\u00e9charger tous les sujets sur son PC Le site acad\u00e9mique NSI : Format des \u00e9preuves du Bac Banque nationale pour l'\u00e9preuve pratique 2021 sujet z\u00e9ro EDS 2021","title":"Bac"},{"location":"ressources/#tutoriels-python","text":"L'excellent cours du MOOC Python 3 de la plateforme FUN .","title":"Tutoriels Python"},{"location":"ressources/#ressources-pour-le-cours-de-premiere-nsi","text":"L'excellente cha\u00eene peertube de Pierre Marquestaut .","title":"Ressources pour le cours de premi\u00e8re NSI"},{"location":"ressources/#langages-de-programmation-theme-6","text":"Conf\u00e9rence de Judicael Courant : \"Une br\u00e8ve histoire des langages de programmation\" Captation vid\u00e9o de la conf\u00e9rence Conf\u00e9rence de G\u00e9rard Berry sur l'importance des langages en informatique (\u00e0 partie de la minute 12)","title":"Langages de programmation (th\u00e8me 6)"},{"location":"ressources/#ordinateur-et-calcul","text":"Conf\u00e9rence de G\u00e9rard Berry : \"Penser, mod\u00e9liser et ma\u00eetriser le calcul informatique\" Captation vid\u00e9o de la conf\u00e9rence","title":"Ordinateur et calcul"},{"location":"ressources/#informatique-et-simulation","text":"Conf\u00e9rence de G\u00e9rard Berry sur la r\u00e9volution informatique dans les sciences \"Qu'est-ce que la simulation ? La simulation c'est remplacer l'\u00e9nergie et la mati\u00e8re par de l'information\".","title":"Informatique et simulation"},{"location":"scrabble/","text":"Pr\u00e9sentation de la structure de donn\u00e9es dictionnaires \u2693\ufe0e Pr\u00e9sentation video par Pierre Marquestaut En Python la structure de donn\u00e9es dictionnaire est impl\u00e9ment\u00e9e par le type dict . Voici un exemple de construction de dictionnaire en Python et de manipulation avec les op\u00e9rations de base : d\u00e9finition, acc\u00e8s en lecture / \u00e9criture,test d'appartenance, parcours. annuaire = {} #initialisation d'un dictionnaire vide annuaire = { 'Victor' : '06 44 44 44 44'} #on peut aussi initialiser un dictionnaire par extension print(\"Lecture du num\u00e9ro de t\u00e9l\u00e9phone de Victor dans le dictionnaire annuaire \", annuaire['Victor']) print(\"Modification du num\u00e9ro de Victor dans le dictionnaire annuaire \") annuaire['Victor'] = '06 33 33 33 33' print(\"Ajout du num\u00e9ro de Val\u00e9rie dans le dictionnaire annuaire \") annuaire['Val\u00e9rie'] = '06 22 22 22 22' print(\"Affichage du dictionnaire annuaire\") print(\"Test d'appartenance de la clef 'Antoine' au dictionnaire annuaire\", 'Antoine' in annuaire) print(\"Test d'appartenance de la clef 'Val\u00e9rie' au dictionnaire annuaire\", 'Val\u00e9rie' in annuaire) print(\"Parcours du dictionnaire annuaire par clefs (ici les personnes) :\") for clef in annuaire: print(\"Clef : \", clef, \" Valeur : \", annuaire[clef]) print(\"Parcours du dictionnaire annuaire par tuple (clef, valeur) (ici (personne, num\u00e9ro)) :\") for clef, valeur in annuaire.items(): print(\"Clef : \", clef, \" Valeur : \", valeur) Si Binder ne se lance pas, le snippet sur glot.io : Le m\u00eame snippet mais sur basthon Une premi\u00e8re utilisation des dictionnaires : r\u00e9solution d'un probl\u00e8me sur CodinGame \u2693\ufe0e Lire l'\u00e9nonc\u00e9 du probl\u00e8me sur la page https://www.codingame.com/ide/puzzle/scrabble . Pour r\u00e9soudre ce probl\u00e8me on propose de compl\u00e9ter le code ci-dessous : dans spyder , compl\u00e9ter chaque fonction en respectant sa sp\u00e9cifications des fonctions et en v\u00e9rifiant les tests unitaires qui l'accompagnent. compl\u00e9ter le code du programme principal soumettre son code aux validateurs sur la page https://www.codingame.com/ide/puzzle/scrabble . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 #dictionnaire des valeurs des lettres minuscules au scrabble valeur = { 'a' : 1 , 'e' : 1 , 'i' : 1 , 'o' : 1 , 'n' : 1 , 'r' : 1 , 't' : 1 , 'l' : 1 , 's' : 1 , 'u' : 1 , 'd' : 2 , 'g' : 2 , 'b' : 3 , 'c' : 3 , 'm' : 3 , 'p' : 3 , 'f' : 4 , 'h' : 4 , 'v' : 4 , 'w' : 4 , 'y' : 4 , 'k' : 5 , 'j' : 8 , 'x' : 8 , 'q' : 10 , 'z' : 10 } def signature ( mot ): \"\"\"Param\u00e8tre : mot de type str Valeur renvoy\u00e9e : un dictionnaire repr\u00e9sentant le nombre d'occurences de chaque lettre minuscule de l'alphabet dans mot\"\"\" sig = {} #dictionnaire vide for c in mot : \"\u00e0 compl\u00e9ter\" return sig #Tests unitaires de la fonction signature assert signature ( \"\" ) == {} assert signature ( \"ananas\" ) == { 'a' : 3 , 'n' : 2 , 's' : 1 } assert signature ( \"abcd\" ) == { 'a' : 1 , 'b' : 1 , 'c' : 1 , 'd' : 1 } def score_mot ( mot , valeur ): \"\"\"Param\u00e8tre : mot de type str, valeur de type dict associe \u00e0 chaque lettre minuscule sa valeur au scrabble Valeur renvoy\u00e9e : score du mot au scrabble\"\"\" s = 0 \"\u00e0 compl\u00e9ter\" return s #Tests unitaires de la fonction signature assert score_mot ( \"\" ) == 0 assert score_mot ( \"zazou\" ) == 23 assert score_mot ( \"ananas\" ) == 6 def mot_possible ( mot , sig_lettres ): \"\"\"Param\u00e8tre : mot de type str sig_lettres de type dict repr\u00e9sente la signature des lettres disponibles Valeur renvoy\u00e9e : un bool\u00e9en indiquant si sig_mot compatible avec sig_lettres et donc si le mot peut \u00eatre compos\u00e9 avec les lettres fournies\"\"\" sig_mot = signature ( mot ) \"\u00e0 compl\u00e9ter\" #Tests unitaires de la fonction mot_possible assert mot_possible ( \"zazou\" , { \"a\" : 1 , \"b\" : 1 , \"o\" : 2 , \"u\" : 1 , \"z\" : 2 }) == True assert mot_possible ( \"zazou\" , { \"b\" : 1 , \"o\" : 1 , \"u\" : 1 , \"z\" : 2 }) == False assert mot_possible ( \"zazou\" , { \"a\" : 1 , \"o\" : 2 , \"u\" : 3 , \"z\" : 1 }) == False #Programme principal # saisie du nombre de mots du dictionnaire n = int ( input ()) # saisie des mots du dictionnaire dans une liste dico = [ input () . rstrip () for _ in range ( n )] letters = input () . rstrip () sig_lettres = signature ( letters ) smax = - 1 mot_max = \"\" # boucle sur les mots du dictionnaire for mot in dico : \"\u00e0 compl\u00e9ter\" print ( mot_max ) Attention, spoiler ! solution","title":"TP scrabble"},{"location":"scrabble/#presentation-de-la-structure-de-donnees-dictionnaires","text":"Pr\u00e9sentation video par Pierre Marquestaut En Python la structure de donn\u00e9es dictionnaire est impl\u00e9ment\u00e9e par le type dict . Voici un exemple de construction de dictionnaire en Python et de manipulation avec les op\u00e9rations de base : d\u00e9finition, acc\u00e8s en lecture / \u00e9criture,test d'appartenance, parcours. annuaire = {} #initialisation d'un dictionnaire vide annuaire = { 'Victor' : '06 44 44 44 44'} #on peut aussi initialiser un dictionnaire par extension print(\"Lecture du num\u00e9ro de t\u00e9l\u00e9phone de Victor dans le dictionnaire annuaire \", annuaire['Victor']) print(\"Modification du num\u00e9ro de Victor dans le dictionnaire annuaire \") annuaire['Victor'] = '06 33 33 33 33' print(\"Ajout du num\u00e9ro de Val\u00e9rie dans le dictionnaire annuaire \") annuaire['Val\u00e9rie'] = '06 22 22 22 22' print(\"Affichage du dictionnaire annuaire\") print(\"Test d'appartenance de la clef 'Antoine' au dictionnaire annuaire\", 'Antoine' in annuaire) print(\"Test d'appartenance de la clef 'Val\u00e9rie' au dictionnaire annuaire\", 'Val\u00e9rie' in annuaire) print(\"Parcours du dictionnaire annuaire par clefs (ici les personnes) :\") for clef in annuaire: print(\"Clef : \", clef, \" Valeur : \", annuaire[clef]) print(\"Parcours du dictionnaire annuaire par tuple (clef, valeur) (ici (personne, num\u00e9ro)) :\") for clef, valeur in annuaire.items(): print(\"Clef : \", clef, \" Valeur : \", valeur) Si Binder ne se lance pas, le snippet sur glot.io : Le m\u00eame snippet mais sur basthon","title":"Pr\u00e9sentation de la structure de donn\u00e9es dictionnaires"},{"location":"scrabble/#une-premiere-utilisation-des-dictionnaires-resolution-dun-probleme-sur-codingame","text":"Lire l'\u00e9nonc\u00e9 du probl\u00e8me sur la page https://www.codingame.com/ide/puzzle/scrabble . Pour r\u00e9soudre ce probl\u00e8me on propose de compl\u00e9ter le code ci-dessous : dans spyder , compl\u00e9ter chaque fonction en respectant sa sp\u00e9cifications des fonctions et en v\u00e9rifiant les tests unitaires qui l'accompagnent. compl\u00e9ter le code du programme principal soumettre son code aux validateurs sur la page https://www.codingame.com/ide/puzzle/scrabble . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 #dictionnaire des valeurs des lettres minuscules au scrabble valeur = { 'a' : 1 , 'e' : 1 , 'i' : 1 , 'o' : 1 , 'n' : 1 , 'r' : 1 , 't' : 1 , 'l' : 1 , 's' : 1 , 'u' : 1 , 'd' : 2 , 'g' : 2 , 'b' : 3 , 'c' : 3 , 'm' : 3 , 'p' : 3 , 'f' : 4 , 'h' : 4 , 'v' : 4 , 'w' : 4 , 'y' : 4 , 'k' : 5 , 'j' : 8 , 'x' : 8 , 'q' : 10 , 'z' : 10 } def signature ( mot ): \"\"\"Param\u00e8tre : mot de type str Valeur renvoy\u00e9e : un dictionnaire repr\u00e9sentant le nombre d'occurences de chaque lettre minuscule de l'alphabet dans mot\"\"\" sig = {} #dictionnaire vide for c in mot : \"\u00e0 compl\u00e9ter\" return sig #Tests unitaires de la fonction signature assert signature ( \"\" ) == {} assert signature ( \"ananas\" ) == { 'a' : 3 , 'n' : 2 , 's' : 1 } assert signature ( \"abcd\" ) == { 'a' : 1 , 'b' : 1 , 'c' : 1 , 'd' : 1 } def score_mot ( mot , valeur ): \"\"\"Param\u00e8tre : mot de type str, valeur de type dict associe \u00e0 chaque lettre minuscule sa valeur au scrabble Valeur renvoy\u00e9e : score du mot au scrabble\"\"\" s = 0 \"\u00e0 compl\u00e9ter\" return s #Tests unitaires de la fonction signature assert score_mot ( \"\" ) == 0 assert score_mot ( \"zazou\" ) == 23 assert score_mot ( \"ananas\" ) == 6 def mot_possible ( mot , sig_lettres ): \"\"\"Param\u00e8tre : mot de type str sig_lettres de type dict repr\u00e9sente la signature des lettres disponibles Valeur renvoy\u00e9e : un bool\u00e9en indiquant si sig_mot compatible avec sig_lettres et donc si le mot peut \u00eatre compos\u00e9 avec les lettres fournies\"\"\" sig_mot = signature ( mot ) \"\u00e0 compl\u00e9ter\" #Tests unitaires de la fonction mot_possible assert mot_possible ( \"zazou\" , { \"a\" : 1 , \"b\" : 1 , \"o\" : 2 , \"u\" : 1 , \"z\" : 2 }) == True assert mot_possible ( \"zazou\" , { \"b\" : 1 , \"o\" : 1 , \"u\" : 1 , \"z\" : 2 }) == False assert mot_possible ( \"zazou\" , { \"a\" : 1 , \"o\" : 2 , \"u\" : 3 , \"z\" : 1 }) == False #Programme principal # saisie du nombre de mots du dictionnaire n = int ( input ()) # saisie des mots du dictionnaire dans une liste dico = [ input () . rstrip () for _ in range ( n )] letters = input () . rstrip () sig_lettres = signature ( letters ) smax = - 1 mot_max = \"\" # boucle sur les mots du dictionnaire for mot in dico : \"\u00e0 compl\u00e9ter\" print ( mot_max ) Attention, spoiler ! solution","title":"Une premi\u00e8re utilisation des dictionnaires : r\u00e9solution d'un probl\u00e8me sur CodinGame"},{"location":"seances/","text":"S\u00e9ance du 12/11/2020 S\u00e9ance du 19/11/2020 S\u00e9ance du 26/11/2020 S\u00e9ance du 03/12/2020 S\u00e9ance du 10/12/2020 S\u00e9ance du 17/12/2020 S\u00e9ance du 07/01/2021 S\u00e9ance du 14/01/2021 S\u00e9ance du 21/01/2021 S\u00e9ance du 28/01/2021 S\u00e9ance du 04/02/2021 S\u00e9ance du 25/02/2021 S\u00e9ance du 03/03/2021 S\u00e9ance du 10/03/2021 S\u00e9ance du 17/03/2021 S\u00e9ance du 24/03/2021 S\u00e9ance du 01/04/2021 S\u00e9ance du 08/04/2021","title":"S\u00e9ances"},{"location":"sujets-html-css/","text":"Ressources g\u00e9n\u00e9rales sur l'histoire de l'informatique : Au CDI, le livre Histoire illustr\u00e9e de l'informatique d'Emmanuel Lazard et Pierre Mounier-Kuhn. La captation vid\u00e9o de la conf\u00e9rence de Judicael Courant sur L'histoire des langages de programmation. Le portail sur l'histoire du num\u00e9rique d'Interstices , revue de culture scientifique de l'INRIA. Un site en fran\u00e7ais sur l'histoire de l'informatique : http://histoire.info.online.fr/ La frise chronologique (en anglais) du mus\u00e9e de l'informatique de Mountain View. Voici quelques sujets sur l'histoire de l'informatique avec des liens vers des ressources. Les machines m\u00e9caniques : de la Pascaline \u00e0 la machine analytique de Babbage en passant par la joueuse de tympanon Ressources : https://fr.wikipedia.org/wiki/La_Joueuse_de_tympanon https://interstices.info/linvention-de-la-mecanographie/ https://interstices.info/outils-machines-et-informatique/ ENIAC, EDVAC, EDSAC, rapport Von Neumann, les premiers ordinateurs (1945 - 1955) Ressources : https://interstices.info/le-modele-darchitecture-de-von-neumann/ https://interstices.info/lordinateur-objet-du-siecle/ De la conf\u00e9rence de Darmouth et du perceptron aux r\u00e9seaux de neurones, \u00e9volution de l'importance de l'Intelligence Artificielle dans l'Informatique Ressources : https://fr.wikipedia.org/wiki/Conf%C3%A9rence_de_Dartmouth https://interstices.info/marvin-minsky-un-pere-visionnaire-de-lintelligence-artificielle/ https://interstices.info/la-revolution-de-lapprentissage-profond/ De la machine d'Hollerith aux services dans le cloud, en passant par les premiers ordinateurs commerciaux et le Personal Computer, \u00e9volution d'IBM une entreprise de l'informatique Ressources : https://fr.wikipedia.org/wiki/IBM https://interstices.info/linvention-de-la-mecanographie/ De GM/NAA \u00e0 Linux et Windows en passant par Unix et MS DOS, une histoire des syst\u00e8mes d'exploitation Ressources : https://interstices.info/la-naissance-des-systemes-dexploitation/ https://fr.wikipedia.org/wiki/Unix https://fr.wikipedia.org/wiki/Microsoft_Windows De la machine de Turing au test de l'imitation, histoire d'Alan Turing, p\u00e8re fondateur de la science informatique Ressources : https://interstices.info/comment-fonctionne-une-machine-de-turing/ https://interstices.info/alan-turing-du-calculable-a-lindecidable/ https://interstices.info/turing-les-images-dune-imitation/ D'Ada Lovelace \u00e0 Aur\u00e9lie Jean, en passant par Grace Hopper et Frances Allen, des femmes fortes en informatique Ressources : https://interstices.info/lire-voir-les-oubliees-du-numerique/ https://interstices.info/idee-recue-linformatique-ce-nest-pas-pour-les-filles/ https://fr.wikipedia.org/wiki/Ada_Lovelace https://www.lemonde.fr/disparitions/article/2020/08/10/frances-allen-pionniere-de-l-informatique-est-morte_6048608_3382.html https://fr.wikipedia.org/wiki/Aur%C3%A9lie_Jean D'Arpanet \u00e0 Internet, naissance d'un r\u00e9seau mondial Ressources : page Web Une br\u00e8ve histoire des r\u00e9seaux de t\u00e9l\u00e9communications une pr\u00e9sentation assez compl\u00e8te (jusqu'\u00e0 la page 65 pour l'histoire d'Internet) par Alexandre Serres de l'URFIST de Rennes une frise chronologique tr\u00e8s compl\u00e8te mais en Anglais De la documentation du CERN \u00e0 Wikipedia, l'explosion du Web Ressources : Les paragraphes 1, 2 et 3 de la page Web Les d\u00e9buts du Web \u2026 sous l'\u0153il du W3C La vid\u00e9o D\u00e9couvrons l'histoire du Web du manuel Delagrave de SNT. https://interstices.info/du-web-aux-wikis-une-histoire-des-outils-collaboratifs/ De Fortran \u00e0 Rust en passant par C et Python, \u00e9volution des langages de programmation Ressources : Les notes de la conf\u00e9rence de Judicael Courant sur les langages de programmation. https://interstices.info/naissance-des-langages-de-programmation/ https://interstices.info/pourquoi-creer-des-nouveaux-langages-de-programmation/","title":"Sujets projet HTML-CSS"},{"location":"chapitre1/TP1/1NSI-Chap1-Variables-TP1-git/","text":"Cr\u00e9dits Utiliser le mode interactif Premiers programmes et premi\u00e8res erreurs Etat d\u2019un programme, effets de bord Utiliser une biblioth\u00e8que Cr\u00e9dits \u2693\ufe0e Ce cours est inspir\u00e9 du chapitre 1 du manuel NSI de la collection Tortue chez Ellipse, auteurs : Ballabonski, Conchon, Filliatre, N\u2019Guyen. Utiliser le mode interactif \u2693\ufe0e Pour installer sur votre machine l\u2019environnement Idle de programmation en Python , on peut le t\u00e9l\u00e9charger depuis le site officiel https://www.python.org/downloads/ . Au lyc\u00e9e dans une session Windows, un raccourci sur le bureau doit permettre de lancer Idle, et dans une session Ubuntu, il suffit d\u2019ouvrir un terminal de commande avec CTRL + ALT + T et de saisir la commande idle-python3.x ou x est le num\u00e9ro de version de Python (la touche de tabulation permet d\u2019obtenir l\u2019autocompl\u00e9tion apr\u00e8s avoir saisi idle-python3 ). Exercice 1 \u00c9crire les expressions suivantes avec un parenth\u00e9sage explicite permettant d\u2019indiquer l\u2019ordre de priorit\u00e9 des op\u00e9rations : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 >>> 2 - 3 - 4 - 5 >>> 1 / 2 ** 3 0.125 >>> 1 / 2 / 4 0.125 >>> 1 / 2 * 4 2.0 >>> 2 * 3 ** 2 18 >>> 2 ** 3 ** 2 512 >>> 34 // 3 % 4 3 >>> 5 % 3 ** 4 5 \u00c9crire les expressions suivantes avec le moins de parenth\u00e8ses possibles : 1 2 >>> 2 + ( 8 * ( 4 - 5 )) >>> ( 3 - 5 ) - (( 6 * 2 ) / ( 5 ** 2 )) Exercice 2 Pr\u00e9dire la valeur affich\u00e9e dans l\u2019interpr\u00e8te Python apr\u00e8s les s\u00e9quences d\u2019instructions suivantes. S\u00e9quence 1 : 1 2 3 4 5 >>> a = 5 >>> a = a + 1 >>> b = a >>> b = b ** 2 - a >>> print ( b ) S\u00e9quence 2 : 1 2 3 4 5 6 >>> a = 5 >>> b = 6 >>> a = a - b >>> b = b + a >>> a = b - a >>> print ( a , b ) S\u00e9quence 3 : 1 2 3 4 5 6 7 >>> from random import randint >>> a = randint ( 1 , 100 ) #entier al\u00e9atoire entre 1 et 100 >>> b = randint ( 1 , 100 ) #entier al\u00e9atoire entre 1 et 100 >>> a = a - b >>> b = b + a >>> a = b - a >>> print ( a , b ) Premiers programmes et premi\u00e8res erreurs \u2693\ufe0e Exercice 3 Dans son espace personnel, cr\u00e9er un r\u00e9pertoire Chapitre1 avec un sous-r\u00e9pertoire TP1 . Le prix d\u2019une mati\u00e8re premi\u00e8re est de 873 euros la tonne au d\u00e9but de l\u2019ann\u00e9e. Ce prix subit des variations saisonni\u00e8res : au premier trimestre il augmente de 347 euros, au second trimestre il augmente de 25 %, au troisi\u00e8me trimestre il subit une baisse de 50 % et enfin il diminue de 100 euros. Cr\u00e9er un nouveau programme avec l\u2019\u00e9diteur d\u2019Idle et l\u2019enregistrer dans Chapitre1/TP1 sous le nom prix.py . Saisir dans ce fichier le code ci-dessous en le compl\u00e9tant afin qu\u2019il calcule les valeurs successives de la variable prix . 1 2 3 4 5 6 prix = 873 #prix au d\u00e9but de l'ann\u00e9e prix = .... #prix \u00e0 la fin du premier trimestre prix = .... #prix \u00e0 la fin du second trimestre prix = .... #prix \u00e0 la fin du troisi\u00e8me trimestre prix = .... #prix \u00e0 la fin de l'ann\u00e9e print ( \"Prix final :\" , prix ) Exercice 4 La temp\u00e9rature en degr\u00e9s Fahrenheit s\u2019obtient \u00e0 partir de la temp\u00e9rature en degr\u00e9s Celsius par la formule de conversion . On veut \u00e9crire un programme qui r\u00e9ponde \u00e0 la sp\u00e9cification suivante convertir une mesure de temp\u00e9rature de l\u2019\u00e9chelle Celsius vers l\u2019\u00e9chelle Fahrenheit. Dans l\u2019\u00e9diteur d\u2019Idle, cr\u00e9er un programme temperature.py et saisir le code ci-dessous : 1 2 3 f = input ( \"Temp\u00e9rature en degr\u00e9s Celsius ? \" d = 1 , 8 * f + 32 print ( \"La temp\u00e9rature en degr\u00e9s Fahrenheit est de \" , d ) Ex\u00e9cuter le code, on doit obtenir un message d\u2019erreur indiquant une erreur de Syntaxe. Un curseur indique dans le code la position o\u00f9 l\u2019interpr\u00e9teur Python s\u2019est interrompu dans la lecture du code. Si le curseur est en d\u00e9but de ligne, il faut souvent chercher l\u2019erreur \u00e0 la fin de la ligne pr\u00e9c\u00e9dente \u2026 Corriger l\u2019erreur de syntaxe. Ex\u00e9cuter de nouveau le code, on doit obtenir un message d\u2019erreur indiquant que Python ne peut r\u00e9aliser l\u2019op\u00e9ration demand\u00e9e. On dit que l\u2019interpr\u00e9teur Python a lev\u00e9 une exception . 1 TypeError : can only concatenate str ( not \"int\" ) to str Ins\u00e9rer l\u2019instruction print(type(f)) en ligne 2, ex\u00e9cuter de nouveau. Que repr\u00e9sente la valeur affich\u00e9e avant le message d\u2019erreur ? Remplacer la premi\u00e8re instruction par float(input(\"Temp\u00e9rature en degr\u00e9s Celsius ? \")) puis ex\u00e9cuter. Quel est l\u2019effet de la fonction float ? Afficher sa documentation dans l\u2019interpr\u00e9teur avec l\u2019instruction help(float) . Si on teste le programme pour une temp\u00e9rature de 45 degr\u00e9s Celsisus on doit obtenir l\u2019affichage ci-dessous. Est-ce que la sp\u00e9cification du programme est v\u00e9rifi\u00e9e ? Corriger le programme. 1 2 3 Temp\u00e9rature en degr\u00e9s Celsius ? 45 < class ' float '> La temp\u00e9rature en degr\u00e9s Fahrenheit est de ( 1 , 392.0 ) \u00c0 propose des diff\u00e9rents types d\u2019erreurs possibles en Python , on pourra lire le premier paragraphe de cette page de la documentation https://docs.python.org/fr/3.5/tutorial/errors.html . Etat d\u2019un programme, effets de bord \u2693\ufe0e Exercice 5 On veut \u00e9crire un programme v\u00e9rifiant la sp\u00e9cification suivant : le programme doit permuter les valeurs de deux variables a et b de type entier saisies en entr\u00e9e . Avec l\u2019\u00e9diteur Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme permutation.py et recopier le code ci-dessous 1 2 3 4 5 6 7 8 # entr\u00e9es a = int ( input ( 'a ?' )) b = int ( input ( 'b ?' )) # traitement a = b b = a # sorties print ( \"a = \" , a , \" et b = \" , b ) Tester ce programme pour les entr\u00e9es 605 et 506. La sp\u00e9cification du programme est-elle satisfaite ? Pour repr\u00e9senter l\u2019ex\u00e9cution du programme, compl\u00e9ter le tableau d\u2019\u00e9tat ci-dessous, qui affiche pour chaque ligne d\u2019instruction, les valeurs des variables a et b et les \u00e9ventuelles interactions avec l\u2019utilisateur. Ligne Variable a Variable b Interactions a = int ( input ( \u2018a ?\u2019 )) 734 affichage : \u2018a ?\u2019 saisie : 734 b = int ( input ( \u2018b ?\u2019 )) 734 437 affichage : \u2018b ?\u2019 saisie : 437 a = b b = a print ( \u201ca =\u201d , a, \" et b = \" , b) Proposer une modification du programme qui permute les valeurs des variables a et b saisies en entr\u00e9e. D\u00e9montrer que le programme est correct en compl\u00e9tant un tableau d\u2019\u00e9tat de ce nouveau programme qui utilise des valeurs ind\u00e9termin\u00e9es x et y pour les variables a et b en entr\u00e9e. Proposer une modification du programme qui permute les valeurs des variables a et b saisies en entr\u00e9e, sans utiliser de variable suppl\u00e9mentaire. Utiliser une biblioth\u00e8que \u2693\ufe0e Point de cours 1 Le coeur du langage Python est constitu\u00e9 d\u2019une grammaire, de mots clefs et d\u2019une biblioth\u00e8que built-in rassemblant des instructions qui sont toujours disponibles : comme max, print, abs etc \u2026 Par ailleurs, des biblioth\u00e8ques , appel\u00e9es modules en Python , constituent des bo\u00eetes outils d\u2019instructions que le programmeur peut r\u00e9utiliser en important le module. La distribution standard de Python est livr\u00e9e avec un ensemble de modules constituant sa biblioth\u00e8que standard. Lorsqu\u2019on a besoin d\u2019utiliser une fonction de biblioth\u00e8que, on commence par explorer la biblioth\u00e8que standard dont les modules sont list\u00e9s et document\u00e9s sur le site officiel https://www.python.org/ . Une fois qu\u2019on a d\u00e9termin\u00e9 le module qui nous int\u00e9resse, par exemple math , on dispose de plusieurs fa\u00e7ons d\u2019importer des instructions : Si on a besoin juste d\u2019une instruction comme sqrt , pour la fonction racine carr\u00e9e, on peut \u00e9crire avant de l\u2019appeler : 1 from math import sqrt Si on a besoin de plusieurs instructions, mais en nombre limit\u00e9, comme sqrt, cos et sin , on peut \u00e9crire avant de les appeler : 1 from math import sqrt , cos , sin Si on a besoin de beaucoup d\u2019instructions du module, on peut utiliser le joker * et \u00e9crire avant de les appeler : 1 from math import * Cette m\u00e9thode peut sembler pratique mais elle est dangereuse si on importe plusieurs modules, qui contiennent des instructions avec les m\u00eames noms. Pour cloisonner les espaces de nommage, on pr\u00e9f\u00e9rera la m\u00e9thode suivante. Une autre m\u00e9thode consiste \u00e0 importer juste le module, puis on peut acc\u00e9der \u00e0 chacune des instructions ou constantes qu\u2019il contient en les pr\u00e9fixant du nom du module en notation point\u00e9e : 1 2 import math racine3 = math . sqrt ( 3 ) Cette m\u00e9thode alourdit la syntaxe mais permet un meilleur cloisonnement des noms utilis\u00e9s par les diff\u00e9rents modules utilis\u00e9s dans un m\u00eame programme. Le module graphique turtle permet de piloter un \u00abcrayon\u00bb afin de tracer dynamiquement des figures g\u00e9om\u00e9triques. Les dessins sont r\u00e9alis\u00e9s dans un rep\u00e8re orthonorm\u00e9 virtuel centr\u00e9 sur la fen\u00eatre d\u2019affichage. L\u2019unit\u00e9 des axes est le pixel. Le rep\u00e8re n\u2019est pas visible \u00e0 l\u2019\u00e9cran. La forme par d\u00e9faut du crayon de trac\u00e9 est une fl\u00e8che \u00aborient\u00e9e\u00bb, plac\u00e9 au d\u00e9part \u00e0 l\u2019origine du rep\u00e8re. Le crayon est situ\u00e9 \u00e0 la pointe, la fl\u00e8che montre le sens du trac\u00e9 en cours ou \u00e0 venir. La liste compl\u00e8te des fonctions disponibles gr\u00e2ce au module turtle est disponible sur la documentation officielle . On pourra aussi t\u00e9l\u00e9charger un petit r\u00e9sum\u00e9 au format .pdf en cliquant ici . On donne ci-dessous un exemple de programme permettant de tracer un carr\u00e9 de c\u00f4t\u00e9 100 pixels. 1 2 3 4 5 6 7 8 9 10 # Carr\u00e9 programme 1 from turtle import * up () #lever le crayon goto ( 0 , 0 ) down () #poser le crayon goto ( 100 , 0 ) goto ( 100 , 100 ) goto ( 0 , 100 ) goto ( 0 , 0 ) exitonclick () #permet de fermer la fen\u00eatre de trac\u00e9 proprement Exercice 6 Avec l\u2019\u00e9diteur d\u2019Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-polygones.py et importer toutes les fonctions du module turtle avec from turtle import * . \u00c9crire un programme qui trace un carr\u00e9 de c\u00f4t\u00e9 100 pixels en utilisant les instructions forward et left . \u00c9crire un programme qui trace un triangle \u00e9quilat\u00e9ral de c\u00f4t\u00e9 100 pixels. \u00c9crire un programme qui trace un hexagone r\u00e9gulier de c\u00f4t\u00e9 100 pixels. Exercice 7 Avec l\u2019\u00e9diteur d\u2019Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-clef.py et importer toutes les fonctions du module turtle avec from turtle import * . Ex\u00e9cuter puis dans le du mode interactif la documentation de l\u2019instruction circle avec help(circle) . Saisir dans le programme la s\u00e9quence d\u2019instructions suivante, ex\u00e9cuter puis observer. 1 2 3 4 5 6 7 from turtle import * forward ( 60 ) left ( 120 ) forward ( 60 ) right ( 90 ) circle ( 60 , 150 ) exitonclick () Compl\u00e9ter le programme pour afficher la figure de gauche. & Exercice 8 Avec l\u2019\u00e9diteur d\u2019Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-triangles.py . Le programme ci-dessous permet de tracer un triangle \u00e9quilat\u00e9ral noir de c\u00f4t\u00e9 100 pixels. Compl\u00e9ter le code pour tracer la figure de droite avec la pyramide de triangles. 1 2 3 4 5 6 7 8 9 begin_fill () fillcolor ( \"black\" ) forward ( 100 ) left ( 120 ) forward ( 100 ) left ( 120 ) forward ( 100 ) left ( 120 ) end_fill () Exercice 9 Avec l\u2019\u00e9diteur d\u2019Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-drapeau.py . \u00c9crire un programme qui dessine le drapeau fran\u00e7ais.","title":"1NSI Chap1 Variables TP1 git"},{"location":"chapitre1/TP1/1NSI-Chap1-Variables-TP1-git/#credits","text":"Ce cours est inspir\u00e9 du chapitre 1 du manuel NSI de la collection Tortue chez Ellipse, auteurs : Ballabonski, Conchon, Filliatre, N\u2019Guyen.","title":"Cr\u00e9dits"},{"location":"chapitre1/TP1/1NSI-Chap1-Variables-TP1-git/#utiliser-le-mode-interactif","text":"Pour installer sur votre machine l\u2019environnement Idle de programmation en Python , on peut le t\u00e9l\u00e9charger depuis le site officiel https://www.python.org/downloads/ . Au lyc\u00e9e dans une session Windows, un raccourci sur le bureau doit permettre de lancer Idle, et dans une session Ubuntu, il suffit d\u2019ouvrir un terminal de commande avec CTRL + ALT + T et de saisir la commande idle-python3.x ou x est le num\u00e9ro de version de Python (la touche de tabulation permet d\u2019obtenir l\u2019autocompl\u00e9tion apr\u00e8s avoir saisi idle-python3 ). Exercice 1 \u00c9crire les expressions suivantes avec un parenth\u00e9sage explicite permettant d\u2019indiquer l\u2019ordre de priorit\u00e9 des op\u00e9rations : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 >>> 2 - 3 - 4 - 5 >>> 1 / 2 ** 3 0.125 >>> 1 / 2 / 4 0.125 >>> 1 / 2 * 4 2.0 >>> 2 * 3 ** 2 18 >>> 2 ** 3 ** 2 512 >>> 34 // 3 % 4 3 >>> 5 % 3 ** 4 5 \u00c9crire les expressions suivantes avec le moins de parenth\u00e8ses possibles : 1 2 >>> 2 + ( 8 * ( 4 - 5 )) >>> ( 3 - 5 ) - (( 6 * 2 ) / ( 5 ** 2 )) Exercice 2 Pr\u00e9dire la valeur affich\u00e9e dans l\u2019interpr\u00e8te Python apr\u00e8s les s\u00e9quences d\u2019instructions suivantes. S\u00e9quence 1 : 1 2 3 4 5 >>> a = 5 >>> a = a + 1 >>> b = a >>> b = b ** 2 - a >>> print ( b ) S\u00e9quence 2 : 1 2 3 4 5 6 >>> a = 5 >>> b = 6 >>> a = a - b >>> b = b + a >>> a = b - a >>> print ( a , b ) S\u00e9quence 3 : 1 2 3 4 5 6 7 >>> from random import randint >>> a = randint ( 1 , 100 ) #entier al\u00e9atoire entre 1 et 100 >>> b = randint ( 1 , 100 ) #entier al\u00e9atoire entre 1 et 100 >>> a = a - b >>> b = b + a >>> a = b - a >>> print ( a , b )","title":"Utiliser le mode interactif"},{"location":"chapitre1/TP1/1NSI-Chap1-Variables-TP1-git/#premiers-programmes-et-premieres-erreurs","text":"Exercice 3 Dans son espace personnel, cr\u00e9er un r\u00e9pertoire Chapitre1 avec un sous-r\u00e9pertoire TP1 . Le prix d\u2019une mati\u00e8re premi\u00e8re est de 873 euros la tonne au d\u00e9but de l\u2019ann\u00e9e. Ce prix subit des variations saisonni\u00e8res : au premier trimestre il augmente de 347 euros, au second trimestre il augmente de 25 %, au troisi\u00e8me trimestre il subit une baisse de 50 % et enfin il diminue de 100 euros. Cr\u00e9er un nouveau programme avec l\u2019\u00e9diteur d\u2019Idle et l\u2019enregistrer dans Chapitre1/TP1 sous le nom prix.py . Saisir dans ce fichier le code ci-dessous en le compl\u00e9tant afin qu\u2019il calcule les valeurs successives de la variable prix . 1 2 3 4 5 6 prix = 873 #prix au d\u00e9but de l'ann\u00e9e prix = .... #prix \u00e0 la fin du premier trimestre prix = .... #prix \u00e0 la fin du second trimestre prix = .... #prix \u00e0 la fin du troisi\u00e8me trimestre prix = .... #prix \u00e0 la fin de l'ann\u00e9e print ( \"Prix final :\" , prix ) Exercice 4 La temp\u00e9rature en degr\u00e9s Fahrenheit s\u2019obtient \u00e0 partir de la temp\u00e9rature en degr\u00e9s Celsius par la formule de conversion . On veut \u00e9crire un programme qui r\u00e9ponde \u00e0 la sp\u00e9cification suivante convertir une mesure de temp\u00e9rature de l\u2019\u00e9chelle Celsius vers l\u2019\u00e9chelle Fahrenheit. Dans l\u2019\u00e9diteur d\u2019Idle, cr\u00e9er un programme temperature.py et saisir le code ci-dessous : 1 2 3 f = input ( \"Temp\u00e9rature en degr\u00e9s Celsius ? \" d = 1 , 8 * f + 32 print ( \"La temp\u00e9rature en degr\u00e9s Fahrenheit est de \" , d ) Ex\u00e9cuter le code, on doit obtenir un message d\u2019erreur indiquant une erreur de Syntaxe. Un curseur indique dans le code la position o\u00f9 l\u2019interpr\u00e9teur Python s\u2019est interrompu dans la lecture du code. Si le curseur est en d\u00e9but de ligne, il faut souvent chercher l\u2019erreur \u00e0 la fin de la ligne pr\u00e9c\u00e9dente \u2026 Corriger l\u2019erreur de syntaxe. Ex\u00e9cuter de nouveau le code, on doit obtenir un message d\u2019erreur indiquant que Python ne peut r\u00e9aliser l\u2019op\u00e9ration demand\u00e9e. On dit que l\u2019interpr\u00e9teur Python a lev\u00e9 une exception . 1 TypeError : can only concatenate str ( not \"int\" ) to str Ins\u00e9rer l\u2019instruction print(type(f)) en ligne 2, ex\u00e9cuter de nouveau. Que repr\u00e9sente la valeur affich\u00e9e avant le message d\u2019erreur ? Remplacer la premi\u00e8re instruction par float(input(\"Temp\u00e9rature en degr\u00e9s Celsius ? \")) puis ex\u00e9cuter. Quel est l\u2019effet de la fonction float ? Afficher sa documentation dans l\u2019interpr\u00e9teur avec l\u2019instruction help(float) . Si on teste le programme pour une temp\u00e9rature de 45 degr\u00e9s Celsisus on doit obtenir l\u2019affichage ci-dessous. Est-ce que la sp\u00e9cification du programme est v\u00e9rifi\u00e9e ? Corriger le programme. 1 2 3 Temp\u00e9rature en degr\u00e9s Celsius ? 45 < class ' float '> La temp\u00e9rature en degr\u00e9s Fahrenheit est de ( 1 , 392.0 ) \u00c0 propose des diff\u00e9rents types d\u2019erreurs possibles en Python , on pourra lire le premier paragraphe de cette page de la documentation https://docs.python.org/fr/3.5/tutorial/errors.html .","title":"Premiers programmes et premi\u00e8res erreurs"},{"location":"chapitre1/TP1/1NSI-Chap1-Variables-TP1-git/#etat-dun-programme-effets-de-bord","text":"Exercice 5 On veut \u00e9crire un programme v\u00e9rifiant la sp\u00e9cification suivant : le programme doit permuter les valeurs de deux variables a et b de type entier saisies en entr\u00e9e . Avec l\u2019\u00e9diteur Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme permutation.py et recopier le code ci-dessous 1 2 3 4 5 6 7 8 # entr\u00e9es a = int ( input ( 'a ?' )) b = int ( input ( 'b ?' )) # traitement a = b b = a # sorties print ( \"a = \" , a , \" et b = \" , b ) Tester ce programme pour les entr\u00e9es 605 et 506. La sp\u00e9cification du programme est-elle satisfaite ? Pour repr\u00e9senter l\u2019ex\u00e9cution du programme, compl\u00e9ter le tableau d\u2019\u00e9tat ci-dessous, qui affiche pour chaque ligne d\u2019instruction, les valeurs des variables a et b et les \u00e9ventuelles interactions avec l\u2019utilisateur. Ligne Variable a Variable b Interactions a = int ( input ( \u2018a ?\u2019 )) 734 affichage : \u2018a ?\u2019 saisie : 734 b = int ( input ( \u2018b ?\u2019 )) 734 437 affichage : \u2018b ?\u2019 saisie : 437 a = b b = a print ( \u201ca =\u201d , a, \" et b = \" , b) Proposer une modification du programme qui permute les valeurs des variables a et b saisies en entr\u00e9e. D\u00e9montrer que le programme est correct en compl\u00e9tant un tableau d\u2019\u00e9tat de ce nouveau programme qui utilise des valeurs ind\u00e9termin\u00e9es x et y pour les variables a et b en entr\u00e9e. Proposer une modification du programme qui permute les valeurs des variables a et b saisies en entr\u00e9e, sans utiliser de variable suppl\u00e9mentaire.","title":"Etat d\u2019un programme, effets de bord"},{"location":"chapitre1/TP1/1NSI-Chap1-Variables-TP1-git/#utiliser-une-bibliotheque","text":"Point de cours 1 Le coeur du langage Python est constitu\u00e9 d\u2019une grammaire, de mots clefs et d\u2019une biblioth\u00e8que built-in rassemblant des instructions qui sont toujours disponibles : comme max, print, abs etc \u2026 Par ailleurs, des biblioth\u00e8ques , appel\u00e9es modules en Python , constituent des bo\u00eetes outils d\u2019instructions que le programmeur peut r\u00e9utiliser en important le module. La distribution standard de Python est livr\u00e9e avec un ensemble de modules constituant sa biblioth\u00e8que standard. Lorsqu\u2019on a besoin d\u2019utiliser une fonction de biblioth\u00e8que, on commence par explorer la biblioth\u00e8que standard dont les modules sont list\u00e9s et document\u00e9s sur le site officiel https://www.python.org/ . Une fois qu\u2019on a d\u00e9termin\u00e9 le module qui nous int\u00e9resse, par exemple math , on dispose de plusieurs fa\u00e7ons d\u2019importer des instructions : Si on a besoin juste d\u2019une instruction comme sqrt , pour la fonction racine carr\u00e9e, on peut \u00e9crire avant de l\u2019appeler : 1 from math import sqrt Si on a besoin de plusieurs instructions, mais en nombre limit\u00e9, comme sqrt, cos et sin , on peut \u00e9crire avant de les appeler : 1 from math import sqrt , cos , sin Si on a besoin de beaucoup d\u2019instructions du module, on peut utiliser le joker * et \u00e9crire avant de les appeler : 1 from math import * Cette m\u00e9thode peut sembler pratique mais elle est dangereuse si on importe plusieurs modules, qui contiennent des instructions avec les m\u00eames noms. Pour cloisonner les espaces de nommage, on pr\u00e9f\u00e9rera la m\u00e9thode suivante. Une autre m\u00e9thode consiste \u00e0 importer juste le module, puis on peut acc\u00e9der \u00e0 chacune des instructions ou constantes qu\u2019il contient en les pr\u00e9fixant du nom du module en notation point\u00e9e : 1 2 import math racine3 = math . sqrt ( 3 ) Cette m\u00e9thode alourdit la syntaxe mais permet un meilleur cloisonnement des noms utilis\u00e9s par les diff\u00e9rents modules utilis\u00e9s dans un m\u00eame programme. Le module graphique turtle permet de piloter un \u00abcrayon\u00bb afin de tracer dynamiquement des figures g\u00e9om\u00e9triques. Les dessins sont r\u00e9alis\u00e9s dans un rep\u00e8re orthonorm\u00e9 virtuel centr\u00e9 sur la fen\u00eatre d\u2019affichage. L\u2019unit\u00e9 des axes est le pixel. Le rep\u00e8re n\u2019est pas visible \u00e0 l\u2019\u00e9cran. La forme par d\u00e9faut du crayon de trac\u00e9 est une fl\u00e8che \u00aborient\u00e9e\u00bb, plac\u00e9 au d\u00e9part \u00e0 l\u2019origine du rep\u00e8re. Le crayon est situ\u00e9 \u00e0 la pointe, la fl\u00e8che montre le sens du trac\u00e9 en cours ou \u00e0 venir. La liste compl\u00e8te des fonctions disponibles gr\u00e2ce au module turtle est disponible sur la documentation officielle . On pourra aussi t\u00e9l\u00e9charger un petit r\u00e9sum\u00e9 au format .pdf en cliquant ici . On donne ci-dessous un exemple de programme permettant de tracer un carr\u00e9 de c\u00f4t\u00e9 100 pixels. 1 2 3 4 5 6 7 8 9 10 # Carr\u00e9 programme 1 from turtle import * up () #lever le crayon goto ( 0 , 0 ) down () #poser le crayon goto ( 100 , 0 ) goto ( 100 , 100 ) goto ( 0 , 100 ) goto ( 0 , 0 ) exitonclick () #permet de fermer la fen\u00eatre de trac\u00e9 proprement Exercice 6 Avec l\u2019\u00e9diteur d\u2019Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-polygones.py et importer toutes les fonctions du module turtle avec from turtle import * . \u00c9crire un programme qui trace un carr\u00e9 de c\u00f4t\u00e9 100 pixels en utilisant les instructions forward et left . \u00c9crire un programme qui trace un triangle \u00e9quilat\u00e9ral de c\u00f4t\u00e9 100 pixels. \u00c9crire un programme qui trace un hexagone r\u00e9gulier de c\u00f4t\u00e9 100 pixels. Exercice 7 Avec l\u2019\u00e9diteur d\u2019Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-clef.py et importer toutes les fonctions du module turtle avec from turtle import * . Ex\u00e9cuter puis dans le du mode interactif la documentation de l\u2019instruction circle avec help(circle) . Saisir dans le programme la s\u00e9quence d\u2019instructions suivante, ex\u00e9cuter puis observer. 1 2 3 4 5 6 7 from turtle import * forward ( 60 ) left ( 120 ) forward ( 60 ) right ( 90 ) circle ( 60 , 150 ) exitonclick () Compl\u00e9ter le programme pour afficher la figure de gauche. & Exercice 8 Avec l\u2019\u00e9diteur d\u2019Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-triangles.py . Le programme ci-dessous permet de tracer un triangle \u00e9quilat\u00e9ral noir de c\u00f4t\u00e9 100 pixels. Compl\u00e9ter le code pour tracer la figure de droite avec la pyramide de triangles. 1 2 3 4 5 6 7 8 9 begin_fill () fillcolor ( \"black\" ) forward ( 100 ) left ( 120 ) forward ( 100 ) left ( 120 ) forward ( 100 ) left ( 120 ) end_fill () Exercice 9 Avec l\u2019\u00e9diteur d\u2019Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-drapeau.py . \u00c9crire un programme qui dessine le drapeau fran\u00e7ais.","title":"Utiliser une biblioth\u00e8que"},{"location":"chapitre1/TP1/1NSI-Chap1-Variables-TP1-source/","text":"Cr\u00e9dits \u2693\ufe0e Ce cours est inspir\u00e9 du chapitre 1 du manuel NSI de la collection Tortue chez Ellipse, auteurs : Ballabonski, Conchon, Filliatre, N'Guyen. Utiliser le mode interactif \u2693\ufe0e :::methode Pour installer sur votre machine l'environnement Idle de programmation en Python , on peut le t\u00e9l\u00e9charger depuis le site officiel https://www.python.org/downloads/ . Au lyc\u00e9e dans une session Windows, un raccourci sur le bureau doit permettre de lancer Idle, et dans une session Ubuntu, il suffit d'ouvrir un terminal de commande avec CTRL + ALT + T et de saisir la commande idle-python3.x ou x est le num\u00e9ro de version de Python (la touche de tabulation permet d'obtenir l'autocompl\u00e9tion apr\u00e8s avoir saisi idle-python3 ). ::: :::exercice \u00c9crire les expressions suivantes avec un parenth\u00e9sage explicite permettant d'indiquer l'ordre de priorit\u00e9 des op\u00e9rations : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 >>> 2 - 3 - 4 - 5 >>> 1 / 2 ** 3 0.125 >>> 1 / 2 / 4 0.125 >>> 1 / 2 * 4 2.0 >>> 2 * 3 ** 2 18 >>> 2 ** 3 ** 2 512 >>> 34 // 3 % 4 3 >>> 5 % 3 ** 4 5 \u00c9crire les expressions suivantes avec le moins de parenth\u00e8ses possibles : 1 2 >>> 2 + ( 8 * ( 4 - 5 )) >>> ( 3 - 5 ) - (( 6 * 2 ) / ( 5 ** 2 )) ::: :::exercice Pr\u00e9dire la valeur affich\u00e9e dans l'interpr\u00e8te Python apr\u00e8s les s\u00e9quences d'instructions suivantes. S\u00e9quence 1 : 1 2 3 4 5 >>> a = 5 >>> a = a + 1 >>> b = a >>> b = b ** 2 - a >>> print ( b ) S\u00e9quence 2 : 1 2 3 4 5 6 >>> a = 5 >>> b = 6 >>> a = a - b >>> b = b + a >>> a = b - a >>> print ( a , b ) S\u00e9quence 3 : 1 2 3 4 5 6 7 >>> from random import randint >>> a = randint ( 1 , 100 ) #entier al\u00e9atoire entre 1 et 100 >>> b = randint ( 1 , 100 ) #entier al\u00e9atoire entre 1 et 100 >>> a = a - b >>> b = b + a >>> a = b - a >>> print ( a , b ) ::: Premiers programmes et premi\u00e8res erreurs \u2693\ufe0e :::exercice 1. Dans son espace personnel, cr\u00e9er un r\u00e9pertoire Chapitre1 avec un sous-r\u00e9pertoire TP1 . 2. Le prix d'une mati\u00e8re premi\u00e8re est de 873 euros la tonne au d\u00e9but de l'ann\u00e9e. Ce prix subit des variations saisonni\u00e8res : au premier trimestre il augmente de 347 euros, au second trimestre il augmente de 25 %, au troisi\u00e8me trimestre il subit une baisse de 50 % et enfin il diminue de 100 euros. Cr\u00e9er un nouveau programme avec l'\u00e9diteur d'Idle et l'enregistrer dans Chapitre1/TP1 sous le nom prix.py . Saisir dans ce fichier le code ci-dessous en le compl\u00e9tant afin qu'il calcule les valeurs successives de la variable prix . 1 2 3 4 5 6 prix = 873 #prix au d\u00e9but de l'ann\u00e9e prix = .... #prix \u00e0 la fin du premier trimestre prix = .... #prix \u00e0 la fin du second trimestre prix = .... #prix \u00e0 la fin du troisi\u00e8me trimestre prix = .... #prix \u00e0 la fin de l'ann\u00e9e print ( \"Prix final :\" , prix ) ::: :::exercice La temp\u00e9rature \\(f\\) en degr\u00e9s Fahrenheit s'obtient \u00e0 partir de la temp\u00e9rature \\(c\\) en degr\u00e9s Celsius par la formule de conversion \\(f=1,8 * c + 32\\) . On veut \u00e9crire un programme qui r\u00e9ponde \u00e0 la sp\u00e9cification suivante : convertir une mesure de temp\u00e9rature de l'\u00e9chelle Celsius vers l'\u00e9chelle Fahrenheit. Dans l'\u00e9diteur d'Idle, cr\u00e9er un programme temperature.py et saisir le code ci-dessous : 1 2 3 f = input ( \"Temp\u00e9rature en degr\u00e9s Celsius ? \" d = 1 , 8 * f + 32 print ( \"La temp\u00e9rature en degr\u00e9s Fahrenheit est de \" , d ) Ex\u00e9cuter le code, on doit obtenir un message d'erreur indiquant une erreur de Syntaxe. Un curseur indique dans le code la position o\u00f9 l'interpr\u00e9teur Python s'est interrompu dans la lecture du code. Si le curseur est en d\u00e9but de ligne, il faut souvent chercher l'erreur \u00e0 la fin de la ligne pr\u00e9c\u00e9dente ... Corriger l'erreur de syntaxe. \\ Ex\u00e9cuter de nouveau le code, on doit obtenir un message d'erreur indiquant que Python ne peut r\u00e9aliser l'op\u00e9ration demand\u00e9e. On dit que l'interpr\u00e9teur Python a lev\u00e9 une exception . 1 TypeError : can only concatenate str ( not \"int\" ) to str Ins\u00e9rer l'instruction print(type(f)) en ligne 2, ex\u00e9cuter de nouveau. Que repr\u00e9sente la valeur affich\u00e9e avant le message d'erreur ? Remplacer la premi\u00e8re instruction par float(input(\"Temp\u00e9rature en degr\u00e9s Celsius ? \")) puis ex\u00e9cuter. Quel est l'effet de la fonction float ? Afficher sa documentation dans l'interpr\u00e9teur avec l'instruction help(float) . Si on teste le programme pour une temp\u00e9rature de 45 degr\u00e9s Celsisus on doit obtenir l'affichage ci-dessous. Est-ce que la sp\u00e9cification du programme est v\u00e9rifi\u00e9e ? Corriger le programme. 1 2 3 Temp\u00e9rature en degr\u00e9s Celsius ? 45 < class ' float '> La temp\u00e9rature en degr\u00e9s Fahrenheit est de ( 1 , 392.0 ) ::: :::remarque \u00c0 propose des diff\u00e9rents types d'erreurs possibles en Python , on pourra lire le premier paragraphe de cette page de la documentation https://docs.python.org/fr/3.5/tutorial/errors.html . ::: Etat d'un programme, effets de bord \u2693\ufe0e :::exercice On veut \u00e9crire un programme v\u00e9rifiant la sp\u00e9cification suivant : le programme doit permuter les valeurs de deux variables a et b de type entier saisies en entr\u00e9e . Avec l'\u00e9diteur Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme permutation.py et recopier le code ci-dessous 1 2 3 4 5 6 7 8 # entr\u00e9es a = int ( input ( 'a ?' )) b = int ( input ( 'b ?' )) # traitement a = b b = a # sorties print ( \"a = \" , a , \" et b = \" , b ) Tester ce programme pour les entr\u00e9es 605 et 506. La sp\u00e9cification du programme est-elle satisfaite ? Pour repr\u00e9senter l'ex\u00e9cution du programme, compl\u00e9ter le tableau d'\u00e9tat ci-dessous, qui affiche pour chaque ligne d'instruction, les valeurs des variables a et b et les \u00e9ventuelles interactions avec l'utilisateur. Ligne Variable a Variable b Interactions a = int ( input ( 'a ?' )) 734 affichage : 'a ?' saisie : 734 b = int ( input ( 'b ?' )) 734 437 affichage : 'b ?' saisie : 437 a = b b = a print ( \"a = \" , a, \" et b = \" , b) Proposer une modification du programme qui permute les valeurs des variables a et b saisies en entr\u00e9e. D\u00e9montrer que le programme est correct en compl\u00e9tant un tableau d'\u00e9tat de ce nouveau programme qui utilise des valeurs ind\u00e9termin\u00e9es x et y pour les variables a et b en entr\u00e9e. Proposer une modification du programme qui permute les valeurs des variables a et b saisies en entr\u00e9e, sans utiliser de variable suppl\u00e9mentaire. ::: Utiliser une biblioth\u00e8que \u2693\ufe0e :::cours Le coeur du langage Python est constitu\u00e9 d'une grammaire, de mots clefs et d'une biblioth\u00e8que built-in rassemblant des instructions qui sont toujours disponibles : comme max, print, abs etc ... Par ailleurs, des biblioth\u00e8ques , appel\u00e9es modules en Python , constituent des bo\u00eetes outils d'instructions que le programmeur peut r\u00e9utiliser en important le module. La distribution standard de Python est livr\u00e9e avec un ensemble de modules constituant sa biblioth\u00e8que standard. Lorsqu'on a besoin d'utiliser une fonction de biblioth\u00e8que, on commence par explorer la biblioth\u00e8que standard dont les modules sont list\u00e9s et document\u00e9s sur le site officiel https://www.python.org/ . Une fois qu'on a d\u00e9termin\u00e9 le module qui nous int\u00e9resse, par exemple math , on dispose de plusieurs fa\u00e7ons d'importer des instructions : Si on a besoin juste d'une instruction comme sqrt , pour la fonction racine carr\u00e9e, on peut \u00e9crire avant de l'appeler : 1 from math import sqrt Si on a besoin de plusieurs instructions, mais en nombre limit\u00e9, comme sqrt, cos et sin , on peut \u00e9crire avant de les appeler : 1 from math import sqrt , cos , sin Si on a besoin de beaucoup d'instructions du module, on peut utiliser le joker * et \u00e9crire avant de les appeler : 1 from math import * Cette m\u00e9thode peut sembler pratique mais elle est dangereuse si on importe plusieurs modules, qui contiennent des instructions avec les m\u00eames noms. Pour cloisonner les espaces de nommage, on pr\u00e9f\u00e9rera la m\u00e9thode suivante. Une autre m\u00e9thode consiste \u00e0 importer juste le module, puis on peut acc\u00e9der \u00e0 chacune des instructions ou constantes qu'il contient en les pr\u00e9fixant du nom du module en notation point\u00e9e : 1 2 import math racine3 = math . sqrt ( 3 ) Cette m\u00e9thode alourdit la syntaxe mais permet un meilleur cloisonnement des noms utilis\u00e9s par les diff\u00e9rents modules utilis\u00e9s dans un m\u00eame programme. ::: :::center \\ ::: :::methode Le module graphique turtle permet de piloter un \u00abcrayon\u00bb afin de tracer dynamiquement des figures g\u00e9om\u00e9triques. Les dessins sont r\u00e9alis\u00e9s dans un rep\u00e8re orthonorm\u00e9 virtuel centr\u00e9 sur la fen\u00eatre d'affichage. L'unit\u00e9 des axes est le pixel. Le rep\u00e8re n'est pas visible \u00e0 l'\u00e9cran. La forme par d\u00e9faut du crayon de trac\u00e9 est une fl\u00e8che \u00aborient\u00e9e\u00bb, plac\u00e9 au d\u00e9part \u00e0 l'origine du rep\u00e8re. Le crayon est situ\u00e9 \u00e0 la pointe, la fl\u00e8che montre le sens du trac\u00e9 en cours ou \u00e0 venir. La liste compl\u00e8te des fonctions disponibles gr\u00e2ce au module turtle est disponible sur la documentation officielle . On pourra aussi t\u00e9l\u00e9charger un petit r\u00e9sum\u00e9 au format .pdf en cliquant ici . On donne ci-dessous un exemple de programme permettant de tracer un carr\u00e9 de c\u00f4t\u00e9 100 pixels. 1 2 3 4 5 6 7 8 9 10 # Carr\u00e9 programme 1 from turtle import * up () #lever le crayon goto ( 0 , 0 ) down () #poser le crayon goto ( 100 , 0 ) goto ( 100 , 100 ) goto ( 0 , 100 ) goto ( 0 , 0 ) exitonclick () #permet de fermer la fen\u00eatre de trac\u00e9 proprement ::: :::exercice Avec l'\u00e9diteur d'Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-polygones.py et importer toutes les fonctions du module turtle avec from turtle import * . \u00c9crire un programme qui trace un carr\u00e9 de c\u00f4t\u00e9 100 pixels en utilisant les instructions forward et left . \u00c9crire un programme qui trace un triangle \u00e9quilat\u00e9ral de c\u00f4t\u00e9 100 pixels. \u00c9crire un programme qui trace un hexagone r\u00e9gulier de c\u00f4t\u00e9 100 pixels. ::: :::exercice Avec l'\u00e9diteur d'Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-clef.py et importer toutes les fonctions du module turtle avec from turtle import * . Ex\u00e9cuter puis dans le du mode interactif la documentation de l'instruction circle avec help(circle) . Saisir dans le programme la s\u00e9quence d'instructions suivante, ex\u00e9cuter puis observer. 1 2 3 4 5 6 7 from turtle import * forward ( 60 ) left ( 120 ) forward ( 60 ) right ( 90 ) circle ( 60 , 150 ) exitonclick () Compl\u00e9ter le programme pour afficher la figure de gauche. ::: :::{.minipage width=\"0.5\\linewidth\" center=\"true\"} \\ & \\ ::: :::exercice 1. Avec l'\u00e9diteur d'Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-triangles.py . 2. Le programme ci-dessous permet de tracer un triangle \u00e9quilat\u00e9ral noir de c\u00f4t\u00e9 100 pixels. Compl\u00e9ter le code pour tracer la figure de droite avec la pyramide de triangles. 1 2 3 4 5 6 7 8 9 begin_fill () fillcolor ( \"black\" ) forward ( 100 ) left ( 120 ) forward ( 100 ) left ( 120 ) forward ( 100 ) left ( 120 ) end_fill () ::: :::exercice 1. Avec l'\u00e9diteur d'Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-drapeau.py . 2. \u00c9crire un programme qui dessine le drapeau fran\u00e7ais. :::","title":"TP1 Variables et affectations"},{"location":"chapitre1/TP1/1NSI-Chap1-Variables-TP1-source/#credits","text":"Ce cours est inspir\u00e9 du chapitre 1 du manuel NSI de la collection Tortue chez Ellipse, auteurs : Ballabonski, Conchon, Filliatre, N'Guyen.","title":"Cr\u00e9dits"},{"location":"chapitre1/TP1/1NSI-Chap1-Variables-TP1-source/#utiliser-le-mode-interactif","text":":::methode Pour installer sur votre machine l'environnement Idle de programmation en Python , on peut le t\u00e9l\u00e9charger depuis le site officiel https://www.python.org/downloads/ . Au lyc\u00e9e dans une session Windows, un raccourci sur le bureau doit permettre de lancer Idle, et dans une session Ubuntu, il suffit d'ouvrir un terminal de commande avec CTRL + ALT + T et de saisir la commande idle-python3.x ou x est le num\u00e9ro de version de Python (la touche de tabulation permet d'obtenir l'autocompl\u00e9tion apr\u00e8s avoir saisi idle-python3 ). ::: :::exercice \u00c9crire les expressions suivantes avec un parenth\u00e9sage explicite permettant d'indiquer l'ordre de priorit\u00e9 des op\u00e9rations : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 >>> 2 - 3 - 4 - 5 >>> 1 / 2 ** 3 0.125 >>> 1 / 2 / 4 0.125 >>> 1 / 2 * 4 2.0 >>> 2 * 3 ** 2 18 >>> 2 ** 3 ** 2 512 >>> 34 // 3 % 4 3 >>> 5 % 3 ** 4 5 \u00c9crire les expressions suivantes avec le moins de parenth\u00e8ses possibles : 1 2 >>> 2 + ( 8 * ( 4 - 5 )) >>> ( 3 - 5 ) - (( 6 * 2 ) / ( 5 ** 2 )) ::: :::exercice Pr\u00e9dire la valeur affich\u00e9e dans l'interpr\u00e8te Python apr\u00e8s les s\u00e9quences d'instructions suivantes. S\u00e9quence 1 : 1 2 3 4 5 >>> a = 5 >>> a = a + 1 >>> b = a >>> b = b ** 2 - a >>> print ( b ) S\u00e9quence 2 : 1 2 3 4 5 6 >>> a = 5 >>> b = 6 >>> a = a - b >>> b = b + a >>> a = b - a >>> print ( a , b ) S\u00e9quence 3 : 1 2 3 4 5 6 7 >>> from random import randint >>> a = randint ( 1 , 100 ) #entier al\u00e9atoire entre 1 et 100 >>> b = randint ( 1 , 100 ) #entier al\u00e9atoire entre 1 et 100 >>> a = a - b >>> b = b + a >>> a = b - a >>> print ( a , b ) :::","title":"Utiliser le mode interactif"},{"location":"chapitre1/TP1/1NSI-Chap1-Variables-TP1-source/#premiers-programmes-et-premieres-erreurs","text":":::exercice 1. Dans son espace personnel, cr\u00e9er un r\u00e9pertoire Chapitre1 avec un sous-r\u00e9pertoire TP1 . 2. Le prix d'une mati\u00e8re premi\u00e8re est de 873 euros la tonne au d\u00e9but de l'ann\u00e9e. Ce prix subit des variations saisonni\u00e8res : au premier trimestre il augmente de 347 euros, au second trimestre il augmente de 25 %, au troisi\u00e8me trimestre il subit une baisse de 50 % et enfin il diminue de 100 euros. Cr\u00e9er un nouveau programme avec l'\u00e9diteur d'Idle et l'enregistrer dans Chapitre1/TP1 sous le nom prix.py . Saisir dans ce fichier le code ci-dessous en le compl\u00e9tant afin qu'il calcule les valeurs successives de la variable prix . 1 2 3 4 5 6 prix = 873 #prix au d\u00e9but de l'ann\u00e9e prix = .... #prix \u00e0 la fin du premier trimestre prix = .... #prix \u00e0 la fin du second trimestre prix = .... #prix \u00e0 la fin du troisi\u00e8me trimestre prix = .... #prix \u00e0 la fin de l'ann\u00e9e print ( \"Prix final :\" , prix ) ::: :::exercice La temp\u00e9rature \\(f\\) en degr\u00e9s Fahrenheit s'obtient \u00e0 partir de la temp\u00e9rature \\(c\\) en degr\u00e9s Celsius par la formule de conversion \\(f=1,8 * c + 32\\) . On veut \u00e9crire un programme qui r\u00e9ponde \u00e0 la sp\u00e9cification suivante : convertir une mesure de temp\u00e9rature de l'\u00e9chelle Celsius vers l'\u00e9chelle Fahrenheit. Dans l'\u00e9diteur d'Idle, cr\u00e9er un programme temperature.py et saisir le code ci-dessous : 1 2 3 f = input ( \"Temp\u00e9rature en degr\u00e9s Celsius ? \" d = 1 , 8 * f + 32 print ( \"La temp\u00e9rature en degr\u00e9s Fahrenheit est de \" , d ) Ex\u00e9cuter le code, on doit obtenir un message d'erreur indiquant une erreur de Syntaxe. Un curseur indique dans le code la position o\u00f9 l'interpr\u00e9teur Python s'est interrompu dans la lecture du code. Si le curseur est en d\u00e9but de ligne, il faut souvent chercher l'erreur \u00e0 la fin de la ligne pr\u00e9c\u00e9dente ... Corriger l'erreur de syntaxe. \\ Ex\u00e9cuter de nouveau le code, on doit obtenir un message d'erreur indiquant que Python ne peut r\u00e9aliser l'op\u00e9ration demand\u00e9e. On dit que l'interpr\u00e9teur Python a lev\u00e9 une exception . 1 TypeError : can only concatenate str ( not \"int\" ) to str Ins\u00e9rer l'instruction print(type(f)) en ligne 2, ex\u00e9cuter de nouveau. Que repr\u00e9sente la valeur affich\u00e9e avant le message d'erreur ? Remplacer la premi\u00e8re instruction par float(input(\"Temp\u00e9rature en degr\u00e9s Celsius ? \")) puis ex\u00e9cuter. Quel est l'effet de la fonction float ? Afficher sa documentation dans l'interpr\u00e9teur avec l'instruction help(float) . Si on teste le programme pour une temp\u00e9rature de 45 degr\u00e9s Celsisus on doit obtenir l'affichage ci-dessous. Est-ce que la sp\u00e9cification du programme est v\u00e9rifi\u00e9e ? Corriger le programme. 1 2 3 Temp\u00e9rature en degr\u00e9s Celsius ? 45 < class ' float '> La temp\u00e9rature en degr\u00e9s Fahrenheit est de ( 1 , 392.0 ) ::: :::remarque \u00c0 propose des diff\u00e9rents types d'erreurs possibles en Python , on pourra lire le premier paragraphe de cette page de la documentation https://docs.python.org/fr/3.5/tutorial/errors.html . :::","title":"Premiers programmes et premi\u00e8res erreurs"},{"location":"chapitre1/TP1/1NSI-Chap1-Variables-TP1-source/#etat-dun-programme-effets-de-bord","text":":::exercice On veut \u00e9crire un programme v\u00e9rifiant la sp\u00e9cification suivant : le programme doit permuter les valeurs de deux variables a et b de type entier saisies en entr\u00e9e . Avec l'\u00e9diteur Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme permutation.py et recopier le code ci-dessous 1 2 3 4 5 6 7 8 # entr\u00e9es a = int ( input ( 'a ?' )) b = int ( input ( 'b ?' )) # traitement a = b b = a # sorties print ( \"a = \" , a , \" et b = \" , b ) Tester ce programme pour les entr\u00e9es 605 et 506. La sp\u00e9cification du programme est-elle satisfaite ? Pour repr\u00e9senter l'ex\u00e9cution du programme, compl\u00e9ter le tableau d'\u00e9tat ci-dessous, qui affiche pour chaque ligne d'instruction, les valeurs des variables a et b et les \u00e9ventuelles interactions avec l'utilisateur. Ligne Variable a Variable b Interactions a = int ( input ( 'a ?' )) 734 affichage : 'a ?' saisie : 734 b = int ( input ( 'b ?' )) 734 437 affichage : 'b ?' saisie : 437 a = b b = a print ( \"a = \" , a, \" et b = \" , b) Proposer une modification du programme qui permute les valeurs des variables a et b saisies en entr\u00e9e. D\u00e9montrer que le programme est correct en compl\u00e9tant un tableau d'\u00e9tat de ce nouveau programme qui utilise des valeurs ind\u00e9termin\u00e9es x et y pour les variables a et b en entr\u00e9e. Proposer une modification du programme qui permute les valeurs des variables a et b saisies en entr\u00e9e, sans utiliser de variable suppl\u00e9mentaire. :::","title":"Etat d'un programme, effets de bord"},{"location":"chapitre1/TP1/1NSI-Chap1-Variables-TP1-source/#utiliser-une-bibliotheque","text":":::cours Le coeur du langage Python est constitu\u00e9 d'une grammaire, de mots clefs et d'une biblioth\u00e8que built-in rassemblant des instructions qui sont toujours disponibles : comme max, print, abs etc ... Par ailleurs, des biblioth\u00e8ques , appel\u00e9es modules en Python , constituent des bo\u00eetes outils d'instructions que le programmeur peut r\u00e9utiliser en important le module. La distribution standard de Python est livr\u00e9e avec un ensemble de modules constituant sa biblioth\u00e8que standard. Lorsqu'on a besoin d'utiliser une fonction de biblioth\u00e8que, on commence par explorer la biblioth\u00e8que standard dont les modules sont list\u00e9s et document\u00e9s sur le site officiel https://www.python.org/ . Une fois qu'on a d\u00e9termin\u00e9 le module qui nous int\u00e9resse, par exemple math , on dispose de plusieurs fa\u00e7ons d'importer des instructions : Si on a besoin juste d'une instruction comme sqrt , pour la fonction racine carr\u00e9e, on peut \u00e9crire avant de l'appeler : 1 from math import sqrt Si on a besoin de plusieurs instructions, mais en nombre limit\u00e9, comme sqrt, cos et sin , on peut \u00e9crire avant de les appeler : 1 from math import sqrt , cos , sin Si on a besoin de beaucoup d'instructions du module, on peut utiliser le joker * et \u00e9crire avant de les appeler : 1 from math import * Cette m\u00e9thode peut sembler pratique mais elle est dangereuse si on importe plusieurs modules, qui contiennent des instructions avec les m\u00eames noms. Pour cloisonner les espaces de nommage, on pr\u00e9f\u00e9rera la m\u00e9thode suivante. Une autre m\u00e9thode consiste \u00e0 importer juste le module, puis on peut acc\u00e9der \u00e0 chacune des instructions ou constantes qu'il contient en les pr\u00e9fixant du nom du module en notation point\u00e9e : 1 2 import math racine3 = math . sqrt ( 3 ) Cette m\u00e9thode alourdit la syntaxe mais permet un meilleur cloisonnement des noms utilis\u00e9s par les diff\u00e9rents modules utilis\u00e9s dans un m\u00eame programme. ::: :::center \\ ::: :::methode Le module graphique turtle permet de piloter un \u00abcrayon\u00bb afin de tracer dynamiquement des figures g\u00e9om\u00e9triques. Les dessins sont r\u00e9alis\u00e9s dans un rep\u00e8re orthonorm\u00e9 virtuel centr\u00e9 sur la fen\u00eatre d'affichage. L'unit\u00e9 des axes est le pixel. Le rep\u00e8re n'est pas visible \u00e0 l'\u00e9cran. La forme par d\u00e9faut du crayon de trac\u00e9 est une fl\u00e8che \u00aborient\u00e9e\u00bb, plac\u00e9 au d\u00e9part \u00e0 l'origine du rep\u00e8re. Le crayon est situ\u00e9 \u00e0 la pointe, la fl\u00e8che montre le sens du trac\u00e9 en cours ou \u00e0 venir. La liste compl\u00e8te des fonctions disponibles gr\u00e2ce au module turtle est disponible sur la documentation officielle . On pourra aussi t\u00e9l\u00e9charger un petit r\u00e9sum\u00e9 au format .pdf en cliquant ici . On donne ci-dessous un exemple de programme permettant de tracer un carr\u00e9 de c\u00f4t\u00e9 100 pixels. 1 2 3 4 5 6 7 8 9 10 # Carr\u00e9 programme 1 from turtle import * up () #lever le crayon goto ( 0 , 0 ) down () #poser le crayon goto ( 100 , 0 ) goto ( 100 , 100 ) goto ( 0 , 100 ) goto ( 0 , 0 ) exitonclick () #permet de fermer la fen\u00eatre de trac\u00e9 proprement ::: :::exercice Avec l'\u00e9diteur d'Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-polygones.py et importer toutes les fonctions du module turtle avec from turtle import * . \u00c9crire un programme qui trace un carr\u00e9 de c\u00f4t\u00e9 100 pixels en utilisant les instructions forward et left . \u00c9crire un programme qui trace un triangle \u00e9quilat\u00e9ral de c\u00f4t\u00e9 100 pixels. \u00c9crire un programme qui trace un hexagone r\u00e9gulier de c\u00f4t\u00e9 100 pixels. ::: :::exercice Avec l'\u00e9diteur d'Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-clef.py et importer toutes les fonctions du module turtle avec from turtle import * . Ex\u00e9cuter puis dans le du mode interactif la documentation de l'instruction circle avec help(circle) . Saisir dans le programme la s\u00e9quence d'instructions suivante, ex\u00e9cuter puis observer. 1 2 3 4 5 6 7 from turtle import * forward ( 60 ) left ( 120 ) forward ( 60 ) right ( 90 ) circle ( 60 , 150 ) exitonclick () Compl\u00e9ter le programme pour afficher la figure de gauche. ::: :::{.minipage width=\"0.5\\linewidth\" center=\"true\"} \\ & \\ ::: :::exercice 1. Avec l'\u00e9diteur d'Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-triangles.py . 2. Le programme ci-dessous permet de tracer un triangle \u00e9quilat\u00e9ral noir de c\u00f4t\u00e9 100 pixels. Compl\u00e9ter le code pour tracer la figure de droite avec la pyramide de triangles. 1 2 3 4 5 6 7 8 9 begin_fill () fillcolor ( \"black\" ) forward ( 100 ) left ( 120 ) forward ( 100 ) left ( 120 ) forward ( 100 ) left ( 120 ) end_fill () ::: :::exercice 1. Avec l'\u00e9diteur d'Idle, cr\u00e9er dans le r\u00e9pertoire TP1 un nouveau programme tortue-drapeau.py . 2. \u00c9crire un programme qui dessine le drapeau fran\u00e7ais. :::","title":"Utiliser une biblioth\u00e8que"},{"location":"presentation_parc_2021/presentation_spe_nsi/","text":"% Pr\u00e9sentation de la sp\u00e9cialit\u00e9 NSI % % 20 novembre 2020 NSI ? \u2693\ufe0e Qu'est-ce que c'est ? \u2693\ufe0e NSI d\u00e9signe l'enseignement de la sp\u00e9cialit\u00e9 Num\u00e9rique et Sciences Informatiques qui permet : ::: incremental * d'aborder les bases de l'informatique * de former les \u00e9l\u00e8ves \u00e0 la pratique d'une d\u00e9marche scientifique. ::: Les th\u00e8mes du programme \u2693\ufe0e Les comp\u00e9tences transversales \u2693\ufe0e La sp\u00e9cialit\u00e9 NSI permet de d\u00e9velopper des comp\u00e9tences transversales : ::: incremental * faire preuve d'autonomie, d'initiative et de cr\u00e9ativit\u00e9 * pr\u00e9senter un probl\u00e8me ou sa solution * coop\u00e9rer au sein d'une \u00e9quipe * rechercher une information et partager des ressources * faire un usage responsable et critique de l'information ::: Pourquoi choisir NSI ? \u2693\ufe0e On peut choisir NSI : :::incremental comme compl\u00e9ment \u00e0 toute autre sp\u00e9cialit\u00e9 car les comp\u00e9tences informatiques sont un atout dans tous les domaines, des sciences exactes aux sciences sociales. comme pr\u00e9paration \u00e0 des \u00e9tudes d\u2019informatique. Dans ce cas, il est conseill\u00e9 d\u2019associer NSI avec la sp\u00e9cialit\u00e9 Math\u00e9matiques en premi\u00e8re et la sp\u00e9cialit\u00e9 Math\u00e9matiques ou l\u2019option Math\u00e9matiques compl\u00e9mentaires en terminale. ::: Etudes postbac \u2693\ufe0e D\u00e9bouch\u00e9s professionnels \u2693\ufe0e Une formation en informatique sera un atout pour trouver un emploi dans un monde professionnel en pleine r\u00e9volution digitale. Informatique => emploi \u2693\ufe0e \u00c9valuation \u2693\ufe0e Abandon de la sp\u00e9cialit\u00e9 en fin de premi\u00e8re \u2693\ufe0e Si l\u2019\u00e9l\u00e8ve abandonne la sp\u00e9cialit\u00e9 NSI en premi\u00e8re, il passe en mai, une \u00e9preuve commune de contr\u00f4le continu sous la forme d\u2019un QCM divis\u00e9 en 7 parties de 6 questions couvrant tous les th\u00e8mes du programme. Pour chaque question, trois r\u00e9ponses sont propos\u00e9es et une seule est correcte. \u00c9preuves terminales \u2693\ufe0e Si l\u2019\u00e9l\u00e8ve a conserv\u00e9 la sp\u00e9cialit\u00e9 NSI en terminale, (voir eduscol ) il passe deux \u00e9preuves terminales : une \u00e9preuve \u00e9crite de trois heures trente minutes et une \u00e9preuve sur machine d\u2019une heure. Compl\u00e9ments \u2693\ufe0e Projet niveau premi\u00e8re : \u2693\ufe0e Projet niveau terminale : \u2693\ufe0e Manipulation de graphes, exploration d'un labyrinthe (source : Laurent Abbal) Projet niveau terminale : \u2693\ufe0e Rotation d'une image : r\u00e9cursivit\u00e9 / diviser pour r\u00e9gner. quandjepasselebac.education.fr/ \u2693\ufe0e Contacts \u2693\ufe0e Mail Site web : https://parc-nsi.github.io/premiere-nsi/ Code source de ce document : https://github.com/parc-nsi/premiere-nsi/tree/master/presentation_parc_2021","title":"Presentation spe nsi"},{"location":"presentation_parc_2021/presentation_spe_nsi/#nsi","text":"","title":"NSI ?"},{"location":"presentation_parc_2021/presentation_spe_nsi/#quest-ce-que-cest","text":"NSI d\u00e9signe l'enseignement de la sp\u00e9cialit\u00e9 Num\u00e9rique et Sciences Informatiques qui permet : ::: incremental * d'aborder les bases de l'informatique * de former les \u00e9l\u00e8ves \u00e0 la pratique d'une d\u00e9marche scientifique. :::","title":"Qu'est-ce que c'est ?"},{"location":"presentation_parc_2021/presentation_spe_nsi/#les-themes-du-programme","text":"","title":"Les th\u00e8mes du programme"},{"location":"presentation_parc_2021/presentation_spe_nsi/#les-competences-transversales","text":"La sp\u00e9cialit\u00e9 NSI permet de d\u00e9velopper des comp\u00e9tences transversales : ::: incremental * faire preuve d'autonomie, d'initiative et de cr\u00e9ativit\u00e9 * pr\u00e9senter un probl\u00e8me ou sa solution * coop\u00e9rer au sein d'une \u00e9quipe * rechercher une information et partager des ressources * faire un usage responsable et critique de l'information :::","title":"Les comp\u00e9tences transversales"},{"location":"presentation_parc_2021/presentation_spe_nsi/#pourquoi-choisir-nsi","text":"On peut choisir NSI : :::incremental comme compl\u00e9ment \u00e0 toute autre sp\u00e9cialit\u00e9 car les comp\u00e9tences informatiques sont un atout dans tous les domaines, des sciences exactes aux sciences sociales. comme pr\u00e9paration \u00e0 des \u00e9tudes d\u2019informatique. Dans ce cas, il est conseill\u00e9 d\u2019associer NSI avec la sp\u00e9cialit\u00e9 Math\u00e9matiques en premi\u00e8re et la sp\u00e9cialit\u00e9 Math\u00e9matiques ou l\u2019option Math\u00e9matiques compl\u00e9mentaires en terminale. :::","title":"Pourquoi choisir NSI ?"},{"location":"presentation_parc_2021/presentation_spe_nsi/#etudes-postbac","text":"","title":"Etudes  postbac"},{"location":"presentation_parc_2021/presentation_spe_nsi/#debouches-professionnels","text":"Une formation en informatique sera un atout pour trouver un emploi dans un monde professionnel en pleine r\u00e9volution digitale.","title":"D\u00e9bouch\u00e9s professionnels"},{"location":"presentation_parc_2021/presentation_spe_nsi/#informatique-emploi","text":"","title":"Informatique =&gt; emploi"},{"location":"presentation_parc_2021/presentation_spe_nsi/#evaluation","text":"","title":"\u00c9valuation"},{"location":"presentation_parc_2021/presentation_spe_nsi/#abandon-de-la-specialite-en-fin-de-premiere","text":"Si l\u2019\u00e9l\u00e8ve abandonne la sp\u00e9cialit\u00e9 NSI en premi\u00e8re, il passe en mai, une \u00e9preuve commune de contr\u00f4le continu sous la forme d\u2019un QCM divis\u00e9 en 7 parties de 6 questions couvrant tous les th\u00e8mes du programme. Pour chaque question, trois r\u00e9ponses sont propos\u00e9es et une seule est correcte.","title":"Abandon de la sp\u00e9cialit\u00e9 en fin de premi\u00e8re"},{"location":"presentation_parc_2021/presentation_spe_nsi/#epreuves-terminales","text":"Si l\u2019\u00e9l\u00e8ve a conserv\u00e9 la sp\u00e9cialit\u00e9 NSI en terminale, (voir eduscol ) il passe deux \u00e9preuves terminales : une \u00e9preuve \u00e9crite de trois heures trente minutes et une \u00e9preuve sur machine d\u2019une heure.","title":"\u00c9preuves terminales"},{"location":"presentation_parc_2021/presentation_spe_nsi/#complements","text":"","title":"Compl\u00e9ments"},{"location":"presentation_parc_2021/presentation_spe_nsi/#projet-niveau-premiere","text":"","title":"Projet niveau premi\u00e8re :"},{"location":"presentation_parc_2021/presentation_spe_nsi/#projet-niveau-terminale","text":"Manipulation de graphes, exploration d'un labyrinthe (source : Laurent Abbal)","title":"Projet niveau terminale :"},{"location":"presentation_parc_2021/presentation_spe_nsi/#projet-niveau-terminale_1","text":"Rotation d'une image : r\u00e9cursivit\u00e9 / diviser pour r\u00e9gner.","title":"Projet niveau terminale :"},{"location":"presentation_parc_2021/presentation_spe_nsi/#quandjepasselebaceducationfr","text":"","title":"quandjepasselebac.education.fr/"},{"location":"presentation_parc_2021/presentation_spe_nsi/#contacts","text":"Mail Site web : https://parc-nsi.github.io/premiere-nsi/ Code source de ce document : https://github.com/parc-nsi/premiere-nsi/tree/master/presentation_parc_2021","title":"Contacts"},{"location":"presentation_parc_2021/reveal.js/CONTRIBUTING/","text":"Contributing \u2693\ufe0e Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support \u2693\ufe0e If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports \u2693\ufe0e When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests \u2693\ufe0e Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins \u2693\ufe0e Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"presentation_parc_2021/reveal.js/CONTRIBUTING/#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"presentation_parc_2021/reveal.js/CONTRIBUTING/#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"presentation_parc_2021/reveal.js/CONTRIBUTING/#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"presentation_parc_2021/reveal.js/CONTRIBUTING/#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"presentation_parc_2021/reveal.js/CONTRIBUTING/#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"presentation_parc_2021/reveal.js/css/theme/","text":"Dependencies \u2693\ufe0e Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme \u2693\ufe0e To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Index"},{"location":"presentation_parc_2021/reveal.js/css/theme/#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"presentation_parc_2021/reveal.js/css/theme/#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"presentation_parc_2021/reveal.js/plugin/markdown/example/","text":"Markdown Demo \u2693\ufe0e External 1.1 \u2693\ufe0e Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 \u2693\ufe0e Content 1.2 External 2 \u2693\ufe0e Content 2.1 External 3.1 \u2693\ufe0e Content 3.1 External 3.2 \u2693\ufe0e Content 3.2 External 3.3 \u2693\ufe0e","title":"Markdown Demo"},{"location":"presentation_parc_2021/reveal.js/plugin/markdown/example/#markdown-demo","text":"","title":"Markdown Demo"},{"location":"presentation_parc_2021/reveal.js/plugin/markdown/example/#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"presentation_parc_2021/reveal.js/plugin/markdown/example/#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"presentation_parc_2021/reveal.js/plugin/markdown/example/#external-2","text":"Content 2.1","title":"External 2"},{"location":"presentation_parc_2021/reveal.js/plugin/markdown/example/#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"presentation_parc_2021/reveal.js/plugin/markdown/example/#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"presentation_parc_2021/reveal.js/plugin/markdown/example/#external-33","text":"","title":"External 3.3"},{"location":"presentation_parc_2021/reveal.js/test/simple/","text":"Slide 1.1 \u2693\ufe0e 1 var a = 1 ; Slide 1.2 \u2693\ufe0e Slide 2 \u2693\ufe0e","title":"Simple"},{"location":"presentation_parc_2021/reveal.js/test/simple/#slide-11","text":"1 var a = 1 ;","title":"Slide 1.1"},{"location":"presentation_parc_2021/reveal.js/test/simple/#slide-12","text":"","title":"Slide 1.2"},{"location":"presentation_parc_2021/reveal.js/test/simple/#slide-2","text":"","title":"Slide 2"},{"location":"section/automatismes/","text":"Corrig\u00e9 des automatismes Test 14 \u2693\ufe0e Programmer la fonction dont on donne la sp\u00e9cification : 1 2 3 4 5 6 def index_min ( t ): \"\"\" Param\u00e8tre : t un tableau de nombres (int ou float) Pr\u00e9condition : t non vide Valeur renvoy\u00e9e : un tableau contenant les positions (index) o\u00f9 le minimum de t est atteint \"\"\" Automatisme 2 \u2693\ufe0e Programmer la fonction dont on donne la sp\u00e9cification : 1 2 3 4 5 6 def au_moins_un_zero ( t ): \"\"\" Param\u00e8tre : t un tableau de nombres (int ou float) Pr\u00e9condition : t non vide Valeur renvoy\u00e9e : un bool\u00e9en indiquant si t contient au moins un z\u00e9ro \"\"\" Automatisme 3 \u2693\ufe0e Repr\u00e9senter en binaire le nombre d\u2019\u00e9criture d\u00e9cimale 49. Automatisme 4 \u2693\ufe0e Repr\u00e9senter en base dix, le nombre dont l'\u00e9criture en base deux est 1010110 puis le nombre dont l'\u00e9criture en base 16 est A4 . Automatisme 5 \u2693\ufe0e D\u00e9terminer le successeur des entiers dont l'\u00e9criture en base deux est : 111 10011 10111 Automatisme 6 \u2693\ufe0e Pour d\u00e9terminer la liste des chiffres en base dix d'un entier naturel, un \u00e9l\u00e8ve a \u00e9crit la fonction ci-dessous : 1 2 3 4 5 6 def liste_chiffres ( n ): L = [ n % 10 ] while n > 0 : n = n // 10 L . insert ( 0 , n % 10 ) return L Malheureusement sa fonction ne retourne pas le r\u00e9sultat attendu pour l'entier 730 : 1 2 >>> liste_chiffres(730) [0, 7, 3, 0] Proposer une version corrig\u00e9e de la fonction liste_chiffres . Automatisme 7 \u2693\ufe0e On travaille sur des tableaux \u00e0 deux dimensions qui repr\u00e9sentent des images binaires : un pixel a pour valeur un entier : 0 pour un pixel noir et 1 pour un pixel blanc. Compl\u00e9ter les fonctions ci-dessous en respectant leurs sp\u00e9cifications, les postconditions doivent \u00eatre v\u00e9rifi\u00e9es. Lien vers Basthon pour tester en ligne . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def image_noire ( largeur , hauteur ): \"\"\" Param\u00e8tre : largeur et hauteur deux entiers non nuls Valeur renvoy\u00e9e : un tableau \u00e0 2 dimensions repr\u00e9sentant une image binaire de dimensions (largeur, hauteur) rempli de 0 \"\"\" # \u00e0 compl\u00e9ter avec un tableau en compr\u00e9hension def dimensions ( tab ): \"\"\" Param\u00e8tre : tab un tableau \u00e0 deux dimensions d'entiers repr\u00e9sentant une image binaire rectangulaire Valeur renvoy\u00e9e : un tableau de deux entiers [largeur, hauteur] repr\u00e9sentant les dimensions de l'image \"\"\" # \u00e0 compl\u00e9ter def nombre_blancs ( tab ): \"\"\" Param\u00e8tre : tab un tableau \u00e0 deux dimensions d'entiers repr\u00e9sentant une image binaire rectangulaire Valeur renvoy\u00e9e : un entier repr\u00e9sentant le nombre de pixels blancs (valeur 1) \"\"\" # \u00e0 compl\u00e9ter #postconditions pour la fonction image_noire assert image_noire ( 2 , 1 ) == [[ 0 , 0 ]] assert image_noire ( 1 , 2 ) == [[ 0 ], [ 0 ]] assert image_noire ( 3 , 2 ) == [[ 0 , 0 , 0 ], [ 0 , 0 , 0 ]] #postconditions pour la fonction dimensions assert dimensions ([[], []]) == [ 2 , 0 ] assert dimensions ([[ 0 , 1 , 2 ], [ 3 , 4 , 5 ]]) == [ 2 , 3 ] #postconditions pour la fonction nombre_blancs assert nombre_blancs ([[ 0 , 0 ], [ 0 , 0 ]]) == 0 assert dimensions ([[ 0 , 1 , 1 ], [ 0 , 1 , 0 ]]) == 3 assert dimensions ([[], []]) == 0 Automatisme 8 \u2693\ufe0e Modifier les expressions \"\u00e0 modifier\" dans la fonction Python ci-dessous pour que la sp\u00e9cification soit v\u00e9rifi\u00e9e. Tester le code dans Basthon D\u00e9commenter #test_indice_maximum(indice_maximum) en ligne 63 pour soumettre votre fonction au test unitaire. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def indice_maximum ( tab , debut , fin ): \"\"\" Param\u00e8tres : tab un tableau d'entiers debut un entier indice du d\u00e9but de la plage fin un entier indice de la fin de la plage (inclus) Valeur renvoy\u00e9e : l'indice de la premi\u00e8re occurence du maximum de tab dans la plage de valeurs entre les indice et debut et fin (inclus) \"\"\" imax = \"\u00e0 modifier\" for i in range ( imax + 1 , fin + 1 ): if \"\u00e0 modifier\" : imax = \"\u00e0 modifier\" return imax Automatisme 9 \u2693\ufe0e Modifier les expressions \"\u00e0 modifier\" dans la fonction tri_selection ci-dessous pour que la sp\u00e9cification et l'assertion plac\u00e9e \u00e0 la fin de la boucle externe soient v\u00e9rifi\u00e9s. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def tri_selection ( tab ): \"\"\" Param\u00e8tre : tab un tableau de nombres Valeur renvoy\u00e9e : tab Postcondition : valeur renvoy\u00e9e de tab tri\u00e9e dans l'ordre croissant \"\"\" i = len ( tab ) - 1 while i >= 1 : imax = indice_maximum ( tab , \"\u00e0 modifier\" , \"\u00e0 modifier\" ) tab [ i ], tab [ imax ] = \"\u00e0 modifier\" # assertion qui doit \u00eatre v\u00e9rifi\u00e9e assert max ( tab [: i + 1 ]) == tab [ i ] i = \"\u00e0 modifier\" return tab D\u00e9commenter #test_tri(tri_selection) en ligne 64 pour soumettre votre fonction au test unitaire. Automatisme 10 \u2693\ufe0e Un algorithme de tri d\u2019une liste d\u2019entiers est impl\u00e9ment\u00e9 de la fa\u00e7on suivante : 1 2 3 4 5 6 7 8 9 def trier ( L ) : for i in range ( len ( L )): indice_min = i for j in range ( i + 1 , len ( L )): if L [ j ] < L [ indice_min ] : indice_min = j L [ i ], L [ indice_min ] = L [ indice_min ], L [ i ] # assertion vraie \u00e0 cet endroit return L Parmi les assertions suivantes laquelle reste vraie \u00e0 chaque it\u00e9ration de la boucle, \u00e0 l'endroit indiqu\u00e9 ci-dessus ? R\u00e9ponse A : la sous-liste L[0:i+1] contient les i plus grandes valeurs de L tri\u00e9es par ordre d\u00e9croissant R\u00e9ponse B : la sous-liste L[0:i+1] contient les i plus grandes valeurs de L tri\u00e9es par ordre croissant R\u00e9ponse C : la sous-liste L[0:i+1] contient les i plus petites valeurs de L tri\u00e9es par ordre d\u00e9croissant R\u00e9ponse D : la sous-liste L[0:i+1] contient les i plus petites valeurs de L tri\u00e9es par ordre croissant Automatisme 11 \u2693\ufe0e Compl\u00e9ter la fonction Python ci-dessous pour que la sp\u00e9cification et les postconditions soient satisfaites. Combient de comparaisons sont faites lors de l'appel un_doublon(list(range(100))) ? 1 2 3 4 5 6 7 8 9 10 11 12 13 def un_doublon ( t ): \"\"\" Param\u00e8tre : t un tableau de nombres Valeur renvoy\u00e9e : un bool\u00e9en True si t comporte au moins un doublon False sinon \"\"\" #\u00e0 compl\u00e9ter assert un_doublon ([ 1 , 2 , 3 ]) == False assert un_doublon ([ 1 , 2 , 2 ]) == True assert un_doublon ([ 1 , 2 , 4 , 2 ]) == True assert un_doublon ([]) == False Automatisme 12 \u2693\ufe0e Compl\u00e9ter la fonction Python ci-dessous pour que la sp\u00e9cification et les postconditions soient satisfaites. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def index_premiere_occurence_dicho ( x , t ): \"\"\" Param\u00e8tre : t un tableau de nombres tri\u00e9 dans l'ordre croissant x un nombre Valeur renvoy\u00e9e : l'index de la premi\u00e8re de x dans t si x est dans t -1 sinon \"\"\" a = 0 b = len ( t ) - 1 while a <= b : m = ( a + b ) // 2 if t [ m ] < x : \"\u00e0 compl\u00e9ter\" elif t [ m ] > x : \"\u00e0 compl\u00e9ter\" else : \"\u00e0 compl\u00e9ter\" return \"\u00e0 compl\u00e9ter\" return - 1 assert index_premiere_occurence_dicho ( 10 , [ 10 , 10 , 11 , 12 , 13 ]) == 1 assert index_premiere_occurence_dicho ( 10 , [ 9 , 10 , 11 , 12 , 13 ]) == 1 assert index_premiere_occurence_dicho ( 10 , [ 9 , 9 , 11 , 12 , 13 ]) == - 1 assert index_premiere_occurence_dicho ( 10 , [ 7 , 8 , 9 , 10 ]) == 3 assert index_premiere_occurence_dicho ( 10 , [ 7 , 10 , 10 , 10 , 10 ]) == 1 assert index_premiere_occurence_dicho ( 10 , []) == - 1 Automatisme 13 \u2693\ufe0e Compl\u00e9ter la fonction Python ci-dessous pour que la sp\u00e9cification et les postconditions soient satisfaites. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def est_decroissant ( t ): \"\"\" Param\u00e8tre : t un tableau de nombres Valeur renvoy\u00e9e : bool\u00e9en indiquant si t dans l'ordre d\u00e9croissant \"\"\" \"\u00e0 compl\u00e9ter\" def recherche_dicho_decroissant ( x , t ): \"\"\" Param\u00e8tre : t un tableau de nombres tri\u00e9 dans l'ordre d\u00e9croissant x un nombre Valeur renvoy\u00e9e : index de x dans t si x dans t None si x pas dans t \"\"\" a = 0 b = len ( t ) - 1 while a <= b : m = ( a + b ) // 2 \"\u00e0 compl\u00e9ter\" return None assert est_decroissant ([ k ** 2 for k in range ( 10 )]) == False assert est_decroissant ([]) == True t1 = list ( range ( 10 , - 1 , - 1 )) assert est_decroissant ( t1 ) == True assert recherche_dicho_decroissant ( 8 , t1 ) == 2 assert recherche_dicho_decroissant ( 10 , t1 ) == 0 assert recherche_dicho_decroissant ( 0 , t1 ) == 10 assert recherche_dicho_decroissant ( 4.5 , t1 ) == None print ( \"Test unitaires r\u00e9ussis pour l'automatisme 13 : recherche_dicho_decroissant et est_decroissant\" ) Automatisme 14 \u2693\ufe0e Convertir en flottant au format simple pr\u00e9cision (mantisse sur 8 bits et exposant sur 23 bits), le nombre d'\u00e9criture d\u00e9cimale 9,78125. Convertir en flottant au format simple pr\u00e9cision (mantisse sur 8 bits et exposant sur 23 bits), le nombre d'\u00e9criture d\u00e9cimale 0,1. V\u00e9rifier avec le convertisseur en ligne https://www.h-schmidt.net/FloatConverter/IEEE754.html ou la fonction donn\u00e9e ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def decimal_vers_IEE754 ( x , taille_exposant , taille_mantisse ): #print(\"d\u00e9termination du signe\") if x > 0 : print ( \"Bit de signe : 0\" ) elif x < 0 : print ( \"Bit de signe : 1\" ) else : print ( \"O valeur particuli\u00e8re\" ) if x != 0 : #print(\"d\u00e9termination de l'exposant\") exposant = 0 while int ( x ) >= 1 : x = x / 2 exposant = exposant + 1 while int ( x ) == 0 : x = x * 2 exposant = exposant - 1 decalage = 2 ** ( taille_exposant - 1 ) - 1 print ( \"Exposant en d\u00e9cimal : \" , exposant ) print ( f \"Exposant d\u00e9cal\u00e9 de + { decalage } : \" , exposant + decalage ) print ( f \"Exposant d\u00e9cal\u00e9 de + { decalage } : codage binaire sur 11 bits : \" , bin ( exposant + decalage ) . lstrip ( '0b' ) . zfill ( taille_exposant )) #print(\"d\u00e9termination des bits de mantisse\") x = x - 1 nbits = 0 mantisse = [] while nbits < taille_mantisse : x = x * 2 partie_entiere = int ( x ) mantisse . append ( str ( partie_entiere )) if partie_entiere == 1 : x = x - partie_entiere nbits = nbits + 1 print ( \"Mantisse : \" , '' . join ( mantisse )) Automatisme 15 \u2693\ufe0e On consid\u00e8re une formule bool\u00e9enne form des variables bool\u00e9ennes a et b dont voici la table de v\u00e9rit\u00e9. a b form True True False False True True True False True False False False Quelle est cette formule bool\u00e9enne ? R\u00e9ponse A : a and b R\u00e9ponse B : a or b R\u00e9ponse C : ((not(a)) and b) or (a and (not(b))) R\u00e9ponse D : (not(a)) or (not(b)) Automatisme 16 \u2693\ufe0e Pouvez-vous deviner ce qui va se passer si on ex\u00e9cute le code ci-dessous ? V\u00e9rifiez. Explication ? def boucle1(): x = 1 h = 1 c = 0 while x < 2: h = h / 2 x = x + h c = c + 1 return x == 2, c boucle1() R\u00e9ponse A : (False, 53) R\u00e9ponse B : (True, 53) R\u00e9ponse C : (True, 52) R\u00e9ponse D : la boucle ne se termine pas car d'apr\u00e8s une formule du cours de math\u00e9matiques sur la somme des termes cons\u00e9cutifs d'une suite g\u00e9om\u00e9trique, pour tout entier naturel n on a : <a href=\"https://www.codecogs.com/eqnedit.php?latex=1+1/2+1/2 2+...+1/2 n&space;=&space;(1-1/2 {n+1})/(1-1/2)=2(1-1/2 )<2\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?1+1/2+1/2 2+...+1/2 n&space;=&space;(1-1/2 {n+1})/(1-1/2)=2(1-1/2 )<2\" title=\"1+1/2+1/2 2+...+1/2 n = (1-1/2 {n+1})/(1-1/2)=2(1-1/2 )<2\" /> Automatisme 17 ( banque d'\u00e9preuve pratique 2021 ) \u2693\ufe0e \u00c9crire une fonction recherche qui prend en param\u00e8tres elt un nombre entier et tab un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de elt dans tab si elt est dans tab et -1 sinon. Exemples : 1 2 3 4 5 6 7 8 >>> recherche ( 1 , [ 2 , 3 , 4 ]) - 1 >>> recherche ( 1 , [ 10 , 12 , 1 , 56 ]) 2 >>> recherche ( 50 , [ 1 , 50 , 1 ]) 1 >>> recherche ( 15 , [ 8 , 9 , 10 , 15 ]) 3 Automatisme 18 ( banque d'\u00e9preuve pratique 2021 ) \u2693\ufe0e \u00c9crire une fonction maxi qui prend en param\u00e8tre une liste tab de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste. Exemple : 1 2 >>> maxi ([ 1 , 5 , 6 , 9 , 1 , 2 , 3 , 7 , 9 , 8 ]) ( 9 , 3 ) Automatisme 19 ( banque d'\u00e9preuve pratique 2021 ) \u2693\ufe0e On consid\u00e8re la fonction insere ci-dessous qui prend en argument un entier a et un tableau tab d'entiers tri\u00e9s par ordre croissant. Cette fonction ins\u00e8re la valeur a dans le tableau et renvoie le nouveau tableau. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes python. Compl\u00e9ter la fonction insere ci-dessous. def insere(a, tab): l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab l.append(a) i = \"\u00e0 compl\u00e9ter\" while i >= 0 and a < \"\u00e0 compl\u00e9ter\" : l[i+1] = \"\u00e0 compl\u00e9ter\" l[i] = a i = \"\u00e0 compl\u00e9ter\" return l assert insere(3,[1,2,4,5]) == [1, 2, 3, 4, 5] assert insere(10,[1,2,7,12,14,25]) == [1, 2, 7, 10, 12, 14, 25] assert insere(1,[2,3,4]) == [1,2,3,4] print('Tests r\u00e9ussis') Automatisme 20 ( banque d'\u00e9preuve pratique 2021 ) \u2693\ufe0e Compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. def dichotomie(tab, x): \"\"\" tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant x : nombre entier La fonction renvoie True si tab contient x et False sinon \"\"\" debut = 0 fin = len(tab) - 1 while debut < = fin: m = \"\u00e0 compl\u00e9ter\" if x == tab[m]: return \"\u00e0 compl\u00e9ter\" if x > tab[m]: debut = m + 1 else: fin = \"\u00e0 compl\u00e9ter\" return \"\u00e0 compl\u00e9ter\" assert dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28) == True assert dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27) == False print('Tests r\u00e9ussis') Automatisme 21 ( banque d'\u00e9preuve pratique 2021 ) \u2693\ufe0e \u00c9crire une fonction tri_selection qui prend en param\u00e8tre un tableau tab de nombres entiers et qui renvoie le tableau tri\u00e9 par ordre croissant. On utilisera l\u2019algorithme suivant : on recherche le plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ; on recherche le second plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 1 ; on continue de cette fa\u00e7on jusqu'\u00e0 ce que le tableau soit enti\u00e8rement tri\u00e9 dans l'ordre croissant. Exemples de postconditions : 1 2 3 4 >>> assert tri_selection ([ 1 , 52 , 6 , - 9 , 12 ]) == [ - 9 , 1 , 6 , 12 , 52 ] >>> assert tri_selection ([]) == [] >>> assert tri_selection ([ 1 , 4 , 8 ]) == [ 1 , 4 , 8 ] >>> assert tri_selection ([ 8 , 4 , 1 ]) == [ 1 , 4 , 8 ] Automatisme 22 ( banque d'\u00e9preuve pratique 2021 ) \u2693\ufe0e Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : bob, radar, et non sont des mots palindromes. De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543. L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome. Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction est_nbre_palindrome s\u2019appuiera sur la fonction est_palindrome qui elle-m\u00eame s\u2019appuiera sur la fonction inverse_chaine . La fonction inverse_chaine inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res chaine et renvoie la cha\u00eene invers\u00e9e. La fonction est_palindrome teste si une chaine de caract\u00e8res chaine est un palindrome. Elle renvoie True si c\u2019est le cas et False sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente. La fonction est_nbre_palindrome teste si un nombre nbre est un palindrome. Elle renvoie True si c\u2019est le cas et False sinon. Cette fonction s'appuie sur la fonction pr\u00e9c\u00e9dente. Compl\u00e9ter le code des trois fonctions ci-dessous. def inverse_chaine(chaine): result = \"\u00e0 compl\u00e9ter\" for caractere in chaine: result = \"\u00e0 compl\u00e9ter\" return result def est_palindrome(chaine): inverse = inverse_chaine(chaine) return \"\u00e0 compl\u00e9ter\" def est_nbre_palindrome(nbre): chaine = \"\u00e0 compl\u00e9ter\" return est_palindrome(chaine) assert inverse_chaine('bac') == 'cab' assert est_palindrome('NSI') == False assert est_palindrome('ISN-NSI') == True assert est_nbre_palindrome(214312) == False assert est_nbre_palindrome(213312) == True print(\"Tests r\u00e9ussis\") Automatisme 23 ( banque d'\u00e9preuve pratique 2021 ) \u2693\ufe0e Compl\u00e9ter la fonction separe ci-dessous qui prend en argument un tableau tab dont les \u00e9l\u00e9ments sont des 0 et des 1 et qui s\u00e9pare les 0 des 1 en pla\u00e7ant les 0 en d\u00e9but de tableau et les 1 \u00e0 la suite. def separe(tab): i = 0 j = \"\u00e0 compl\u00e9ter\" while i < j : if tab[i] == 0 : i = \"\u00e0 compl\u00e9ter\" else : tab[i], tab[j] = \"\u00e0 compl\u00e9ter\" j = \"\u00e0 compl\u00e9ter\" return tab assert separe([1, 0, 1, 0, 1, 0, 1, 0]) == [0, 0, 0, 0, 1, 1, 1, 1] assert separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0]) == [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1] print(\"Tests r\u00e9ussis\") Automatisme 24 ( banque d'\u00e9preuve pratique 2021 ) \u2693\ufe0e \u00c9crire une fonction indice_du_min qui prend en param\u00e8tre un tableau de nombres non tri\u00e9 tab , et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python. Exemples : 1 2 3 4 5 6 >>> indice_du_min ([ 5 ]) 0 >>> indice_du_min ([ 2 , 4 , 1 ]) 2 >>> indice_du_min ([ 5 , 3 , 2 , 2 , 4 ]) 2 Automatisme 25 : traitement de donn\u00e9es en tables \u2693\ufe0e T\u00e9l\u00e9charger l'archive avec le code source \u00e0 compl\u00e9ter et le fichier eleves.csv . Un corrig\u00e9 est ici . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 #!/usr/bin/env python \"\"\"Consigne : compl\u00e9ter au niveau des \u00e0 \"compl\u00e9ter\" les fonctions : 1) moyenne_table 2) enreg_avec_recompense 3) generer_table_recompenses 4) decompte_recompenses 5) clef_tri_moyenne_decroissant 6) clef_tri_alphabetique_croissant_moyenne_decroissant Chaque fonction est accompagn\u00e9 d'un test unitaire => pour tester, d\u00e9sactiver les commentaires dans le programme principal \u00e0 partir de la ligne 151 Pour les tris il faut aussi compl\u00e9ter le programme principal en lignes 167 et 171 \"\"\" import csv #Import / Export d'un tel fichier CSV ver la repr\u00e9sentation d'une tble en Python (tableau de dictionnaires) def lecture_csv ( fichier , delimiteur ): \"\"\" Param\u00e8tre : un chemin vers un fichier CSV Valeur renvoy\u00e9e : un tableau de dictionnaires, extraction de la table contenue dans le fichier \"\"\" f = open ( fichier , mode = 'r' , encoding = 'utf8' , newline = '' ) reader = csv . DictReader ( f , delimiter = delimiteur ) #cr\u00e9ation de l'objet reader table = [ dict ( enregistrement ) for enregistrement in reader ] f . close () return table def ecriture_csv ( table , fichier , delimiteur ): \"\"\" Param\u00e8tre : un chemin vers un fichier CSV une table comme tableau de dictionnaires partageant les m\u00eames clefs, de valeurs str Valeur renvoy\u00e9e : None, \u00e9crit table dans fichier avec Dictriter du module CSV \"\"\" g = open ( fichier , mode = 'w' , encoding = 'utf8' , newline = '' ) attributs = list ( table [ 0 ] . keys ()) writer = csv . DictWriter ( g , delimiter = delimiteur , fieldnames = attributs ) #cr\u00e9ation de l'objet writer writer . writeheader () #\u00e9criture des attibuts for enregistrement in table : writer . writerow ( enregistrement ) #\u00e9criture des enregistrements g . close () def moyenne_table ( table_eleves ) : \"\"\"Param\u00e8tre : table_eleves est une repr\u00e9sentation de la table extraite de eleves.csv sous forme de tableau de dictionnaires. Attention les attributs 'moyenne' sont de type 'str' Valeur renvoy\u00e9e : un flottant repr\u00e9sentant la moyenne de tous les \u00e9l\u00e8ves de la table arrondie \u00e0 2 chiffres apr\u00e8s la virgule \"\"\" somme = 0 compteur = 0 for enreg in table_eleves : \"\u00e0 compl\u00e9ter\" \"\u00e0 compl\u00e9ter\" return round ( somme / compteur , 2 ) def test_moyenne_table (): assert moyenne_table ( table_eleves ) == 11.46 print ( \"Test unitaire de moyenne_table r\u00e9ussi\" ) def enreg_avec_recompense ( enreg ): \"\"\" Param\u00e8tre : enreg un dictionnaire de clefs 'pr\u00e9nom', 'nom', 'moyenne' Attention toutes les clefs ont des valeurs de type str Valeur renvoy\u00e9e : extension du dictionnaire avec une nouvelle clef 'r\u00e9compense' de valeurs s : 'insuffisant' si moyenne < 8 'm\u00e9diocre' si 8 <= moyenne < 10 'passable' si 10 <= moyenne < 12 'encouragements' si 12 <= moyenne < 14 'compliments' si 14 <= moyenne < 16 'f\u00e9licitations' si moyenne > 16 \"\"\" copie = { clef : valeur for clef , valeur in enreg . items () } m = \"\u00e0 compl\u00e9ter\" if m < 8 : copie [ 'r\u00e9compense' ] = 'insuffisant' elif \"\u00e0 compl\u00e9ter\" : copie [ 'r\u00e9compense' ] = 'm\u00e9diocre' elif \"\u00e0 compl\u00e9ter\" : copie [ 'r\u00e9compense' ] = 'passable' elif \"\u00e0 compl\u00e9ter\" : copie [ 'r\u00e9compense' ] = 'encouragements' elif \"\u00e0 compl\u00e9ter\" : copie [ 'r\u00e9compense' ] = 'compliments' else : copie [ 'r\u00e9compense' ] = 'f\u00e9licitations' return copie def generer_table_recompenses ( table_eleves ): \"\"\"Param\u00e8tre : table_eleves est une repr\u00e9sentation de la table extraite de eleves.csv sous forme de tableau de dictionnaires Valeur renvoy\u00e9e : une extension de table_eleves avec un nouvel attribut 'r\u00e9compense' chaque nouvel enregistrement est g\u00e9n\u00e9r\u00e9 par enreg_avec_recompense \"\"\" table_recompenses = \"\u00e0 compl\u00e9ter\" return table_recompenses def test_generer_table_recompenses (): \"\"\"Test unitaires de generer_table_recompenses\"\"\" table_recompenses = generer_table_recompenses ( table_eleves ) assert table_recompenses [ 0 ] == { 'pr\u00e9nom' : 'Zo\u00e9' , 'nom' : 'Collin' , 'moyenne' : '19' , 'r\u00e9compense' : 'f\u00e9licitations' } assert table_recompenses [ 8 ] == { 'pr\u00e9nom' : 'Roland' , 'nom' : 'Joly' , 'moyenne' : '8' , 'r\u00e9compense' : 'm\u00e9diocre' } print ( \"Test unitaires de generer_table_recompenses r\u00e9ussis\" ) def decompte_recompenses ( table_recompenses ): \"\"\"Param\u00e8tre : table_recompenses est une repr\u00e9sentation de la table renvoy\u00e9e par generer_table_recompenses. Valeur renvoy\u00e9e : un dictionnaire avec le d\u00e9compte de chaque r\u00e9compense \"\"\" decompte = dict () for enreg in table_recompenses : \"\u00e0 compl\u00e9ter\" \"\u00e0 compl\u00e9ter\" \"\u00e0 compl\u00e9ter\" \"\u00e0 compl\u00e9ter\" return decompte def test_decompte_recompenses (): \"\"\"Test unitaires de decompte_recompenses\"\"\" decompte = decompte_recompenses ( table_recompenses ) assert decompte == { 'f\u00e9licitations' : 89 , 'm\u00e9diocre' : 77 , 'compliments' : 95 , 'insuffisant' : 86 , 'passable' : 81 , 'encouragements' : 72 } print ( \"Test unitaires de decompte_recompenses r\u00e9ussis\" ) def clef_tri_moyenne_decroissant ( enreg ): \"\"\"Clef de tri par moyenne d\u00e9croissante Attention la valeur de l'attribut 'moyenne' de enreg est de type str\"\"\" return \"\u00e0 compl\u00e9ter\" def clef_tri_alphabetique_croissant_moyenne_decroissant ( enreg ): \"\"\"Clef de tri par moyenne d\u00e9croissante Attention la valeur de l'attribut 'moyenne' de enreg est de type str\"\"\" return \"\u00e0 compl\u00e9ter\" #Programme principal table_eleves = lecture_csv ( 'eleves.csv' , ',' ) #D\u00e9commenter lorsque moyenne_table est compl\u00e9t\u00e9e #test_moyenne_table() #D\u00e9commenter lorsque generer_table_recompenses est compl\u00e9t\u00e9e #table_recompenses = generer_table_recompenses(table_eleves) #test_generer_table_recompenses() #D\u00e9commenter lorsque decompte_recompenses est compl\u00e9t\u00e9e #test_decompte_recompenses() #D\u00e9commenter e lorsque clef_tri_moyenne_decroissant termin\u00e9e #table_recompenses = generer_table_recompenses(table_eleves) #Ecrire une instruction qui permet de trier table_recompenses dans l'ordre d\u00e9croissant des moyennes #table_tri1 = \"\u00e0 compl\u00e9ter\" #Ecrire une instruction qui permet de trier table_recompenses : #d'abord dans l'ordre alphab\u00e9tique croissant puis dans l'ordre d\u00e9croissant des moyennes #table_tri2 = \"\u00e0 compl\u00e9ter\"","title":"Page 1"},{"location":"section/automatismes/#test-14","text":"Programmer la fonction dont on donne la sp\u00e9cification : 1 2 3 4 5 6 def index_min ( t ): \"\"\" Param\u00e8tre : t un tableau de nombres (int ou float) Pr\u00e9condition : t non vide Valeur renvoy\u00e9e : un tableau contenant les positions (index) o\u00f9 le minimum de t est atteint \"\"\"","title":"Test 14"},{"location":"section/automatismes/#automatisme-2","text":"Programmer la fonction dont on donne la sp\u00e9cification : 1 2 3 4 5 6 def au_moins_un_zero ( t ): \"\"\" Param\u00e8tre : t un tableau de nombres (int ou float) Pr\u00e9condition : t non vide Valeur renvoy\u00e9e : un bool\u00e9en indiquant si t contient au moins un z\u00e9ro \"\"\"","title":"Automatisme 2"},{"location":"section/automatismes/#automatisme-3","text":"Repr\u00e9senter en binaire le nombre d\u2019\u00e9criture d\u00e9cimale 49.","title":"Automatisme 3"},{"location":"section/automatismes/#automatisme-4","text":"Repr\u00e9senter en base dix, le nombre dont l'\u00e9criture en base deux est 1010110 puis le nombre dont l'\u00e9criture en base 16 est A4 .","title":"Automatisme 4"},{"location":"section/automatismes/#automatisme-5","text":"D\u00e9terminer le successeur des entiers dont l'\u00e9criture en base deux est : 111 10011 10111","title":"Automatisme 5"},{"location":"section/automatismes/#automatisme-6","text":"Pour d\u00e9terminer la liste des chiffres en base dix d'un entier naturel, un \u00e9l\u00e8ve a \u00e9crit la fonction ci-dessous : 1 2 3 4 5 6 def liste_chiffres ( n ): L = [ n % 10 ] while n > 0 : n = n // 10 L . insert ( 0 , n % 10 ) return L Malheureusement sa fonction ne retourne pas le r\u00e9sultat attendu pour l'entier 730 : 1 2 >>> liste_chiffres(730) [0, 7, 3, 0] Proposer une version corrig\u00e9e de la fonction liste_chiffres .","title":"Automatisme 6"},{"location":"section/automatismes/#automatisme-7","text":"On travaille sur des tableaux \u00e0 deux dimensions qui repr\u00e9sentent des images binaires : un pixel a pour valeur un entier : 0 pour un pixel noir et 1 pour un pixel blanc. Compl\u00e9ter les fonctions ci-dessous en respectant leurs sp\u00e9cifications, les postconditions doivent \u00eatre v\u00e9rifi\u00e9es. Lien vers Basthon pour tester en ligne . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def image_noire ( largeur , hauteur ): \"\"\" Param\u00e8tre : largeur et hauteur deux entiers non nuls Valeur renvoy\u00e9e : un tableau \u00e0 2 dimensions repr\u00e9sentant une image binaire de dimensions (largeur, hauteur) rempli de 0 \"\"\" # \u00e0 compl\u00e9ter avec un tableau en compr\u00e9hension def dimensions ( tab ): \"\"\" Param\u00e8tre : tab un tableau \u00e0 deux dimensions d'entiers repr\u00e9sentant une image binaire rectangulaire Valeur renvoy\u00e9e : un tableau de deux entiers [largeur, hauteur] repr\u00e9sentant les dimensions de l'image \"\"\" # \u00e0 compl\u00e9ter def nombre_blancs ( tab ): \"\"\" Param\u00e8tre : tab un tableau \u00e0 deux dimensions d'entiers repr\u00e9sentant une image binaire rectangulaire Valeur renvoy\u00e9e : un entier repr\u00e9sentant le nombre de pixels blancs (valeur 1) \"\"\" # \u00e0 compl\u00e9ter #postconditions pour la fonction image_noire assert image_noire ( 2 , 1 ) == [[ 0 , 0 ]] assert image_noire ( 1 , 2 ) == [[ 0 ], [ 0 ]] assert image_noire ( 3 , 2 ) == [[ 0 , 0 , 0 ], [ 0 , 0 , 0 ]] #postconditions pour la fonction dimensions assert dimensions ([[], []]) == [ 2 , 0 ] assert dimensions ([[ 0 , 1 , 2 ], [ 3 , 4 , 5 ]]) == [ 2 , 3 ] #postconditions pour la fonction nombre_blancs assert nombre_blancs ([[ 0 , 0 ], [ 0 , 0 ]]) == 0 assert dimensions ([[ 0 , 1 , 1 ], [ 0 , 1 , 0 ]]) == 3 assert dimensions ([[], []]) == 0","title":"Automatisme 7"},{"location":"section/automatismes/#automatisme-8","text":"Modifier les expressions \"\u00e0 modifier\" dans la fonction Python ci-dessous pour que la sp\u00e9cification soit v\u00e9rifi\u00e9e. Tester le code dans Basthon D\u00e9commenter #test_indice_maximum(indice_maximum) en ligne 63 pour soumettre votre fonction au test unitaire. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def indice_maximum ( tab , debut , fin ): \"\"\" Param\u00e8tres : tab un tableau d'entiers debut un entier indice du d\u00e9but de la plage fin un entier indice de la fin de la plage (inclus) Valeur renvoy\u00e9e : l'indice de la premi\u00e8re occurence du maximum de tab dans la plage de valeurs entre les indice et debut et fin (inclus) \"\"\" imax = \"\u00e0 modifier\" for i in range ( imax + 1 , fin + 1 ): if \"\u00e0 modifier\" : imax = \"\u00e0 modifier\" return imax","title":"Automatisme 8"},{"location":"section/automatismes/#automatisme-9","text":"Modifier les expressions \"\u00e0 modifier\" dans la fonction tri_selection ci-dessous pour que la sp\u00e9cification et l'assertion plac\u00e9e \u00e0 la fin de la boucle externe soient v\u00e9rifi\u00e9s. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def tri_selection ( tab ): \"\"\" Param\u00e8tre : tab un tableau de nombres Valeur renvoy\u00e9e : tab Postcondition : valeur renvoy\u00e9e de tab tri\u00e9e dans l'ordre croissant \"\"\" i = len ( tab ) - 1 while i >= 1 : imax = indice_maximum ( tab , \"\u00e0 modifier\" , \"\u00e0 modifier\" ) tab [ i ], tab [ imax ] = \"\u00e0 modifier\" # assertion qui doit \u00eatre v\u00e9rifi\u00e9e assert max ( tab [: i + 1 ]) == tab [ i ] i = \"\u00e0 modifier\" return tab D\u00e9commenter #test_tri(tri_selection) en ligne 64 pour soumettre votre fonction au test unitaire.","title":"Automatisme 9"},{"location":"section/automatismes/#automatisme-10","text":"Un algorithme de tri d\u2019une liste d\u2019entiers est impl\u00e9ment\u00e9 de la fa\u00e7on suivante : 1 2 3 4 5 6 7 8 9 def trier ( L ) : for i in range ( len ( L )): indice_min = i for j in range ( i + 1 , len ( L )): if L [ j ] < L [ indice_min ] : indice_min = j L [ i ], L [ indice_min ] = L [ indice_min ], L [ i ] # assertion vraie \u00e0 cet endroit return L Parmi les assertions suivantes laquelle reste vraie \u00e0 chaque it\u00e9ration de la boucle, \u00e0 l'endroit indiqu\u00e9 ci-dessus ? R\u00e9ponse A : la sous-liste L[0:i+1] contient les i plus grandes valeurs de L tri\u00e9es par ordre d\u00e9croissant R\u00e9ponse B : la sous-liste L[0:i+1] contient les i plus grandes valeurs de L tri\u00e9es par ordre croissant R\u00e9ponse C : la sous-liste L[0:i+1] contient les i plus petites valeurs de L tri\u00e9es par ordre d\u00e9croissant R\u00e9ponse D : la sous-liste L[0:i+1] contient les i plus petites valeurs de L tri\u00e9es par ordre croissant","title":"Automatisme 10"},{"location":"section/automatismes/#automatisme-11","text":"Compl\u00e9ter la fonction Python ci-dessous pour que la sp\u00e9cification et les postconditions soient satisfaites. Combient de comparaisons sont faites lors de l'appel un_doublon(list(range(100))) ? 1 2 3 4 5 6 7 8 9 10 11 12 13 def un_doublon ( t ): \"\"\" Param\u00e8tre : t un tableau de nombres Valeur renvoy\u00e9e : un bool\u00e9en True si t comporte au moins un doublon False sinon \"\"\" #\u00e0 compl\u00e9ter assert un_doublon ([ 1 , 2 , 3 ]) == False assert un_doublon ([ 1 , 2 , 2 ]) == True assert un_doublon ([ 1 , 2 , 4 , 2 ]) == True assert un_doublon ([]) == False","title":"Automatisme 11"},{"location":"section/automatismes/#automatisme-12","text":"Compl\u00e9ter la fonction Python ci-dessous pour que la sp\u00e9cification et les postconditions soient satisfaites. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def index_premiere_occurence_dicho ( x , t ): \"\"\" Param\u00e8tre : t un tableau de nombres tri\u00e9 dans l'ordre croissant x un nombre Valeur renvoy\u00e9e : l'index de la premi\u00e8re de x dans t si x est dans t -1 sinon \"\"\" a = 0 b = len ( t ) - 1 while a <= b : m = ( a + b ) // 2 if t [ m ] < x : \"\u00e0 compl\u00e9ter\" elif t [ m ] > x : \"\u00e0 compl\u00e9ter\" else : \"\u00e0 compl\u00e9ter\" return \"\u00e0 compl\u00e9ter\" return - 1 assert index_premiere_occurence_dicho ( 10 , [ 10 , 10 , 11 , 12 , 13 ]) == 1 assert index_premiere_occurence_dicho ( 10 , [ 9 , 10 , 11 , 12 , 13 ]) == 1 assert index_premiere_occurence_dicho ( 10 , [ 9 , 9 , 11 , 12 , 13 ]) == - 1 assert index_premiere_occurence_dicho ( 10 , [ 7 , 8 , 9 , 10 ]) == 3 assert index_premiere_occurence_dicho ( 10 , [ 7 , 10 , 10 , 10 , 10 ]) == 1 assert index_premiere_occurence_dicho ( 10 , []) == - 1","title":"Automatisme 12"},{"location":"section/automatismes/#automatisme-13","text":"Compl\u00e9ter la fonction Python ci-dessous pour que la sp\u00e9cification et les postconditions soient satisfaites. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 def est_decroissant ( t ): \"\"\" Param\u00e8tre : t un tableau de nombres Valeur renvoy\u00e9e : bool\u00e9en indiquant si t dans l'ordre d\u00e9croissant \"\"\" \"\u00e0 compl\u00e9ter\" def recherche_dicho_decroissant ( x , t ): \"\"\" Param\u00e8tre : t un tableau de nombres tri\u00e9 dans l'ordre d\u00e9croissant x un nombre Valeur renvoy\u00e9e : index de x dans t si x dans t None si x pas dans t \"\"\" a = 0 b = len ( t ) - 1 while a <= b : m = ( a + b ) // 2 \"\u00e0 compl\u00e9ter\" return None assert est_decroissant ([ k ** 2 for k in range ( 10 )]) == False assert est_decroissant ([]) == True t1 = list ( range ( 10 , - 1 , - 1 )) assert est_decroissant ( t1 ) == True assert recherche_dicho_decroissant ( 8 , t1 ) == 2 assert recherche_dicho_decroissant ( 10 , t1 ) == 0 assert recherche_dicho_decroissant ( 0 , t1 ) == 10 assert recherche_dicho_decroissant ( 4.5 , t1 ) == None print ( \"Test unitaires r\u00e9ussis pour l'automatisme 13 : recherche_dicho_decroissant et est_decroissant\" )","title":"Automatisme 13"},{"location":"section/automatismes/#automatisme-14","text":"Convertir en flottant au format simple pr\u00e9cision (mantisse sur 8 bits et exposant sur 23 bits), le nombre d'\u00e9criture d\u00e9cimale 9,78125. Convertir en flottant au format simple pr\u00e9cision (mantisse sur 8 bits et exposant sur 23 bits), le nombre d'\u00e9criture d\u00e9cimale 0,1. V\u00e9rifier avec le convertisseur en ligne https://www.h-schmidt.net/FloatConverter/IEEE754.html ou la fonction donn\u00e9e ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def decimal_vers_IEE754 ( x , taille_exposant , taille_mantisse ): #print(\"d\u00e9termination du signe\") if x > 0 : print ( \"Bit de signe : 0\" ) elif x < 0 : print ( \"Bit de signe : 1\" ) else : print ( \"O valeur particuli\u00e8re\" ) if x != 0 : #print(\"d\u00e9termination de l'exposant\") exposant = 0 while int ( x ) >= 1 : x = x / 2 exposant = exposant + 1 while int ( x ) == 0 : x = x * 2 exposant = exposant - 1 decalage = 2 ** ( taille_exposant - 1 ) - 1 print ( \"Exposant en d\u00e9cimal : \" , exposant ) print ( f \"Exposant d\u00e9cal\u00e9 de + { decalage } : \" , exposant + decalage ) print ( f \"Exposant d\u00e9cal\u00e9 de + { decalage } : codage binaire sur 11 bits : \" , bin ( exposant + decalage ) . lstrip ( '0b' ) . zfill ( taille_exposant )) #print(\"d\u00e9termination des bits de mantisse\") x = x - 1 nbits = 0 mantisse = [] while nbits < taille_mantisse : x = x * 2 partie_entiere = int ( x ) mantisse . append ( str ( partie_entiere )) if partie_entiere == 1 : x = x - partie_entiere nbits = nbits + 1 print ( \"Mantisse : \" , '' . join ( mantisse ))","title":"Automatisme 14"},{"location":"section/automatismes/#automatisme-15","text":"On consid\u00e8re une formule bool\u00e9enne form des variables bool\u00e9ennes a et b dont voici la table de v\u00e9rit\u00e9. a b form True True False False True True True False True False False False Quelle est cette formule bool\u00e9enne ? R\u00e9ponse A : a and b R\u00e9ponse B : a or b R\u00e9ponse C : ((not(a)) and b) or (a and (not(b))) R\u00e9ponse D : (not(a)) or (not(b))","title":"Automatisme 15"},{"location":"section/automatismes/#automatisme-16","text":"Pouvez-vous deviner ce qui va se passer si on ex\u00e9cute le code ci-dessous ? V\u00e9rifiez. Explication ? def boucle1(): x = 1 h = 1 c = 0 while x < 2: h = h / 2 x = x + h c = c + 1 return x == 2, c boucle1() R\u00e9ponse A : (False, 53) R\u00e9ponse B : (True, 53) R\u00e9ponse C : (True, 52) R\u00e9ponse D : la boucle ne se termine pas car d'apr\u00e8s une formule du cours de math\u00e9matiques sur la somme des termes cons\u00e9cutifs d'une suite g\u00e9om\u00e9trique, pour tout entier naturel n on a : <a href=\"https://www.codecogs.com/eqnedit.php?latex=1+1/2+1/2 2+...+1/2 n&space;=&space;(1-1/2 {n+1})/(1-1/2)=2(1-1/2 )<2\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?1+1/2+1/2 2+...+1/2 n&space;=&space;(1-1/2 {n+1})/(1-1/2)=2(1-1/2 )<2\" title=\"1+1/2+1/2 2+...+1/2 n = (1-1/2 {n+1})/(1-1/2)=2(1-1/2 )<2\" />","title":"Automatisme 16"},{"location":"section/automatismes/#automatisme-17-banque-depreuve-pratique-2021","text":"\u00c9crire une fonction recherche qui prend en param\u00e8tres elt un nombre entier et tab un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de elt dans tab si elt est dans tab et -1 sinon. Exemples : 1 2 3 4 5 6 7 8 >>> recherche ( 1 , [ 2 , 3 , 4 ]) - 1 >>> recherche ( 1 , [ 10 , 12 , 1 , 56 ]) 2 >>> recherche ( 50 , [ 1 , 50 , 1 ]) 1 >>> recherche ( 15 , [ 8 , 9 , 10 , 15 ]) 3","title":"Automatisme 17 (banque d'\u00e9preuve pratique 2021)"},{"location":"section/automatismes/#automatisme-18-banque-depreuve-pratique-2021","text":"\u00c9crire une fonction maxi qui prend en param\u00e8tre une liste tab de nombres entiers et renvoie un couple donnant le plus grand \u00e9l\u00e9ment de cette liste, ainsi que l\u2019indice de la premi\u00e8re apparition de ce maximum dans la liste. Exemple : 1 2 >>> maxi ([ 1 , 5 , 6 , 9 , 1 , 2 , 3 , 7 , 9 , 8 ]) ( 9 , 3 )","title":"Automatisme 18 (banque d'\u00e9preuve pratique 2021)"},{"location":"section/automatismes/#automatisme-19-banque-depreuve-pratique-2021","text":"On consid\u00e8re la fonction insere ci-dessous qui prend en argument un entier a et un tableau tab d'entiers tri\u00e9s par ordre croissant. Cette fonction ins\u00e8re la valeur a dans le tableau et renvoie le nouveau tableau. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes python. Compl\u00e9ter la fonction insere ci-dessous. def insere(a, tab): l = list(tab) #l contient les m\u00eames \u00e9l\u00e9ments que tab l.append(a) i = \"\u00e0 compl\u00e9ter\" while i >= 0 and a < \"\u00e0 compl\u00e9ter\" : l[i+1] = \"\u00e0 compl\u00e9ter\" l[i] = a i = \"\u00e0 compl\u00e9ter\" return l assert insere(3,[1,2,4,5]) == [1, 2, 3, 4, 5] assert insere(10,[1,2,7,12,14,25]) == [1, 2, 7, 10, 12, 14, 25] assert insere(1,[2,3,4]) == [1,2,3,4] print('Tests r\u00e9ussis')","title":"Automatisme 19 (banque d'\u00e9preuve pratique 2021)"},{"location":"section/automatismes/#automatisme-20-banque-depreuve-pratique-2021","text":"Compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. def dichotomie(tab, x): \"\"\" tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant x : nombre entier La fonction renvoie True si tab contient x et False sinon \"\"\" debut = 0 fin = len(tab) - 1 while debut < = fin: m = \"\u00e0 compl\u00e9ter\" if x == tab[m]: return \"\u00e0 compl\u00e9ter\" if x > tab[m]: debut = m + 1 else: fin = \"\u00e0 compl\u00e9ter\" return \"\u00e0 compl\u00e9ter\" assert dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],28) == True assert dichotomie([15, 16, 18, 19, 23, 24, 28, 29, 31, 33],27) == False print('Tests r\u00e9ussis')","title":"Automatisme 20 (banque d'\u00e9preuve pratique 2021)"},{"location":"section/automatismes/#automatisme-21-banque-depreuve-pratique-2021","text":"\u00c9crire une fonction tri_selection qui prend en param\u00e8tre un tableau tab de nombres entiers et qui renvoie le tableau tri\u00e9 par ordre croissant. On utilisera l\u2019algorithme suivant : on recherche le plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ; on recherche le second plus petit \u00e9l\u00e9ment du tableau, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 1 ; on continue de cette fa\u00e7on jusqu'\u00e0 ce que le tableau soit enti\u00e8rement tri\u00e9 dans l'ordre croissant. Exemples de postconditions : 1 2 3 4 >>> assert tri_selection ([ 1 , 52 , 6 , - 9 , 12 ]) == [ - 9 , 1 , 6 , 12 , 52 ] >>> assert tri_selection ([]) == [] >>> assert tri_selection ([ 1 , 4 , 8 ]) == [ 1 , 4 , 8 ] >>> assert tri_selection ([ 8 , 4 , 1 ]) == [ 1 , 4 , 8 ]","title":"Automatisme 21 (banque d'\u00e9preuve pratique 2021)"},{"location":"section/automatismes/#automatisme-22-banque-depreuve-pratique-2021","text":"Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : bob, radar, et non sont des mots palindromes. De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543. L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome. Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction est_nbre_palindrome s\u2019appuiera sur la fonction est_palindrome qui elle-m\u00eame s\u2019appuiera sur la fonction inverse_chaine . La fonction inverse_chaine inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res chaine et renvoie la cha\u00eene invers\u00e9e. La fonction est_palindrome teste si une chaine de caract\u00e8res chaine est un palindrome. Elle renvoie True si c\u2019est le cas et False sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente. La fonction est_nbre_palindrome teste si un nombre nbre est un palindrome. Elle renvoie True si c\u2019est le cas et False sinon. Cette fonction s'appuie sur la fonction pr\u00e9c\u00e9dente. Compl\u00e9ter le code des trois fonctions ci-dessous. def inverse_chaine(chaine): result = \"\u00e0 compl\u00e9ter\" for caractere in chaine: result = \"\u00e0 compl\u00e9ter\" return result def est_palindrome(chaine): inverse = inverse_chaine(chaine) return \"\u00e0 compl\u00e9ter\" def est_nbre_palindrome(nbre): chaine = \"\u00e0 compl\u00e9ter\" return est_palindrome(chaine) assert inverse_chaine('bac') == 'cab' assert est_palindrome('NSI') == False assert est_palindrome('ISN-NSI') == True assert est_nbre_palindrome(214312) == False assert est_nbre_palindrome(213312) == True print(\"Tests r\u00e9ussis\")","title":"Automatisme 22 (banque d'\u00e9preuve pratique 2021)"},{"location":"section/automatismes/#automatisme-23-banque-depreuve-pratique-2021","text":"Compl\u00e9ter la fonction separe ci-dessous qui prend en argument un tableau tab dont les \u00e9l\u00e9ments sont des 0 et des 1 et qui s\u00e9pare les 0 des 1 en pla\u00e7ant les 0 en d\u00e9but de tableau et les 1 \u00e0 la suite. def separe(tab): i = 0 j = \"\u00e0 compl\u00e9ter\" while i < j : if tab[i] == 0 : i = \"\u00e0 compl\u00e9ter\" else : tab[i], tab[j] = \"\u00e0 compl\u00e9ter\" j = \"\u00e0 compl\u00e9ter\" return tab assert separe([1, 0, 1, 0, 1, 0, 1, 0]) == [0, 0, 0, 0, 1, 1, 1, 1] assert separe([1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0]) == [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1] print(\"Tests r\u00e9ussis\")","title":"Automatisme 23 (banque d'\u00e9preuve pratique 2021)"},{"location":"section/automatismes/#automatisme-24-banque-depreuve-pratique-2021","text":"\u00c9crire une fonction indice_du_min qui prend en param\u00e8tre un tableau de nombres non tri\u00e9 tab , et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python. Exemples : 1 2 3 4 5 6 >>> indice_du_min ([ 5 ]) 0 >>> indice_du_min ([ 2 , 4 , 1 ]) 2 >>> indice_du_min ([ 5 , 3 , 2 , 2 , 4 ]) 2","title":"Automatisme 24 (banque d'\u00e9preuve pratique 2021)"},{"location":"section/automatismes/#automatisme-25-traitement-de-donnees-en-tables","text":"T\u00e9l\u00e9charger l'archive avec le code source \u00e0 compl\u00e9ter et le fichier eleves.csv . Un corrig\u00e9 est ici . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 #!/usr/bin/env python \"\"\"Consigne : compl\u00e9ter au niveau des \u00e0 \"compl\u00e9ter\" les fonctions : 1) moyenne_table 2) enreg_avec_recompense 3) generer_table_recompenses 4) decompte_recompenses 5) clef_tri_moyenne_decroissant 6) clef_tri_alphabetique_croissant_moyenne_decroissant Chaque fonction est accompagn\u00e9 d'un test unitaire => pour tester, d\u00e9sactiver les commentaires dans le programme principal \u00e0 partir de la ligne 151 Pour les tris il faut aussi compl\u00e9ter le programme principal en lignes 167 et 171 \"\"\" import csv #Import / Export d'un tel fichier CSV ver la repr\u00e9sentation d'une tble en Python (tableau de dictionnaires) def lecture_csv ( fichier , delimiteur ): \"\"\" Param\u00e8tre : un chemin vers un fichier CSV Valeur renvoy\u00e9e : un tableau de dictionnaires, extraction de la table contenue dans le fichier \"\"\" f = open ( fichier , mode = 'r' , encoding = 'utf8' , newline = '' ) reader = csv . DictReader ( f , delimiter = delimiteur ) #cr\u00e9ation de l'objet reader table = [ dict ( enregistrement ) for enregistrement in reader ] f . close () return table def ecriture_csv ( table , fichier , delimiteur ): \"\"\" Param\u00e8tre : un chemin vers un fichier CSV une table comme tableau de dictionnaires partageant les m\u00eames clefs, de valeurs str Valeur renvoy\u00e9e : None, \u00e9crit table dans fichier avec Dictriter du module CSV \"\"\" g = open ( fichier , mode = 'w' , encoding = 'utf8' , newline = '' ) attributs = list ( table [ 0 ] . keys ()) writer = csv . DictWriter ( g , delimiter = delimiteur , fieldnames = attributs ) #cr\u00e9ation de l'objet writer writer . writeheader () #\u00e9criture des attibuts for enregistrement in table : writer . writerow ( enregistrement ) #\u00e9criture des enregistrements g . close () def moyenne_table ( table_eleves ) : \"\"\"Param\u00e8tre : table_eleves est une repr\u00e9sentation de la table extraite de eleves.csv sous forme de tableau de dictionnaires. Attention les attributs 'moyenne' sont de type 'str' Valeur renvoy\u00e9e : un flottant repr\u00e9sentant la moyenne de tous les \u00e9l\u00e8ves de la table arrondie \u00e0 2 chiffres apr\u00e8s la virgule \"\"\" somme = 0 compteur = 0 for enreg in table_eleves : \"\u00e0 compl\u00e9ter\" \"\u00e0 compl\u00e9ter\" return round ( somme / compteur , 2 ) def test_moyenne_table (): assert moyenne_table ( table_eleves ) == 11.46 print ( \"Test unitaire de moyenne_table r\u00e9ussi\" ) def enreg_avec_recompense ( enreg ): \"\"\" Param\u00e8tre : enreg un dictionnaire de clefs 'pr\u00e9nom', 'nom', 'moyenne' Attention toutes les clefs ont des valeurs de type str Valeur renvoy\u00e9e : extension du dictionnaire avec une nouvelle clef 'r\u00e9compense' de valeurs s : 'insuffisant' si moyenne < 8 'm\u00e9diocre' si 8 <= moyenne < 10 'passable' si 10 <= moyenne < 12 'encouragements' si 12 <= moyenne < 14 'compliments' si 14 <= moyenne < 16 'f\u00e9licitations' si moyenne > 16 \"\"\" copie = { clef : valeur for clef , valeur in enreg . items () } m = \"\u00e0 compl\u00e9ter\" if m < 8 : copie [ 'r\u00e9compense' ] = 'insuffisant' elif \"\u00e0 compl\u00e9ter\" : copie [ 'r\u00e9compense' ] = 'm\u00e9diocre' elif \"\u00e0 compl\u00e9ter\" : copie [ 'r\u00e9compense' ] = 'passable' elif \"\u00e0 compl\u00e9ter\" : copie [ 'r\u00e9compense' ] = 'encouragements' elif \"\u00e0 compl\u00e9ter\" : copie [ 'r\u00e9compense' ] = 'compliments' else : copie [ 'r\u00e9compense' ] = 'f\u00e9licitations' return copie def generer_table_recompenses ( table_eleves ): \"\"\"Param\u00e8tre : table_eleves est une repr\u00e9sentation de la table extraite de eleves.csv sous forme de tableau de dictionnaires Valeur renvoy\u00e9e : une extension de table_eleves avec un nouvel attribut 'r\u00e9compense' chaque nouvel enregistrement est g\u00e9n\u00e9r\u00e9 par enreg_avec_recompense \"\"\" table_recompenses = \"\u00e0 compl\u00e9ter\" return table_recompenses def test_generer_table_recompenses (): \"\"\"Test unitaires de generer_table_recompenses\"\"\" table_recompenses = generer_table_recompenses ( table_eleves ) assert table_recompenses [ 0 ] == { 'pr\u00e9nom' : 'Zo\u00e9' , 'nom' : 'Collin' , 'moyenne' : '19' , 'r\u00e9compense' : 'f\u00e9licitations' } assert table_recompenses [ 8 ] == { 'pr\u00e9nom' : 'Roland' , 'nom' : 'Joly' , 'moyenne' : '8' , 'r\u00e9compense' : 'm\u00e9diocre' } print ( \"Test unitaires de generer_table_recompenses r\u00e9ussis\" ) def decompte_recompenses ( table_recompenses ): \"\"\"Param\u00e8tre : table_recompenses est une repr\u00e9sentation de la table renvoy\u00e9e par generer_table_recompenses. Valeur renvoy\u00e9e : un dictionnaire avec le d\u00e9compte de chaque r\u00e9compense \"\"\" decompte = dict () for enreg in table_recompenses : \"\u00e0 compl\u00e9ter\" \"\u00e0 compl\u00e9ter\" \"\u00e0 compl\u00e9ter\" \"\u00e0 compl\u00e9ter\" return decompte def test_decompte_recompenses (): \"\"\"Test unitaires de decompte_recompenses\"\"\" decompte = decompte_recompenses ( table_recompenses ) assert decompte == { 'f\u00e9licitations' : 89 , 'm\u00e9diocre' : 77 , 'compliments' : 95 , 'insuffisant' : 86 , 'passable' : 81 , 'encouragements' : 72 } print ( \"Test unitaires de decompte_recompenses r\u00e9ussis\" ) def clef_tri_moyenne_decroissant ( enreg ): \"\"\"Clef de tri par moyenne d\u00e9croissante Attention la valeur de l'attribut 'moyenne' de enreg est de type str\"\"\" return \"\u00e0 compl\u00e9ter\" def clef_tri_alphabetique_croissant_moyenne_decroissant ( enreg ): \"\"\"Clef de tri par moyenne d\u00e9croissante Attention la valeur de l'attribut 'moyenne' de enreg est de type str\"\"\" return \"\u00e0 compl\u00e9ter\" #Programme principal table_eleves = lecture_csv ( 'eleves.csv' , ',' ) #D\u00e9commenter lorsque moyenne_table est compl\u00e9t\u00e9e #test_moyenne_table() #D\u00e9commenter lorsque generer_table_recompenses est compl\u00e9t\u00e9e #table_recompenses = generer_table_recompenses(table_eleves) #test_generer_table_recompenses() #D\u00e9commenter lorsque decompte_recompenses est compl\u00e9t\u00e9e #test_decompte_recompenses() #D\u00e9commenter e lorsque clef_tri_moyenne_decroissant termin\u00e9e #table_recompenses = generer_table_recompenses(table_eleves) #Ecrire une instruction qui permet de trier table_recompenses dans l'ordre d\u00e9croissant des moyennes #table_tri1 = \"\u00e0 compl\u00e9ter\" #Ecrire une instruction qui permet de trier table_recompenses : #d'abord dans l'ordre alphab\u00e9tique croissant puis dans l'ordre d\u00e9croissant des moyennes #table_tri2 = \"\u00e0 compl\u00e9ter\"","title":"Automatisme 25 : traitement de donn\u00e9es en tables"},{"location":"section/cours-tables-indexation-git/","text":"Cr\u00e9dits Table de donn\u00e9es \u00c9change de table de donn\u00e9es avec un fichier CSV Manipulation de fichiers CSV en Python Synth\u00e8se Cr\u00e9dits \u2693\ufe0e Ce cours est largement inspir\u00e9 de deux sources : le chapitre 15 du manuel NSI de la collection Tortue chez Ellipse, auteurs : Ballabonski, Conchon, Filliatre, N\u2019Guyen ; le cours de Julien de Vill\u00e8le . Table de donn\u00e9es \u2693\ufe0e Histoire 1 L'homme organisait les donn\u00e9es sous forme de tableau bien avant l'invention de l'ordinateur : les donn\u00e9es tabulaires ou tables de donn\u00e9es , apparaissent d\u00e9j\u00e0 dans les livres de compte de l'\u00c9gypte ancienne. De nos jours les relev\u00e9s de comptes bancaires sont encore pr\u00e9sent\u00e9s sous forme de tableaux avec pour chaque op\u00e9ration sa date, sa nature (d\u00e9bit ou cr\u00e9dit) et son montant. En informatique, les tables de donn\u00e9es se sont d\u00e9velopp\u00e9es dans dans les ann\u00e9es 1970 avec l'essor des Syst\u00e8mes de Gestion de Base de Donn\u00e9es s'appuyant sur le mod\u00e8le relationnel propos\u00e9 par Edgar F. Codd chez IBM. Les Syst\u00e8mes de Gestion de Base de Donn\u00e9es permettent aujourd'hui le traitement automatique de gigantesques bases de donn\u00e9es, qui est un \u00e9l\u00e9ment fondamental dans nos soci\u00e9t\u00e9s de l'information. Les Syst\u00e8mes de Gestion de Base de Donn\u00e9es seront \u00e9tudi\u00e9s en classe de terminale. Nous pr\u00e9senterons cette ann\u00e9e les traitements de tables de donn\u00e9es qui peuvent \u00eatre effectu\u00e9s \u00e0 l'aide de scripts Python, ce qui couvre d\u00e9j\u00e0 un large champ de besoins en data science , bio-informatique , informatique financi\u00e8re ou de gestion ... D\u00e9finition 1 Une feuille de tableur est un mod\u00e8le de donn\u00e9es tabulaires ou table de donn\u00e9es . D\u00e9finissons le vocabulaire : Une table , repr\u00e9sent\u00e9e sous forme de tableau, est une collection d'\u00e9l\u00e9ments qui sont les lignes du tableau. Chaque \u00e9l\u00e9ment de la table , ou ligne de sa repr\u00e9sentation sous forme de tableau, s'appelle un enregistrement . Tous les enregistrements d'une m\u00eame table sont des p-uplets nomm\u00e9s qui partagent les m\u00eames descripteurs , appel\u00e9s aussi attributs . Dans une repr\u00e9sentation de la table sous forme de tableau, chaque attribut correspond \u00e0 une colonne. Chaque attribut est caract\u00e9ris\u00e9 par son type et son domaine de valeurs . Dans une repr\u00e9sentation sous forme de tableau, les descripteurs ou attributs sont en g\u00e9n\u00e9ral plac\u00e9s comme en-t\u00eate de colonnes sur la premi\u00e8re ligne. Example 1 La table repr\u00e9sent\u00e9e ci-dessus rassemble les enregistrements des clients d'un site web marchand. Les attributs de cette table sont : le nom et le pr\u00e9nom du client de type cha\u00eene de caract\u00e8res l'adresse mail du client du type cha\u00eene de caract\u00e8res avec un domaine de valeurs particulier le d\u00e9partement du client du type cha\u00eene de caract\u00e8res avec un domaine de valeurs particulier le nombre de visites du client de type entier avec pour domaine de valeurs les entiers positifs les d\u00e9penses du client de type flottant avec pour domaine de valeurs les flottants positifs \u00c9change de table de donn\u00e9es avec un fichier CSV \u2693\ufe0e Point de cours1 Pour \u00e9changer des donn\u00e9es tabulaires entre les programmes qui doivent les manipuler, on les exporte puis les importe sous la forme de fichiers textes, c'est-\u00e0-dire lisibles par l'\u00eatre humain. Afin d'assurer l'interop\u00e9rabilit\u00e9 entre diff\u00e9rents programmes, un fichier doit respecter un format normalis\u00e9. L'un des formats les plus r\u00e9pandus pour l'\u00e9change de donn\u00e9es tabulaires est le format CSV pour Comma Separated Values : un fichier CSV est un fichier texte donc \u00e9ditable avec un \u00e9diteur de textes comme Notepad++ ; chaque ligne du fichier correspond \u00e0 un enregistrement de la table pour un enregistrement donn\u00e9, les valeurs des diff\u00e9rents attributs sont s\u00e9par\u00e9es en champs par un d\u00e9limiteur qui est en g\u00e9n\u00e9ral l'un des symboles , ou ; ou : . la premi\u00e8re ligne contient en g\u00e9n\u00e9ral les noms des attributs . les champs peuvent \u00eatre d\u00e9limit\u00e9s par des guillemets droits \" s'ils contiennent du texte avec des espaces ou des sauts de ligne. Le caract\u00e8re \" est alors \u00e9chapp\u00e9 en \"\" pour le distinguer des guillemets droits d\u00e9limiteurs. Voici un extrait d'un fichier CSV correspondant \u00e0 la table pr\u00e9sent\u00e9e dans l'exemple 1 : 1 2 3 4 5 nom,pr\u00e9nom,email,d\u00e9partement,naissance,visites,d\u00e9penses Gomes,Brigitte,bgomes@laposte.net,79,1960-08-21,67,8342.99 Nicolas,Georges,gnicolas@yahoo.fr,10,1994-05-26,86,10908.08 Berger,P\u00e9n\u00e9lope,pberger@noos.fr,73,2001-03-01,131,3817.79 Charrier,Richard,rcharrier@sfr.fr,2B,1977-08-07,16,997.09 On donne ci-dessous un autre extrait de fichier CSV qui est un export de fichier d'identifiants de l'Espace Num\u00e9rique de Travail (avec valeurs modifi\u00e9es). La table comporte 19 attributs de rne \u00e0 pays list\u00e9s sur la premi\u00e8re ligne. Le premier enregistrement figure sur la deuxi\u00e8me ligne avec pour valeur du premier champ 0690026D et sept champs vides \u00e0 la fin. On observe que le d\u00e9limiteur de champ est le symbole ; , que les champs peuvent contenir des espaces, que certains sont vides et que le nombre de champs pour le premier enregistrement ne correspond pas au nombre d'attributs ! On peut imaginer que pour traiter un tel fichier avec un programme, il faut d'abord analyser sa structure, ses particularit\u00e9s et pr\u00e9voir d'\u00e9ventuelles irr\u00e9gularit\u00e9s dans les donn\u00e9es (absence, erreurs de type, de saisie, corruption du fichier ...). Le contr\u00f4le de la validit\u00e9 des donn\u00e9es doit donc \u00eatre une composante du programme de traitement. 1 2 rne;uid;classe;profil;prenom;nom;login;mot de passe;cle de jointure;uid pere;uid mere;uid tuteur1;uid tuteur2;prenom enfant;nom enfant;adresse;code postal;ville;pays 0690026D;WKZ08710;813;Eleve;Mathieu;DUPONT;mathieu.dupont;>>>> Mot de passe d\u00e9j\u00e0 modifi\u00e9 par utilisateur >>>>;AC-LYON$3780909;WKZ02158;WKZ02171;;;;;;;; Exercice 1 Questions type E3C Dans la plupart des fichiers CSV, que contient la premi\u00e8re ligne ? R\u00e9ponse A : des notes concernant la table de donn\u00e9es R\u00e9ponse B : les sources des donn\u00e9es R\u00e9ponse C : les descripteurs des champs de la table de donn\u00e9es R\u00e9ponse D : l'auteur de la table de donn\u00e9es Laquelle de ces affirmations est vraie ? R\u00e9ponse A : on ne peut acc\u00e9der au contenu d'un fichier CSV que par l'interm\u00e9diaire d'un programme Python R\u00e9ponse B : CSV est un format de chiffrement des donn\u00e9es R\u00e9ponse C : le format CSV a \u00e9t\u00e9 con\u00e7u pour assurer la confidentialit\u00e9 d'une partie du code d'un programme R\u00e9ponse D : les fichiers CSV sont compos\u00e9s de donn\u00e9es s\u00e9par\u00e9es par des caract\u00e8res comme des virgules Qu'est-ce que le format de fichier CSV ? R\u00e9ponse A : un format de fichier mis au point par Microsoft pour Excel R\u00e9ponse B : un format de fichier pour d\u00e9crire une base de donn\u00e9e R\u00e9ponse C : un format de fichier o\u00f9 les donn\u00e9es sont s\u00e9par\u00e9es par un caract\u00e8re tel qu'une virgule R\u00e9ponse D : un format de fichier d\u00e9crivant une page Web Manipulation de fichiers CSV en Python \u2693\ufe0e D\u00e9finition 2 L'indexation de table est la cr\u00e9ation d'une structure de donn\u00e9es \u00e0 partir de donn\u00e9es tabulaires. Nous allons pr\u00e9senter quelques m\u00e9thodes d'indexation de table extraite d'un fichier CSV vers une structure de donn\u00e9es du langage Python : tableau de tableaux ou tableau de dictionnaires que nous privil\u00e9gierons. Dans cette section, on consid\u00e8re le fichier CSV , clients_mini.csv , repr\u00e9sentant un extrait de la table de l\u2019exemple 1 avec les enregistrements de 20 clients d\u2019un site web marchand. M\u00e9thode 1 Pr\u00e9sentons deux m\u00e9thodes de lecture de fichiers CSV qui utilisent les outils standards de Python. On fait les hypoth\u00e8ses suivantes : la premi\u00e8re ligne du fichier contient les attributs et on conna\u00eet le d\u00e9limiteur, ici le symbole , . Lecture On peut extraire les attributs et la table contenus dans le fichier clients_mini.csv avec le code ci-dessous : 1 2 3 4 fichier = open ( 'clients_mini.csv' , encoding = 'utf8' , newline = '' ) #ouverture du fichier attributs = fichier . readline () . rstrip () . split ( ',' ) #extraction de la ligne des attributs table = [ ligne . rstrip () . split ( ',' ) for ligne in fichier ] #extraction des autres lignes fichier . close () #fermeture du fichier La m\u00e9thode open permet de cr\u00e9er un objet fichier qu'on peut parcourir ligne par ligne avec un curseur : d'abord la premi\u00e8re ligne avec fichier.readline() puis les lignes suivantes en it\u00e9rant sur fichier . Il est important de pr\u00e9ciser l'encodage du fichier , par d\u00e9faut c'est celui du syst\u00e8me d'exploitation. Chaque ligne est une cha\u00eene de caract\u00e8res d\u00e9coup\u00e9e en liste de champs selon le d\u00e9limiteur pass\u00e9 en param\u00e8tre \u00e0 la m\u00e9thode split . Le caract\u00e8re de saut de lignes a d'abord \u00e9t\u00e9 supprim\u00e9 avec la m\u00e9thode rstrip . On r\u00e9cup\u00e8re ainsi les attributs comme un tableau de type list et la table comme un tableau d'enregistrements qui sont eux-m\u00eames des tableaux. Notons que toutes les valeurs sont des cha\u00eenes de caract\u00e8res et qu'il faudra convertir certaines pour les traiter ! 1 2 3 4 5 6 >>> attributs #tableau des attributs [ 'nom' , 'pr\u00e9nom' , 'email' , 'd\u00e9partement' , 'naissance' , 'visites' , 'd\u00e9penses' ] >>> table [ 0 ] #tableau premier enregistrement [ 'Gomes' , 'Brigitte' , 'bgomes@laposte.net' , '79' , '1960-08-21' , '67' , '8342.99' ] >>> table [: 2 ] #tableau de tableaux : extrait [[ 'Gomes' , 'Brigitte' , 'bgomes@laposte.net' , '79' , '1960-08-21' , '67' , '8342.99' ], [ 'Nicolas' , 'Georges' , 'gnicolas@yahoo.fr' , '10' , '1994-05-26' , '86' , '10908.08' ]] \u00c9criture On peut ensuite recopier les attributs et la table dans un autre fichier clients_mini_copie.csv avec le code ci-dessous : 1 2 3 4 5 6 g = open ( 'clients_mini_copie.csv' , encoding = 'utf8' , newline = '' ) premiere_ligne = ',' . join ( attributs ) + ' \\n ' g . write ( premiere_ligne ) for enregistrement in table : g . write ( ',' . join ( enregistrement ) + ' \\n ' ) g . close () La m\u00e9thode join permet de concat\u00e9ner les \u00e9l\u00e9ments d'un tableau de cha\u00eenes de caract\u00e8res avec un d\u00e9limiteur. Avec ces m\u00e9thodes, une table est donc repr\u00e9sent\u00e9e par un tableau de tableaux . On acc\u00e8de \u00e0 un enregistrement par son index dans la table et \u00e0 la valeur d'un attribut par son index dans le tableau des attributs (s\u00e9par\u00e9 de la table). C'est incommode et le code produit est peu lisible. Ainsi, pour acc\u00e9der \u00e0 l'adresse mail du premier enregistrement il faut saisir table[0][2] . On aimerait \u00e9crire table[0]['email'] . Pour cela, chaque enregistrement devrait \u00eatre un dictionnaire avec pour clefs les attributs de la table. C'est possible en utilisant le module csv . M\u00e9thode 2 Le module csv est disponible dans la biblioth\u00e8que standard et peut donc \u00eatre utilis\u00e9 sans installation sp\u00e9cifique. \u00c0 partir de la table contenu dans le m\u00eame fichier CSV 'clients_mini.csv' , ce module permet de cr\u00e9er une structure de donn\u00e9es d'un acc\u00e8s plus facile. Lecture Le code ci-dessous permet d'extraire directement la table d'un fichier CSV dans une structure de donn\u00e9es qui est un tableau de dictionnaires : chaque enregistrement est un dictionnaire dont les clefs sont les attributs list\u00e9s sur la premi\u00e8re ligne du fichier. Pour les versions de Python 3.6 et 3.7 uniquement, les dictionnaires renvoy\u00e9s sont sp\u00e9cifiques, de type OrderedDict , et on prendra soin de les convertir en dictionnaires standard avec dict . 1 2 3 4 5 6 import csv # import du module f = open ( 'clients_mini.csv' , mode = 'r' , encoding = 'utf8' , newline = '' ) reader = csv . DictReader ( f , delimiter = ',' ) #cr\u00e9ation d'un objet reader table = [ dict ( enregistrement ) for enregistrement in reader ] f . close () La structure de donn\u00e9es repr\u00e9sentant la table est un tableau de dictionnaires : l'acc\u00e8s aux enregistrements se fait par index et \u00e0 leurs attributs par clef : tr\u00e8s efficace (co\u00fbt constant) et code lisible. Notons que toutes les valeurs restent des cha\u00eenes de caract\u00e8res et qu'il faudra convertir certaines pour les traiter ! 1 2 3 4 5 6 7 8 >>> table [ 0 ] #premier enregistrement de type dictionnaire { 'nom' : 'Gomes' , 'pr\u00e9nom' : 'Brigitte' , 'email' : 'bgomes@laposte.net' , 'd\u00e9partement' : '79' , 'naissance' : '1960-08-21' , 'visites' : '67' , 'd\u00e9penses' : '8342.99' } >>> table [: 2 ] # tableu de dictionnaires : extrait [{ 'nom' : 'Gomes' , 'pr\u00e9nom' : 'Brigitte' , 'email' : 'bgomes@laposte.net' , 'd\u00e9partement' : '79' , 'naissance' : '1960-08-21' , 'visites' : '67' , 'd\u00e9penses' : '8342.99' }, { 'nom' : 'Nicolas' , 'pr\u00e9nom' : 'Georges' , 'email' : 'gnicolas@yahoo.fr' , 'd\u00e9partement' : '10' , 'naissance' : '1994-05-26' , 'visites' : '86' , 'd\u00e9penses' : '10908.08' }] >>> len ( table ) 20 >>> table [ 0 ][ 'email' ] #acc\u00e8s facile aux valeurs des attibuts par clefs 'bgomes@laposte.net' \u00c9criture L'\u00e9criture d'un tableau de dictionnaires partageant les m\u00eames clefs sous forme de table dans un fichier CSV, s'effectue de fa\u00e7on sym\u00e9trique \u00e0 travers un objet DictWriter . \u00c0 titre, d'exemple, on recopie la table extraite pr\u00e9c\u00e9demment dans un autre fichier CSV. Depuis Python 3.7, le parcours des clefs d'un dictionnaire est garanti dans le m\u00eame ordre que celui d'insertion donc on peut r\u00e9cup\u00e9rer la liste des attributs avec list(table[0].keys()) 1 2 3 4 5 6 7 g = open ( 'clients_mini_copie2.csv' , mode = 'w' , encoding = 'utf8' , newline = '' ) attributs = list ( table [ 0 ] . keys ()) writer = csv . DictWriter ( g , delimiter = ',' , fieldnames = attributs ) #cr\u00e9ation de l'objet writer writer . writeheader () #\u00e9criture des attributs for enregistrement in table : writer . writerow ( enregistrement ) #\u00e9criture des enregistrements g . close () Remarque Le module csv permet aussi d'extraire une table d'un fichier CSV sous forme de tableau de tableaux comme dans la m\u00e9thode pr\u00e9c\u00e9dente. Le d\u00e9coupage des lignes/enregistrements selon le d\u00e9limiteur est int\u00e9gr\u00e9 ce qui simplifie le code. 1 2 3 4 f = open ( 'clients_mini.csv' , mode = 'r' , encoding = 'utf8' , newline = '' ) reader = csv . reader ( f , delimiter = ',' ) table = [ ligne for ligne in reader ] f . close () Exercice 2 Le fichier clients_avec_erreurs.csv contient une table de la m\u00eame structure que celle de l'exemple 1 mais avec des donn\u00e9es invalides : pour l'attribut 'email' : format incorrect ou adresse manquante pour l'attribut 'd\u00e9partement' : valeur incorrecte pour l'attribut 'naissance' : ann\u00e9e hors post\u00e9rieure \u00e0 2005 (pas de clients de moins de 15 ans !), mois hors de la plage [1,12], jour hors de la plage possible pour l'ann\u00e9e et le mois fix\u00e9. pour les attributs : 'visites' et ' d\u00e9penses ' : valeurs n\u00e9gatives L'objectif de cet exercice est d'extraire la table du fichier, de filtrer les enregistrements valides et de les recopier dans un fichier 'clients_sans_erreurs.csv' . Ouvrir le fichier cours_exercices_tables_eleve.py dans un IDE Python. Compl\u00e9ter les fonctions de lecture / \u00e9criture d'une table repr\u00e9sent\u00e9e par un tableau de dictionnaires vers un fichier CSV : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def lecture_csv ( fichier , delimiteur ): f = open ( fichier , mode = 'r' , encoding = 'utf8' , newline = '' ) reader = csv . DictReader ( f , delimiter = delimiteur ) f . close () return table def ecriture_csv ( table , fichier , delimiteur ): g = open ( fichier , mode = 'w' , encoding = 'utf8' , newline = '' ) attributs = list ( table [ 0 ] . keys ()) writer = csv . DictWriter ( g , delimiter = delimiteur , fieldnames = attributs ) g . close () Compl\u00e9ter les fonctions bissextile , valide_mois , valide_jour puis la fonction valide_naissance . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def bissextile ( a ): \"\"\"Param\u00e8tre : a de type int repr\u00e9sentant une ann\u00e9e Valeur renvoy\u00e9e : bool\u00e9en indiquant si l'ann\u00e9e est bissextile\"\"\" return ..... def valide_annee ( j ): return 1900 <= j <= 2005 def valide_mois ( m ): \"\"\"Param\u00e8tre : m de type int repr\u00e9sentant un mois Valeur renvoy\u00e9e : bool\u00e9en indiquant si le mois est valide (entre 1 et 12)\"\"\" return .... def valide_jour ( a , m , j ): \"\"\"Param\u00e8tre : a, m, j de type int repr\u00e9sentant l'ann\u00e9e, le mois et le jour Valeur renvoy\u00e9e : bool\u00e9en indiquant si le jour est valide pour l'ann\u00e9e et le mois donn\u00e9s\"\"\" return .... def valide_naissance ( date ): \"\"\" Param\u00e8tre : date de type str au format 'ann\u00e9e-mois-jour', ex: '2002-01-07' Valeur renvoy\u00e9e : bool\u00e9en indiquant si le jour est valide pour l'ann\u00e9e et le mois donn\u00e9s \"\"\" a , m , j = date . split ( '-' ) return ...... ...... Les fonctions valide_email , valide_departement , valide_visites et valide_depenses sont fournies, compl\u00e9ter la fonction valide_enregistrement : 1 2 3 4 5 6 7 8 def valide_enregistrement ( enreg ): \"\"\" Param\u00e8tre : un enregistrement de type dictionnaire Valeur renvoy\u00e9e : bool\u00e9en indiquant si toutes les valeurs des attributs sont valides \"\"\" return ....................................................... ....................................................... ....................................................... Si un enregistrement extrait du fichier CSV est valid\u00e9, on peut convertir les valeurs de ces attributs dans le type attendu pour effectuer un traitement : int pour 'visites' et float pour 'd\u00e9penses' et str pour les autres. Compl\u00e9ter la fonction conversion_vers_table ci-dessous pour qu'elle renvoie une copie de l'enregistrement (de type dict ) pass\u00e9 en param\u00e8tre avec les types attendus pour chaque attribut. 1 2 3 4 5 6 7 8 9 def conversion_vers_table ( enregistrement ): return { 'nom' : enregistrement [ 'nom' ], 'pr\u00e9nom' : enregistrement [ 'pr\u00e9nom' ], 'email' : enregistrement [ 'email' ], 'd\u00e9partement' : enregistrement [ 'd\u00e9partement' ], 'naissance' : enregistrement [ 'naissance' ], 'visites' : ............................... , 'd\u00e9penses' : ............................... } On fournit \u00e9galement une fonction conversion_vers_fichier r\u00e9ciproque de la pr\u00e9c\u00e9dente qui convertit les valeurs de touts les attributs d'un enregistrement en type str , avant recopie de la table dans un fichier texte CSV. Compl\u00e9ter la fonction main ci-dessous, avec un code client permettant de r\u00e9aliser l'objectif fix\u00e9 en pr\u00e9ambule de l'exercice. Tester le code client pour v\u00e9rifier les postconditions. 1 2 3 4 5 6 7 8 9 10 11 12 13 def main (): \"\"\"Code client\"\"\" #Traitement / validation / filtrage table = lecture_csv ( 'clients_avec_erreurs.csv' , ',' ) table_valide = [ ..................... for enregistrement in table if ................. ] #postconditions / tests assert len ( table ) == 1000 and len ( table_valide ) == 719 assert table_valide [ 0 ] == { 'nom' : 'Bailly' , 'pr\u00e9nom' : 'Aur\u00e9lie' , 'email' : 'abailly1@gmail.com' , 'd\u00e9partement' : '22' , 'naissance' : '1986-09-22' , 'visites' : 79 , 'd\u00e9penses' : 4389.47 } table_valide_str = [ conversion_vers_fichier ( enregistrement ) for enregistrement in table_valide ] #\u00e9criture de la table valid\u00e9e ecriture_csv ( table_valide_str , 'clients_sans_erreurs.csv' , ',' ) Exercice 3 Questions type E3C On consid\u00e8re l'extraction suivante d'une base de donn\u00e9es des d\u00e9partements fran\u00e7ais. Cette extraction a ensuite \u00e9t\u00e9 sauvegard\u00e9e dans un fichier texte. 1 2 3 4 5 \"1\" , \"01\" , \"Ain\" , \"AIN\" , \"ain\" , \"A500\" \"2\" , \"02\" , \"Aisne\" , \"AISNE\" , \"aisne\" , \"A250\" \"3\" , \"03\" , \"Allier\" , \"ALLIER\" , \"allier\" , \"A460\" \"4\" , \"04\" , \"Alpes-de-Haute-Provence\" , \"ALPES-DE-HAUTE-PROVENCE\" , \"alpes-de-haute-provence\" , \"A412316152\" \"5\" , \"05\" , \"Hautes-Alpes\" , \"HAUTES-ALPES\" , \"hautes-alpes\" , \"H32412\" On consid\u00e8re le code suivant : 1 2 3 4 5 6 7 import csv f = open ( 'departements.csv' , newline = '' ) lesLignes = csv . reader ( f ) for uneLigne in lesLignes : print ( uneLigne [ 3 ]) f . close () Que va produire l'ex\u00e9cution de ce code ? R\u00e9ponse A : L'affichage de la troisi\u00e8me colonne \u00e0 savoir le nom du d\u00e9partement avec une majuscule initiale R\u00e9ponse B : L'affichage de tout le contenu du fichier R\u00e9ponse C : L'affichage du nombre total de d\u00e9partements figurant dans le fichier R\u00e9ponse D : L'affichage de la quatri\u00e8me colonne, \u00e0 savoir le nom du d\u00e9partement tout en majuscules On dispose du fichier 'info.csv' donn\u00e9 ci-dessous : 1 2 3 4 5 6 nom, prenom, naissance, deces lovelace, ada, 1815, 1852 von neumann, john, 1903, 1957 turing, alan, 1912, 1954 mccarthy, john, 1927, 2011 floyd, robert, 1936, 2001 Le programme ci-dessous nous permet de cr\u00e9er un tableau \u00e0 partir de ce fichier. 1 2 3 file = open ( \"info.csv\" , \"r\" ) firstLine = file . readline () # chargement de la ligne d'ent\u00eate tableau = [ line . split ( ',' ) for line in file ] # chargement des donn\u00e9es Les index des lignes de ce tableau vont : R\u00e9ponse A : de 0 \u00e0 3 R\u00e9ponse B : de 1 \u00e0 4 R\u00e9ponse C : de 0 \u00e0 4 R\u00e9ponse D : de 0 \u00e0 5 Quelle expression Python permet d'acc\u00e9der au num\u00e9ro de t\u00e9l\u00e9phone de Tournesol, sachant que le r\u00e9pertoire a \u00e9t\u00e9 d\u00e9fini par l'affectation suivante : 1 2 3 repertoire = [ { 'nom' : 'Dupont' , 'tel' : '5234' }, { 'nom' : 'Tournesol' , 'tel' : '5248' }, { 'nom' : 'Dupond' , 'tel' : '3452' }] R\u00e9ponse A : repertoire['Tournesol'] R\u00e9ponse B : repertoire['tel'][1] R\u00e9ponse C : repertoire[1]['tel'] R\u00e9ponse D : repertoire['Tournesol'][tel] Synth\u00e8se \u2693\ufe0e Synth\u00e8se Les tables de donn\u00e9es sont tr\u00e8s courantes : les donn\u00e9es sont organis\u00e9es en enregistrements (ligne du tableau) qui sont des p-uplets nomm\u00e9s partageant les m\u00eames attributs (ent\u00eates de colonnes dans un tableau). Les tables de donn\u00e9es sont souvent stock\u00e9es sous forme de fichiers CSV : ce sont des fichiers textes o\u00f9 les enregistrements sont des lignes dont les attributs sont s\u00e9par\u00e9s par un caract\u00e8re d\u00e9limiteur . En Python, une table contenue dans un fichier CSV peut \u00eatre repr\u00e9sent\u00e9e dans un tableau de tableaux ou plut\u00f4t un tableau de dictionnaires . Le module csv facilite les op\u00e9rations d'importation et d'exportation de tables vers des fichiers CSV . XKCD 1301","title":"Page 2"},{"location":"section/cours-tables-indexation-git/#credits","text":"Ce cours est largement inspir\u00e9 de deux sources : le chapitre 15 du manuel NSI de la collection Tortue chez Ellipse, auteurs : Ballabonski, Conchon, Filliatre, N\u2019Guyen ; le cours de Julien de Vill\u00e8le .","title":"Cr\u00e9dits"},{"location":"section/cours-tables-indexation-git/#table-de-donnees","text":"Histoire 1 L'homme organisait les donn\u00e9es sous forme de tableau bien avant l'invention de l'ordinateur : les donn\u00e9es tabulaires ou tables de donn\u00e9es , apparaissent d\u00e9j\u00e0 dans les livres de compte de l'\u00c9gypte ancienne. De nos jours les relev\u00e9s de comptes bancaires sont encore pr\u00e9sent\u00e9s sous forme de tableaux avec pour chaque op\u00e9ration sa date, sa nature (d\u00e9bit ou cr\u00e9dit) et son montant. En informatique, les tables de donn\u00e9es se sont d\u00e9velopp\u00e9es dans dans les ann\u00e9es 1970 avec l'essor des Syst\u00e8mes de Gestion de Base de Donn\u00e9es s'appuyant sur le mod\u00e8le relationnel propos\u00e9 par Edgar F. Codd chez IBM. Les Syst\u00e8mes de Gestion de Base de Donn\u00e9es permettent aujourd'hui le traitement automatique de gigantesques bases de donn\u00e9es, qui est un \u00e9l\u00e9ment fondamental dans nos soci\u00e9t\u00e9s de l'information. Les Syst\u00e8mes de Gestion de Base de Donn\u00e9es seront \u00e9tudi\u00e9s en classe de terminale. Nous pr\u00e9senterons cette ann\u00e9e les traitements de tables de donn\u00e9es qui peuvent \u00eatre effectu\u00e9s \u00e0 l'aide de scripts Python, ce qui couvre d\u00e9j\u00e0 un large champ de besoins en data science , bio-informatique , informatique financi\u00e8re ou de gestion ... D\u00e9finition 1 Une feuille de tableur est un mod\u00e8le de donn\u00e9es tabulaires ou table de donn\u00e9es . D\u00e9finissons le vocabulaire : Une table , repr\u00e9sent\u00e9e sous forme de tableau, est une collection d'\u00e9l\u00e9ments qui sont les lignes du tableau. Chaque \u00e9l\u00e9ment de la table , ou ligne de sa repr\u00e9sentation sous forme de tableau, s'appelle un enregistrement . Tous les enregistrements d'une m\u00eame table sont des p-uplets nomm\u00e9s qui partagent les m\u00eames descripteurs , appel\u00e9s aussi attributs . Dans une repr\u00e9sentation de la table sous forme de tableau, chaque attribut correspond \u00e0 une colonne. Chaque attribut est caract\u00e9ris\u00e9 par son type et son domaine de valeurs . Dans une repr\u00e9sentation sous forme de tableau, les descripteurs ou attributs sont en g\u00e9n\u00e9ral plac\u00e9s comme en-t\u00eate de colonnes sur la premi\u00e8re ligne. Example 1 La table repr\u00e9sent\u00e9e ci-dessus rassemble les enregistrements des clients d'un site web marchand. Les attributs de cette table sont : le nom et le pr\u00e9nom du client de type cha\u00eene de caract\u00e8res l'adresse mail du client du type cha\u00eene de caract\u00e8res avec un domaine de valeurs particulier le d\u00e9partement du client du type cha\u00eene de caract\u00e8res avec un domaine de valeurs particulier le nombre de visites du client de type entier avec pour domaine de valeurs les entiers positifs les d\u00e9penses du client de type flottant avec pour domaine de valeurs les flottants positifs","title":"Table de donn\u00e9es"},{"location":"section/cours-tables-indexation-git/#echange-de-table-de-donnees-avec-un-fichier-csv","text":"Point de cours1 Pour \u00e9changer des donn\u00e9es tabulaires entre les programmes qui doivent les manipuler, on les exporte puis les importe sous la forme de fichiers textes, c'est-\u00e0-dire lisibles par l'\u00eatre humain. Afin d'assurer l'interop\u00e9rabilit\u00e9 entre diff\u00e9rents programmes, un fichier doit respecter un format normalis\u00e9. L'un des formats les plus r\u00e9pandus pour l'\u00e9change de donn\u00e9es tabulaires est le format CSV pour Comma Separated Values : un fichier CSV est un fichier texte donc \u00e9ditable avec un \u00e9diteur de textes comme Notepad++ ; chaque ligne du fichier correspond \u00e0 un enregistrement de la table pour un enregistrement donn\u00e9, les valeurs des diff\u00e9rents attributs sont s\u00e9par\u00e9es en champs par un d\u00e9limiteur qui est en g\u00e9n\u00e9ral l'un des symboles , ou ; ou : . la premi\u00e8re ligne contient en g\u00e9n\u00e9ral les noms des attributs . les champs peuvent \u00eatre d\u00e9limit\u00e9s par des guillemets droits \" s'ils contiennent du texte avec des espaces ou des sauts de ligne. Le caract\u00e8re \" est alors \u00e9chapp\u00e9 en \"\" pour le distinguer des guillemets droits d\u00e9limiteurs. Voici un extrait d'un fichier CSV correspondant \u00e0 la table pr\u00e9sent\u00e9e dans l'exemple 1 : 1 2 3 4 5 nom,pr\u00e9nom,email,d\u00e9partement,naissance,visites,d\u00e9penses Gomes,Brigitte,bgomes@laposte.net,79,1960-08-21,67,8342.99 Nicolas,Georges,gnicolas@yahoo.fr,10,1994-05-26,86,10908.08 Berger,P\u00e9n\u00e9lope,pberger@noos.fr,73,2001-03-01,131,3817.79 Charrier,Richard,rcharrier@sfr.fr,2B,1977-08-07,16,997.09 On donne ci-dessous un autre extrait de fichier CSV qui est un export de fichier d'identifiants de l'Espace Num\u00e9rique de Travail (avec valeurs modifi\u00e9es). La table comporte 19 attributs de rne \u00e0 pays list\u00e9s sur la premi\u00e8re ligne. Le premier enregistrement figure sur la deuxi\u00e8me ligne avec pour valeur du premier champ 0690026D et sept champs vides \u00e0 la fin. On observe que le d\u00e9limiteur de champ est le symbole ; , que les champs peuvent contenir des espaces, que certains sont vides et que le nombre de champs pour le premier enregistrement ne correspond pas au nombre d'attributs ! On peut imaginer que pour traiter un tel fichier avec un programme, il faut d'abord analyser sa structure, ses particularit\u00e9s et pr\u00e9voir d'\u00e9ventuelles irr\u00e9gularit\u00e9s dans les donn\u00e9es (absence, erreurs de type, de saisie, corruption du fichier ...). Le contr\u00f4le de la validit\u00e9 des donn\u00e9es doit donc \u00eatre une composante du programme de traitement. 1 2 rne;uid;classe;profil;prenom;nom;login;mot de passe;cle de jointure;uid pere;uid mere;uid tuteur1;uid tuteur2;prenom enfant;nom enfant;adresse;code postal;ville;pays 0690026D;WKZ08710;813;Eleve;Mathieu;DUPONT;mathieu.dupont;>>>> Mot de passe d\u00e9j\u00e0 modifi\u00e9 par utilisateur >>>>;AC-LYON$3780909;WKZ02158;WKZ02171;;;;;;;; Exercice 1 Questions type E3C Dans la plupart des fichiers CSV, que contient la premi\u00e8re ligne ? R\u00e9ponse A : des notes concernant la table de donn\u00e9es R\u00e9ponse B : les sources des donn\u00e9es R\u00e9ponse C : les descripteurs des champs de la table de donn\u00e9es R\u00e9ponse D : l'auteur de la table de donn\u00e9es Laquelle de ces affirmations est vraie ? R\u00e9ponse A : on ne peut acc\u00e9der au contenu d'un fichier CSV que par l'interm\u00e9diaire d'un programme Python R\u00e9ponse B : CSV est un format de chiffrement des donn\u00e9es R\u00e9ponse C : le format CSV a \u00e9t\u00e9 con\u00e7u pour assurer la confidentialit\u00e9 d'une partie du code d'un programme R\u00e9ponse D : les fichiers CSV sont compos\u00e9s de donn\u00e9es s\u00e9par\u00e9es par des caract\u00e8res comme des virgules Qu'est-ce que le format de fichier CSV ? R\u00e9ponse A : un format de fichier mis au point par Microsoft pour Excel R\u00e9ponse B : un format de fichier pour d\u00e9crire une base de donn\u00e9e R\u00e9ponse C : un format de fichier o\u00f9 les donn\u00e9es sont s\u00e9par\u00e9es par un caract\u00e8re tel qu'une virgule R\u00e9ponse D : un format de fichier d\u00e9crivant une page Web","title":"\u00c9change de table de donn\u00e9es avec un fichier CSV"},{"location":"section/cours-tables-indexation-git/#manipulation-de-fichiers-csv-en-python","text":"D\u00e9finition 2 L'indexation de table est la cr\u00e9ation d'une structure de donn\u00e9es \u00e0 partir de donn\u00e9es tabulaires. Nous allons pr\u00e9senter quelques m\u00e9thodes d'indexation de table extraite d'un fichier CSV vers une structure de donn\u00e9es du langage Python : tableau de tableaux ou tableau de dictionnaires que nous privil\u00e9gierons. Dans cette section, on consid\u00e8re le fichier CSV , clients_mini.csv , repr\u00e9sentant un extrait de la table de l\u2019exemple 1 avec les enregistrements de 20 clients d\u2019un site web marchand. M\u00e9thode 1 Pr\u00e9sentons deux m\u00e9thodes de lecture de fichiers CSV qui utilisent les outils standards de Python. On fait les hypoth\u00e8ses suivantes : la premi\u00e8re ligne du fichier contient les attributs et on conna\u00eet le d\u00e9limiteur, ici le symbole , . Lecture On peut extraire les attributs et la table contenus dans le fichier clients_mini.csv avec le code ci-dessous : 1 2 3 4 fichier = open ( 'clients_mini.csv' , encoding = 'utf8' , newline = '' ) #ouverture du fichier attributs = fichier . readline () . rstrip () . split ( ',' ) #extraction de la ligne des attributs table = [ ligne . rstrip () . split ( ',' ) for ligne in fichier ] #extraction des autres lignes fichier . close () #fermeture du fichier La m\u00e9thode open permet de cr\u00e9er un objet fichier qu'on peut parcourir ligne par ligne avec un curseur : d'abord la premi\u00e8re ligne avec fichier.readline() puis les lignes suivantes en it\u00e9rant sur fichier . Il est important de pr\u00e9ciser l'encodage du fichier , par d\u00e9faut c'est celui du syst\u00e8me d'exploitation. Chaque ligne est une cha\u00eene de caract\u00e8res d\u00e9coup\u00e9e en liste de champs selon le d\u00e9limiteur pass\u00e9 en param\u00e8tre \u00e0 la m\u00e9thode split . Le caract\u00e8re de saut de lignes a d'abord \u00e9t\u00e9 supprim\u00e9 avec la m\u00e9thode rstrip . On r\u00e9cup\u00e8re ainsi les attributs comme un tableau de type list et la table comme un tableau d'enregistrements qui sont eux-m\u00eames des tableaux. Notons que toutes les valeurs sont des cha\u00eenes de caract\u00e8res et qu'il faudra convertir certaines pour les traiter ! 1 2 3 4 5 6 >>> attributs #tableau des attributs [ 'nom' , 'pr\u00e9nom' , 'email' , 'd\u00e9partement' , 'naissance' , 'visites' , 'd\u00e9penses' ] >>> table [ 0 ] #tableau premier enregistrement [ 'Gomes' , 'Brigitte' , 'bgomes@laposte.net' , '79' , '1960-08-21' , '67' , '8342.99' ] >>> table [: 2 ] #tableau de tableaux : extrait [[ 'Gomes' , 'Brigitte' , 'bgomes@laposte.net' , '79' , '1960-08-21' , '67' , '8342.99' ], [ 'Nicolas' , 'Georges' , 'gnicolas@yahoo.fr' , '10' , '1994-05-26' , '86' , '10908.08' ]] \u00c9criture On peut ensuite recopier les attributs et la table dans un autre fichier clients_mini_copie.csv avec le code ci-dessous : 1 2 3 4 5 6 g = open ( 'clients_mini_copie.csv' , encoding = 'utf8' , newline = '' ) premiere_ligne = ',' . join ( attributs ) + ' \\n ' g . write ( premiere_ligne ) for enregistrement in table : g . write ( ',' . join ( enregistrement ) + ' \\n ' ) g . close () La m\u00e9thode join permet de concat\u00e9ner les \u00e9l\u00e9ments d'un tableau de cha\u00eenes de caract\u00e8res avec un d\u00e9limiteur. Avec ces m\u00e9thodes, une table est donc repr\u00e9sent\u00e9e par un tableau de tableaux . On acc\u00e8de \u00e0 un enregistrement par son index dans la table et \u00e0 la valeur d'un attribut par son index dans le tableau des attributs (s\u00e9par\u00e9 de la table). C'est incommode et le code produit est peu lisible. Ainsi, pour acc\u00e9der \u00e0 l'adresse mail du premier enregistrement il faut saisir table[0][2] . On aimerait \u00e9crire table[0]['email'] . Pour cela, chaque enregistrement devrait \u00eatre un dictionnaire avec pour clefs les attributs de la table. C'est possible en utilisant le module csv . M\u00e9thode 2 Le module csv est disponible dans la biblioth\u00e8que standard et peut donc \u00eatre utilis\u00e9 sans installation sp\u00e9cifique. \u00c0 partir de la table contenu dans le m\u00eame fichier CSV 'clients_mini.csv' , ce module permet de cr\u00e9er une structure de donn\u00e9es d'un acc\u00e8s plus facile. Lecture Le code ci-dessous permet d'extraire directement la table d'un fichier CSV dans une structure de donn\u00e9es qui est un tableau de dictionnaires : chaque enregistrement est un dictionnaire dont les clefs sont les attributs list\u00e9s sur la premi\u00e8re ligne du fichier. Pour les versions de Python 3.6 et 3.7 uniquement, les dictionnaires renvoy\u00e9s sont sp\u00e9cifiques, de type OrderedDict , et on prendra soin de les convertir en dictionnaires standard avec dict . 1 2 3 4 5 6 import csv # import du module f = open ( 'clients_mini.csv' , mode = 'r' , encoding = 'utf8' , newline = '' ) reader = csv . DictReader ( f , delimiter = ',' ) #cr\u00e9ation d'un objet reader table = [ dict ( enregistrement ) for enregistrement in reader ] f . close () La structure de donn\u00e9es repr\u00e9sentant la table est un tableau de dictionnaires : l'acc\u00e8s aux enregistrements se fait par index et \u00e0 leurs attributs par clef : tr\u00e8s efficace (co\u00fbt constant) et code lisible. Notons que toutes les valeurs restent des cha\u00eenes de caract\u00e8res et qu'il faudra convertir certaines pour les traiter ! 1 2 3 4 5 6 7 8 >>> table [ 0 ] #premier enregistrement de type dictionnaire { 'nom' : 'Gomes' , 'pr\u00e9nom' : 'Brigitte' , 'email' : 'bgomes@laposte.net' , 'd\u00e9partement' : '79' , 'naissance' : '1960-08-21' , 'visites' : '67' , 'd\u00e9penses' : '8342.99' } >>> table [: 2 ] # tableu de dictionnaires : extrait [{ 'nom' : 'Gomes' , 'pr\u00e9nom' : 'Brigitte' , 'email' : 'bgomes@laposte.net' , 'd\u00e9partement' : '79' , 'naissance' : '1960-08-21' , 'visites' : '67' , 'd\u00e9penses' : '8342.99' }, { 'nom' : 'Nicolas' , 'pr\u00e9nom' : 'Georges' , 'email' : 'gnicolas@yahoo.fr' , 'd\u00e9partement' : '10' , 'naissance' : '1994-05-26' , 'visites' : '86' , 'd\u00e9penses' : '10908.08' }] >>> len ( table ) 20 >>> table [ 0 ][ 'email' ] #acc\u00e8s facile aux valeurs des attibuts par clefs 'bgomes@laposte.net' \u00c9criture L'\u00e9criture d'un tableau de dictionnaires partageant les m\u00eames clefs sous forme de table dans un fichier CSV, s'effectue de fa\u00e7on sym\u00e9trique \u00e0 travers un objet DictWriter . \u00c0 titre, d'exemple, on recopie la table extraite pr\u00e9c\u00e9demment dans un autre fichier CSV. Depuis Python 3.7, le parcours des clefs d'un dictionnaire est garanti dans le m\u00eame ordre que celui d'insertion donc on peut r\u00e9cup\u00e9rer la liste des attributs avec list(table[0].keys()) 1 2 3 4 5 6 7 g = open ( 'clients_mini_copie2.csv' , mode = 'w' , encoding = 'utf8' , newline = '' ) attributs = list ( table [ 0 ] . keys ()) writer = csv . DictWriter ( g , delimiter = ',' , fieldnames = attributs ) #cr\u00e9ation de l'objet writer writer . writeheader () #\u00e9criture des attributs for enregistrement in table : writer . writerow ( enregistrement ) #\u00e9criture des enregistrements g . close () Remarque Le module csv permet aussi d'extraire une table d'un fichier CSV sous forme de tableau de tableaux comme dans la m\u00e9thode pr\u00e9c\u00e9dente. Le d\u00e9coupage des lignes/enregistrements selon le d\u00e9limiteur est int\u00e9gr\u00e9 ce qui simplifie le code. 1 2 3 4 f = open ( 'clients_mini.csv' , mode = 'r' , encoding = 'utf8' , newline = '' ) reader = csv . reader ( f , delimiter = ',' ) table = [ ligne for ligne in reader ] f . close () Exercice 2 Le fichier clients_avec_erreurs.csv contient une table de la m\u00eame structure que celle de l'exemple 1 mais avec des donn\u00e9es invalides : pour l'attribut 'email' : format incorrect ou adresse manquante pour l'attribut 'd\u00e9partement' : valeur incorrecte pour l'attribut 'naissance' : ann\u00e9e hors post\u00e9rieure \u00e0 2005 (pas de clients de moins de 15 ans !), mois hors de la plage [1,12], jour hors de la plage possible pour l'ann\u00e9e et le mois fix\u00e9. pour les attributs : 'visites' et ' d\u00e9penses ' : valeurs n\u00e9gatives L'objectif de cet exercice est d'extraire la table du fichier, de filtrer les enregistrements valides et de les recopier dans un fichier 'clients_sans_erreurs.csv' . Ouvrir le fichier cours_exercices_tables_eleve.py dans un IDE Python. Compl\u00e9ter les fonctions de lecture / \u00e9criture d'une table repr\u00e9sent\u00e9e par un tableau de dictionnaires vers un fichier CSV : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def lecture_csv ( fichier , delimiteur ): f = open ( fichier , mode = 'r' , encoding = 'utf8' , newline = '' ) reader = csv . DictReader ( f , delimiter = delimiteur ) f . close () return table def ecriture_csv ( table , fichier , delimiteur ): g = open ( fichier , mode = 'w' , encoding = 'utf8' , newline = '' ) attributs = list ( table [ 0 ] . keys ()) writer = csv . DictWriter ( g , delimiter = delimiteur , fieldnames = attributs ) g . close () Compl\u00e9ter les fonctions bissextile , valide_mois , valide_jour puis la fonction valide_naissance . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def bissextile ( a ): \"\"\"Param\u00e8tre : a de type int repr\u00e9sentant une ann\u00e9e Valeur renvoy\u00e9e : bool\u00e9en indiquant si l'ann\u00e9e est bissextile\"\"\" return ..... def valide_annee ( j ): return 1900 <= j <= 2005 def valide_mois ( m ): \"\"\"Param\u00e8tre : m de type int repr\u00e9sentant un mois Valeur renvoy\u00e9e : bool\u00e9en indiquant si le mois est valide (entre 1 et 12)\"\"\" return .... def valide_jour ( a , m , j ): \"\"\"Param\u00e8tre : a, m, j de type int repr\u00e9sentant l'ann\u00e9e, le mois et le jour Valeur renvoy\u00e9e : bool\u00e9en indiquant si le jour est valide pour l'ann\u00e9e et le mois donn\u00e9s\"\"\" return .... def valide_naissance ( date ): \"\"\" Param\u00e8tre : date de type str au format 'ann\u00e9e-mois-jour', ex: '2002-01-07' Valeur renvoy\u00e9e : bool\u00e9en indiquant si le jour est valide pour l'ann\u00e9e et le mois donn\u00e9s \"\"\" a , m , j = date . split ( '-' ) return ...... ...... Les fonctions valide_email , valide_departement , valide_visites et valide_depenses sont fournies, compl\u00e9ter la fonction valide_enregistrement : 1 2 3 4 5 6 7 8 def valide_enregistrement ( enreg ): \"\"\" Param\u00e8tre : un enregistrement de type dictionnaire Valeur renvoy\u00e9e : bool\u00e9en indiquant si toutes les valeurs des attributs sont valides \"\"\" return ....................................................... ....................................................... ....................................................... Si un enregistrement extrait du fichier CSV est valid\u00e9, on peut convertir les valeurs de ces attributs dans le type attendu pour effectuer un traitement : int pour 'visites' et float pour 'd\u00e9penses' et str pour les autres. Compl\u00e9ter la fonction conversion_vers_table ci-dessous pour qu'elle renvoie une copie de l'enregistrement (de type dict ) pass\u00e9 en param\u00e8tre avec les types attendus pour chaque attribut. 1 2 3 4 5 6 7 8 9 def conversion_vers_table ( enregistrement ): return { 'nom' : enregistrement [ 'nom' ], 'pr\u00e9nom' : enregistrement [ 'pr\u00e9nom' ], 'email' : enregistrement [ 'email' ], 'd\u00e9partement' : enregistrement [ 'd\u00e9partement' ], 'naissance' : enregistrement [ 'naissance' ], 'visites' : ............................... , 'd\u00e9penses' : ............................... } On fournit \u00e9galement une fonction conversion_vers_fichier r\u00e9ciproque de la pr\u00e9c\u00e9dente qui convertit les valeurs de touts les attributs d'un enregistrement en type str , avant recopie de la table dans un fichier texte CSV. Compl\u00e9ter la fonction main ci-dessous, avec un code client permettant de r\u00e9aliser l'objectif fix\u00e9 en pr\u00e9ambule de l'exercice. Tester le code client pour v\u00e9rifier les postconditions. 1 2 3 4 5 6 7 8 9 10 11 12 13 def main (): \"\"\"Code client\"\"\" #Traitement / validation / filtrage table = lecture_csv ( 'clients_avec_erreurs.csv' , ',' ) table_valide = [ ..................... for enregistrement in table if ................. ] #postconditions / tests assert len ( table ) == 1000 and len ( table_valide ) == 719 assert table_valide [ 0 ] == { 'nom' : 'Bailly' , 'pr\u00e9nom' : 'Aur\u00e9lie' , 'email' : 'abailly1@gmail.com' , 'd\u00e9partement' : '22' , 'naissance' : '1986-09-22' , 'visites' : 79 , 'd\u00e9penses' : 4389.47 } table_valide_str = [ conversion_vers_fichier ( enregistrement ) for enregistrement in table_valide ] #\u00e9criture de la table valid\u00e9e ecriture_csv ( table_valide_str , 'clients_sans_erreurs.csv' , ',' ) Exercice 3 Questions type E3C On consid\u00e8re l'extraction suivante d'une base de donn\u00e9es des d\u00e9partements fran\u00e7ais. Cette extraction a ensuite \u00e9t\u00e9 sauvegard\u00e9e dans un fichier texte. 1 2 3 4 5 \"1\" , \"01\" , \"Ain\" , \"AIN\" , \"ain\" , \"A500\" \"2\" , \"02\" , \"Aisne\" , \"AISNE\" , \"aisne\" , \"A250\" \"3\" , \"03\" , \"Allier\" , \"ALLIER\" , \"allier\" , \"A460\" \"4\" , \"04\" , \"Alpes-de-Haute-Provence\" , \"ALPES-DE-HAUTE-PROVENCE\" , \"alpes-de-haute-provence\" , \"A412316152\" \"5\" , \"05\" , \"Hautes-Alpes\" , \"HAUTES-ALPES\" , \"hautes-alpes\" , \"H32412\" On consid\u00e8re le code suivant : 1 2 3 4 5 6 7 import csv f = open ( 'departements.csv' , newline = '' ) lesLignes = csv . reader ( f ) for uneLigne in lesLignes : print ( uneLigne [ 3 ]) f . close () Que va produire l'ex\u00e9cution de ce code ? R\u00e9ponse A : L'affichage de la troisi\u00e8me colonne \u00e0 savoir le nom du d\u00e9partement avec une majuscule initiale R\u00e9ponse B : L'affichage de tout le contenu du fichier R\u00e9ponse C : L'affichage du nombre total de d\u00e9partements figurant dans le fichier R\u00e9ponse D : L'affichage de la quatri\u00e8me colonne, \u00e0 savoir le nom du d\u00e9partement tout en majuscules On dispose du fichier 'info.csv' donn\u00e9 ci-dessous : 1 2 3 4 5 6 nom, prenom, naissance, deces lovelace, ada, 1815, 1852 von neumann, john, 1903, 1957 turing, alan, 1912, 1954 mccarthy, john, 1927, 2011 floyd, robert, 1936, 2001 Le programme ci-dessous nous permet de cr\u00e9er un tableau \u00e0 partir de ce fichier. 1 2 3 file = open ( \"info.csv\" , \"r\" ) firstLine = file . readline () # chargement de la ligne d'ent\u00eate tableau = [ line . split ( ',' ) for line in file ] # chargement des donn\u00e9es Les index des lignes de ce tableau vont : R\u00e9ponse A : de 0 \u00e0 3 R\u00e9ponse B : de 1 \u00e0 4 R\u00e9ponse C : de 0 \u00e0 4 R\u00e9ponse D : de 0 \u00e0 5 Quelle expression Python permet d'acc\u00e9der au num\u00e9ro de t\u00e9l\u00e9phone de Tournesol, sachant que le r\u00e9pertoire a \u00e9t\u00e9 d\u00e9fini par l'affectation suivante : 1 2 3 repertoire = [ { 'nom' : 'Dupont' , 'tel' : '5234' }, { 'nom' : 'Tournesol' , 'tel' : '5248' }, { 'nom' : 'Dupond' , 'tel' : '3452' }] R\u00e9ponse A : repertoire['Tournesol'] R\u00e9ponse B : repertoire['tel'][1] R\u00e9ponse C : repertoire[1]['tel'] R\u00e9ponse D : repertoire['Tournesol'][tel]","title":"Manipulation de fichiers CSV en Python"},{"location":"section/cours-tables-indexation-git/#synthese","text":"Synth\u00e8se Les tables de donn\u00e9es sont tr\u00e8s courantes : les donn\u00e9es sont organis\u00e9es en enregistrements (ligne du tableau) qui sont des p-uplets nomm\u00e9s partageant les m\u00eames attributs (ent\u00eates de colonnes dans un tableau). Les tables de donn\u00e9es sont souvent stock\u00e9es sous forme de fichiers CSV : ce sont des fichiers textes o\u00f9 les enregistrements sont des lignes dont les attributs sont s\u00e9par\u00e9s par un caract\u00e8re d\u00e9limiteur . En Python, une table contenue dans un fichier CSV peut \u00eatre repr\u00e9sent\u00e9e dans un tableau de tableaux ou plut\u00f4t un tableau de dictionnaires . Le module csv facilite les op\u00e9rations d'importation et d'exportation de tables vers des fichiers CSV . XKCD 1301","title":"Synth\u00e8se"}]}